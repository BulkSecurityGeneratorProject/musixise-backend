{"version":3,"sources":["app/app.module.js","app/account/social/directive/social.directive.js","app/account/reset/request/reset.request.state.js","app/account/reset/request/reset.request.controller.js","app/account/reset/finish/reset.finish.state.js","app/account/reset/finish/reset.finish.controller.js","app/services/user/user.service.js","app/services/auth/register.service.js","app/services/auth/principal.service.js","app/services/auth/password.service.js","app/services/auth/password-reset-init.service.js","app/services/auth/password-reset-finish.service.js","app/services/auth/has-authority.directive.js","app/app.js","app/services/auth/has-any-authority.directive.js","app/services/auth/auth.service.js","app/services/auth/auth.jwt.service.js","app/services/auth/activate.service.js","app/services/auth/account.service.js","app/layouts/navbar/navbar.controller.js","app/layouts/navbar/active-menu.directive.js","app/layouts/navbar/active-link.directive.js","app/layouts/error/error.state.js","app/entities/work-list-follow/work-list-follow.state.js","app/entities/work-list-follow/work-list-follow.service.js","app/entities/work-list-follow/work-list-follow.search.service.js","app/entities/work-list-follow/work-list-follow.controller.js","app/entities/work-list-follow/work-list-follow-dialog.controller.js","app/entities/work-list-follow/work-list-follow-detail.controller.js","app/entities/work-list-follow/work-list-follow-delete-dialog.controller.js","app/entities/work-list/work-list.state.js","app/entities/work-list/work-list.service.js","app/entities/work-list/work-list.search.service.js","app/entities/work-list/work-list.controller.js","app/entities/work-list/work-list-dialog.controller.js","app/entities/work-list/work-list-detail.controller.js","app/entities/work-list/work-list-delete-dialog.controller.js","app/entities/stages-follow/stages-follow.state.js","app/entities/stages-follow/stages-follow.service.js","app/entities/stages-follow/stages-follow.search.service.js","app/entities/stages-follow/stages-follow.controller.js","app/entities/stages-follow/stages-follow-dialog.controller.js","app/entities/stages-follow/stages-follow-detail.controller.js","app/entities/stages-follow/stages-follow-delete-dialog.controller.js","app/entities/stages/stages.state.js","app/entities/stages/stages.service.js","app/entities/stages/stages.search.service.js","app/entities/stages/stages.controller.js","app/entities/stages/stages-dialog.controller.js","app/entities/stages/stages-detail.controller.js","app/entities/stages/stages-delete-dialog.controller.js","app/entities/musixiser-follow/musixiser-follow.state.js","app/entities/musixiser-follow/musixiser-follow.service.js","app/entities/musixiser-follow/musixiser-follow.search.service.js","app/entities/musixiser-follow/musixiser-follow.controller.js","app/entities/musixiser-follow/musixiser-follow-dialog.controller.js","app/entities/musixiser-follow/musixiser-follow-detail.controller.js","app/entities/musixiser-follow/musixiser-follow-delete-dialog.controller.js","app/entities/musixiser/musixiser.state.js","app/entities/musixiser/musixiser.service.js","app/entities/musixiser/musixiser.search.service.js","app/entities/musixiser/musixiser.controller.js","app/entities/musixiser/musixiser-dialog.controller.js","app/entities/musixiser/musixiser-detail.controller.js","app/entities/musixiser/musixiser-delete-dialog.controller.js","app/entities/config/config.state.js","app/entities/config/config.service.js","app/entities/config/config.controller.js","app/entities/config/config-dialog.controller.js","app/entities/config/config-delete-dialog.controller.js","app/entities/audience/audience.state.js","app/entities/audience/audience.service.js","app/entities/audience/audience.search.service.js","app/entities/audience/audience.controller.js","app/entities/audience/audience-dialog.controller.js","app/entities/audience/audience-detail.controller.js","app/entities/audience/audience-delete-dialog.controller.js","app/components/util/truncate-words.filter.js","app/components/util/truncate-characters.filter.js","app/components/util/sort.directive.js","app/components/util/sort-by.directive.js","app/components/util/parse-links.service.js","app/components/util/pagination-util.service.js","app/components/util/jhi-item-count.directive.js","app/components/util/date-util.service.js","app/components/util/data-util.service.js","app/components/util/capitalize.filter.js","app/components/util/base64.service.js","app/components/login/login.service.js","app/components/login/login.controller.js","app/components/language/language.service.js","app/components/language/language.filter.js","app/components/language/language.controller.js","app/components/language/language.constants.js","app/components/form/uib-pagination.config.js","app/components/form/uib-pager.config.js","app/components/form/show-validation.directive.js","app/components/form/pagination.constants.js","app/components/form/minbytes.directive.js","app/components/form/maxbytes.directive.js","app/components/alert/alert.service.js","app/components/alert/alert.directive.js","app/components/alert/alert-error.directive.js","app/blocks/interceptor/notification.interceptor.js","app/blocks/interceptor/errorhandler.interceptor.js","app/blocks/interceptor/auth.interceptor.js","app/blocks/interceptor/auth-expired.interceptor.js","app/blocks/handlers/translation.handler.js","app/blocks/handlers/state.handler.js","app/blocks/config/translation.config.js","app/blocks/config/translation-storage.provider.js","app/blocks/config/localstorage.config.js","app/blocks/config/http.config.js","app/blocks/config/compile.config.js","app/blocks/config/alert.config.js","app/admin/user-management/user-management.state.js","app/admin/user-management/user-management.controller.js","app/admin/user-management/user-management-dialog.controller.js","app/admin/user-management/user-management-detail.controller.js","app/admin/user-management/user-management-delete-dialog.controller.js","app/admin/tracker/tracker.state.js","app/admin/tracker/tracker.service.js","app/admin/tracker/tracker.controller.js","app/admin/metrics/metrics.state.js","app/admin/metrics/metrics.service.js","app/admin/metrics/metrics.modal.controller.js","app/admin/metrics/metrics.controller.js","app/admin/logs/logs.state.js","app/admin/logs/logs.service.js","app/admin/logs/logs.controller.js","app/admin/health/health.state.js","app/admin/health/health.service.js","app/admin/health/health.modal.controller.js","app/admin/health/health.controller.js","app/admin/docs/docs.state.js","app/admin/configuration/configuration.state.js","app/admin/configuration/configuration.service.js","app/admin/configuration/configuration.controller.js","app/admin/audits/audits.state.js","app/admin/audits/audits.service.js","app/admin/audits/audits.controller.js","app/account/social/social.state.js","app/account/social/social.service.js","app/account/social/social-register.controller.js","app/account/social/social-auth.controller.js","app/account/settings/settings.state.js","app/account/settings/settings.controller.js","app/account/register/register.state.js","app/account/register/register.controller.js","app/account/password/password.state.js","app/account/password/password.controller.js","app/account/password/password-strength-bar.directive.js","app/account/activate/activate.state.js","app/account/activate/activate.controller.js","app/home/home.state.js","app/home/home.controller.js","app/entities/entity.state.js","app/admin/admin.state.js","app/account/account.state.js","app/app.state.js","app/app.constants.js"],"names":["run","stateHandler","translationHandler","initialize","angular","module","$inject","jhSocial","$translatePartialLoader","$translate","$filter","SocialService","linkFunc","scope","addPart","refresh","label","provider","providerSetting","getProviderSetting","providerURL","getProviderURL","csrf","getCSRF","directive","restrict","templateUrl","link","stateConfig","$stateProvider","state","parent","url","data","authorities","views","content@","controller","controllerAs","resolve","translatePartialLoader","config","RequestResetController","$timeout","Auth","requestReset","vm","error","errorEmailNotExists","resetPasswordInit","resetAccount","email","then","success","response","status","this","element","focus","ResetFinishController","$stateParams","LoginService","finishReset","password","confirmPassword","doNotMatch","resetPasswordFinish","key","newPassword","keyMissing","isUndefined","login","open","User","$resource","service","query","method","isArray","get","transformResponse","fromJson","save","update","delete","factory","Register","Principal","$q","Account","JhiTrackerService","authenticate","identity","_identity","_authenticated","hasAnyAuthority","i","length","indexOf","hasAuthority","authority","_id","when","force","getAccountThen","account","deferred","connect","getAccountCatch","defer","undefined","isDefined","promise","$promise","isAuthenticated","isIdentityResolved","Password","PasswordResetInit","PasswordResetFinish","attrs","replace","setVisible","removeClass","setHidden","addClass","defineVisibility","reset","result","$watch","split","$rootScope","$state","AuthServerProvider","Activate","activateAccount","callback","cb","noop","err","bind","authorize","authThen","toState","name","go","redirected","previousStateName","previousStateNameParams","toStateParams","authReturn","changePassword","createAccount","logout","credentials","loginThen","sendActivity","reject","loginWithToken","jwt","rememberMe","keyAndPassword","mail","updateAccount","$http","$localStorage","$sessionStorage","getToken","authenticationToken","hasValidToken","token","expires","Date","getTime","authenticateSuccess","headers","bearerToken","slice","storeAuthenticationToken","username","post","params","interceptor","NavbarController","$location","ENV","navCollapsed","inProduction","activeMenu","$locale","tmhDynamicLocale","language","use","selectedLanguage","set","activeLink","clazz","path","href","substring","location","newPath","pageTitle","mainTranslatePartialLoader","entity","WorkListFollow","id","onEnter","$uibModal","backdrop","size","createtime","reload","DateUtils","resourceUrl","convertLocalDateFromServer","transformRequest","convertLocalDateToServer","toJson","WorkListFollowSearch","WorkListFollowController","$scope","workListFollows","loadAll","search","searchQuery","WorkListFollowDialogController","$uibModalInstance","WorkList","workListFollow","worklists","users","load","onSaveSuccess","$emit","close","isSaving","onSaveError","clear","dismiss","datePickerOpenStatus","openCalendar","date","WorkListFollowDetailController","unsubscribe","$on","event","WorkListFollowDeleteController","confirmDelete","page","value","squash","sort","pagingParams","PaginationUtil","parsePage","predicate","parsePredicate","ascending","parseAscending","content","userId","WorkListSearch","WorkListController","DataUtils","ParseLinks","AlertService","paginationConstants","reverse","push","onSuccess","links","parse","totalItems","queryCount","workLists","onError","message","itemsPerPage","loadPage","transition","transitionTo","$current","currentSearch","openFile","byteSize","WorkListDialogController","workList","workMap","WorkListDetailController","WorkListDeleteController","StagesFollow","musixiserUid","audienceUid","stagesId","timestamp","updatetime","convertDateTimeFromServer","StagesFollowSearch","StagesFollowController","stagesFollows","StagesFollowDialogController","stagesFollow","StagesFollowDetailController","StagesFollowDeleteController","Stages","audienceNum","StagesSearch","StagesController","stages","StagesDialogController","StagesDetailController","StagesDeleteController","MusixiserFollow","followUid","MusixiserFollowSearch","MusixiserFollowController","musixiserFollows","MusixiserFollowDialogController","musixiserFollow","MusixiserFollowDetailController","MusixiserFollowDeleteController","Musixiser","realname","tel","birth","gender","smallAvatar","largeAvatar","nation","isMaster","MusixiserSearch","MusixiserController","musixisers","MusixiserDialogController","musixiser","MusixiserDetailController","MusixiserDeleteController","ckey","cval","Config","ConfigController","ConfigDialogController","ConfigDeleteController","Audience","nickname","AudienceSearch","AudienceController","audiences","AudienceDialogController","audience","AudienceDetailController","AudienceDeleteController","words","wordsFilter","input","isNaN","inputWords","join","filter","characters","charactersFilter","chars","breakOnWord","charAt","substr","lastspace","lastIndexOf","jhSort","SortController","bindToController","$element","applyClass","thisIcon","find","sortIcon","sortAsc","sortDesc","remove","add","resetClasses","allThIcons","field","$apply","triggerApply","values","$watchGroup","jhSortBy","parentCtrl","require","header","Error","parts","forEach","p","section","trim","queryString","RegExp","$0","$1","$2","$3","isString","parseInt","sortArray","pop","jhiItemCount","template","bindings","component","dateString","dateformat","$window","abbreviate","text","base64String","endsWith","suffix","str","paddingSize","formatAsBytes","toString","type","toBase64","file","fileReader","FileReader","readAsDataURL","onload","e","base64Data","target","capitalize","capitalizeFilter","toLowerCase","toUpperCase","Base64","encode","chr1","chr2","enc1","enc2","enc3","output","chr3","enc4","charCodeAt","keyStr","decode","String","fromCharCode","modalInstance","animation","resetModal","LoginController","cancel","authenticationError","preventDefault","previousStateParams","$broadcast","register","requestResetPassword","JhiLanguageService","LANGUAGES","getAll","getCurrent","storage","findLanguageFromKey","findLanguageFromKeyFilter","lang","ca","da","de","el","en","es","fr","gl","hu","hi","it","ja","ko","mr","nl","pl","pt-br","pt-pt","ro","ru","sv","ta","tr","zh-cn","zh-tw","JhiLanguageController","changeLanguage","languageKey","languages","constant","paginationConfig","uibPaginationConfig","maxSize","boundaryLinks","firstText","previousText","nextText","lastText","pagerConfig","uibPagerConfig","showValidation","each","$formGroup","$inputs","$input","hasClass","isInvalid","toggleClass","minbytes","ngModel","$validators","modelValue","$isEmpty","numberOfBytes","maxbytes","getService","$sce","isToast","toast","alerts","msg","position","timeout","warning","info","alertOptions","alert","trustAsHtml","alertId","scoped","closeAlert","addAlert","extAlerts","instant","that","thisAlerts","closeAlertByIndex","map","index","splice","$get","showAsToast","jhiAlertController","jhiAlert","jhiAlertErrorController","addErrorAlert","cleanHttpErrorListener","httpResponse","stopPropagation","errorHeader","entityKey","entityName","fieldErrors","fieldError","convertedField","fieldName","objectName","jhiAlertError","notificationInterceptor","alertKey","param","errorHandlerInterceptor","responseError","authInterceptor","request","Authorization","authExpiredInterceptor","$injector","translateChangeSuccess","updateTitle","titleKey","title","document","VERSION","back","stateChangeStart","stateChangeSuccess","toParams","fromState","fromParams","translationConfig","$translateProvider","tmhDynamicLocaleProvider","useLoader","urlTemplate","preferredLanguage","useStorage","useSanitizeValueStrategy","addInterpolation","localeLocationPattern","useCookieStorage","storageKey","translationStorageProvider","$cookies","$log","getObject","putObject","put","localStorageConfig","$localStorageProvider","setKeyPrefix","httpConfig","$urlRouterProvider","$httpProvider","httpRequestInterceptorCacheBusterProvider","$urlMatcherFactoryProvider","setMatchlist","otherwise","interceptors","val","equals","a","b","is","pattern","compileServiceConfig","$compileProvider","debugInfoEnabled","alertServiceConfig","AlertServiceProvider","firstName","lastName","activated","langKey","createdBy","createdDate","lastModifiedBy","lastModifiedDate","resetDate","resetKey","UserManagementController","setActive","user","isActivated","editForm","$setPristine","$setUntouched","currentAccount","UserManagementDialogController","UserManagementDetailController","UserManagementDeleteController","subscribe","onExit","loc","host","pathname","authToken","socket","SockJS","stompClient","Stomp","over","connected","alreadyConnectedOnce","disconnect","receive","listener","send","subscriber","notify","body","JhiTrackerController","showActivity","activity","existingActivity","activities","sessionId","JhiMetricsService","getMetrics","threadDump","JhiMetricsMonitoringModalController","getLabelClass","threadState","threadDumpAll","threadDumpBlocked","threadDumpRunnable","threadDumpTimedWaiting","threadDumpWaiting","JhiMetricsMonitoringController","updatingMetrics","metrics","refreshThreadDumpData","cachesStats","servicesStats","newValue","timers","newKey","LogsService","findAll","changeLevel","LogsController","level","loggers","JhiHealthService","checkHealth","HealthModalController","currentHealth","baseName","subSystemName","JhiHealthCheckController","addHealthObject","isLeaf","healthObject","healthData","details","hasDetails","isHealthObject","extend","flattenHealthData","hasSubSystem","getModuleName","statusState","separator","updatingHealth","transformHealthData","showHealth","health","remainder","JhiConfigurationService","getConfigPropsComplete","properties","orderBy","getEnv","getEnvComplete","vals","v","k","JhiConfigurationController","allConfiguration","configuration","AuditsService","fromDate","toDate","AuditsController","onChangeDate","dateFormat","audits","today","getFullYear","getMonth","getDate","previousMonth","cookie","c","socialService","SocialRegisterController","providerLabel","SocialAuthController","SettingsController","settingsAccount","copyAccount","current","RegisterController","registerAccount","errorUserExists","errorEmailExists","PasswordController","passwordStrengthBar","iElement","strength","colors","mesureStrength","_force","_regex","_lowerLetters","test","_upperLetters","_numbers","_symbols","_flags","_passedMatches","$","grep","Math","min","getColor","s","idx","col","children","css","background-color","passwordToCheck","ActivationController","HomeController","getAccount","abstract","navbar@","$templateCache"],"mappings":"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","file":"app/app-e706e9fdfa.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp', [\n            'ngStorage', \n            'tmh.dynamicLocale',\n            'pascalprecht.translate', \n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler', 'translationHandler'];\n\n    function run(stateHandler, translationHandler) {\n        stateHandler.initialize();\n        translationHandler.initialize();\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('jhSocial', jhSocial);\n\n    jhSocial.$inject = ['$translatePartialLoader', '$translate', '$filter', 'SocialService'];\n\n    function jhSocial($translatePartialLoader, $translate, $filter, SocialService) {\n        var directive = {\n            restrict: 'E',\n            scope: {\n                provider: '@ngProvider'\n            },\n            templateUrl: 'app/account/social/directive/social.html',\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods */\n\n        function linkFunc(scope) {\n            \n            $translatePartialLoader.addPart('social');\n            $translate.refresh();\n            \n            scope.label = $filter('capitalize')(scope.provider);\n            scope.providerSetting = SocialService.getProviderSetting(scope.provider);\n            scope.providerURL = SocialService.getProviderURL(scope.provider);\n            scope.csrf = SocialService.getCSRF();\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('[ng-model=\"resetAccount.email\"]').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('[ng-model=\"vm.resetAccount.password\"]').focus();});\n\n        function finishReset() {\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account', 'JhiTrackerService'];\n\n    function Principal ($q, Account, JhiTrackerService) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n                JhiTrackerService.connect();\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('hasAuthority', hasAuthority);\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp', [\n            'ngStorage', \n            'tmh.dynamicLocale',\n            'pascalprecht.translate', \n            'ngResource',\n            'ngCookies',\n            'ngAria',\n            'ngCacheBuster',\n            'ngFileUpload',\n            'ui.bootstrap',\n            'ui.bootstrap.datetimepicker',\n            'ui.router',\n            'infinite-scroll',\n            // jhipster-needle-angularjs-add-module JHipster will add new module here\n            'angular-loading-bar'\n        ])\n        .run(run);\n\n    run.$inject = ['stateHandler', 'translationHandler'];\n\n    function run(stateHandler, translationHandler) {\n        stateHandler.initialize();\n        translationHandler.initialize();\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('jhSocial', jhSocial);\n\n    jhSocial.$inject = ['$translatePartialLoader', '$translate', '$filter', 'SocialService'];\n\n    function jhSocial($translatePartialLoader, $translate, $filter, SocialService) {\n        var directive = {\n            restrict: 'E',\n            scope: {\n                provider: '@ngProvider'\n            },\n            templateUrl: 'app/account/social/directive/social.html',\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods */\n\n        function linkFunc(scope) {\n            \n            $translatePartialLoader.addPart('social');\n            $translate.refresh();\n            \n            scope.label = $filter('capitalize')(scope.provider);\n            scope.providerSetting = SocialService.getProviderSetting(scope.provider);\n            scope.providerURL = SocialService.getProviderURL(scope.provider);\n            scope.csrf = SocialService.getCSRF();\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('requestReset', {\n            parent: 'account',\n            url: '/reset/request',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/request/reset.request.html',\n                    controller: 'RequestResetController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('RequestResetController', RequestResetController);\n\n    RequestResetController.$inject = ['$timeout', 'Auth'];\n\n    function RequestResetController ($timeout, Auth) {\n        var vm = this;\n\n        vm.error = null;\n        vm.errorEmailNotExists = null;\n        vm.requestReset = requestReset;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('[ng-model=\"resetAccount.email\"]').focus();});\n\n        function requestReset () {\n\n            vm.error = null;\n            vm.errorEmailNotExists = null;\n\n            Auth.resetPasswordInit(vm.resetAccount.email).then(function () {\n                vm.success = 'OK';\n            }).catch(function (response) {\n                vm.success = null;\n                if (response.status === 400 && response.data === 'e-mail address not registered') {\n                    vm.errorEmailNotExists = 'ERROR';\n                } else {\n                    vm.error = 'ERROR';\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('finishReset', {\n            parent: 'account',\n            url: '/reset/finish?key',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/reset/finish/reset.finish.html',\n                    controller: 'ResetFinishController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('reset');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ResetFinishController', ResetFinishController);\n\n    ResetFinishController.$inject = ['$stateParams', '$timeout', 'Auth', 'LoginService'];\n\n    function ResetFinishController ($stateParams, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.keyMissing = angular.isUndefined($stateParams.key);\n        vm.confirmPassword = null;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.finishReset = finishReset;\n        vm.login = LoginService.open;\n        vm.resetAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('[ng-model=\"vm.resetAccount.password\"]').focus();});\n\n        function finishReset() {\n            if (vm.resetAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                Auth.resetPasswordFinish({key: $stateParams.key, newPassword: vm.resetAccount.password}).then(function () {\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('User', User);\n\n    User.$inject = ['$resource'];\n\n    function User ($resource) {\n        var service = $resource('api/users/:login', {}, {\n            'query': {method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'save': { method:'POST' },\n            'update': { method:'PUT' },\n            'delete':{ method:'DELETE'}\n        });\n\n        return service;\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Register', Register);\n\n    Register.$inject = ['$resource'];\n\n    function Register ($resource) {\n        return $resource('api/register', {}, {});\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Principal', Principal);\n\n    Principal.$inject = ['$q', 'Account', 'JhiTrackerService'];\n\n    function Principal ($q, Account, JhiTrackerService) {\n        var _identity,\n            _authenticated = false;\n\n        var service = {\n            authenticate: authenticate,\n            hasAnyAuthority: hasAnyAuthority,\n            hasAuthority: hasAuthority,\n            identity: identity,\n            isAuthenticated: isAuthenticated,\n            isIdentityResolved: isIdentityResolved\n        };\n\n        return service;\n\n        function authenticate (identity) {\n            _identity = identity;\n            _authenticated = identity !== null;\n        }\n\n        function hasAnyAuthority (authorities) {\n            if (!_authenticated || !_identity || !_identity.authorities) {\n                return false;\n            }\n\n            for (var i = 0; i < authorities.length; i++) {\n                if (_identity.authorities.indexOf(authorities[i]) !== -1) {\n                    return true;\n                }\n            }\n\n            return false;\n        }\n\n        function hasAuthority (authority) {\n            if (!_authenticated) {\n                return $q.when(false);\n            }\n\n            return this.identity().then(function(_id) {\n                return _id.authorities && _id.authorities.indexOf(authority) !== -1;\n            }, function(){\n                return false;\n            });\n        }\n\n        function identity (force) {\n            var deferred = $q.defer();\n\n            if (force === true) {\n                _identity = undefined;\n            }\n\n            // check and see if we have retrieved the identity data from the server.\n            // if we have, reuse it by immediately resolving\n            if (angular.isDefined(_identity)) {\n                deferred.resolve(_identity);\n\n                return deferred.promise;\n            }\n\n            // retrieve the identity data from the server, update the identity object, and then resolve.\n            Account.get().$promise\n                .then(getAccountThen)\n                .catch(getAccountCatch);\n\n            return deferred.promise;\n\n            function getAccountThen (account) {\n                _identity = account.data;\n                _authenticated = true;\n                deferred.resolve(_identity);\n                JhiTrackerService.connect();\n            }\n\n            function getAccountCatch () {\n                _identity = null;\n                _authenticated = false;\n                deferred.resolve(_identity);\n            }\n        }\n\n        function isAuthenticated () {\n            return _authenticated;\n        }\n\n        function isIdentityResolved () {\n            return angular.isDefined(_identity);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Password', Password);\n\n    Password.$inject = ['$resource'];\n\n    function Password($resource) {\n        var service = $resource('api/account/change_password', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('PasswordResetInit', PasswordResetInit);\n\n    PasswordResetInit.$inject = ['$resource'];\n\n    function PasswordResetInit($resource) {\n        var service = $resource('api/account/reset_password/init', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('PasswordResetFinish', PasswordResetFinish);\n\n    PasswordResetFinish.$inject = ['$resource'];\n\n    function PasswordResetFinish($resource) {\n        var service = $resource('api/account/reset_password/finish', {}, {});\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('hasAuthority', hasAuthority);\n\n    function hasAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authority = attrs.hasAuthority.replace(/\\s+/g, '');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    Principal.hasAuthority(authority)\n                        .then(function (result) {\n                            if (result) {\n                                setVisible();\n                            } else {\n                                setHidden();\n                            }\n                        });\n                };\n\n            if (authority.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish', 'JhiTrackerService'];\n\n    function Auth ($rootScope, $state, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish, JhiTrackerService) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            login: login,\n            logout: logout,\n            loginWithToken: loginWithToken,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {\n                    $state.go('home');\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        $rootScope.redirected = true;\n                        $rootScope.previousStateName = $rootScope.toState;\n                        $rootScope.previousStateNameParams = $rootScope.toStateParams;\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied');\n                        LoginService.open();\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account!== null) {\n                        // $translate.use(account.langKey).then(function () {\n                        //     $translate.refresh();\n                        // });\n                    }\n                    JhiTrackerService.sendActivity();\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\n        }\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n\n            // Reset state memory if not redirected\n            if(!$rootScope.redirected) {\n                $rootScope.previousStateName = undefined;\n                $rootScope.previousStateNameParams = undefined;\n            }\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\n\n    function AuthServerProvider ($http, $localStorage, $sessionStorage, $q) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            loginWithToken: loginWithToken,\n            storeAuthenticationToken: storeAuthenticationToken,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return token && token.expires && token.expires > new Date().getTime();\n        }\n\n        function login (credentials) {\n            var data = {\n                username: credentials.username,\n                password: credentials.password,\n                rememberMe: credentials.rememberMe\n            };\n            return $http.post('api/authenticate', data).success(authenticateSuccess);\n\n            function authenticateSuccess (data, status, headers) {\n                var bearerToken = headers('Authorization');\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\n                    var jwt = bearerToken.slice(7, bearerToken.length);\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\n                    return jwt;\n                }\n            }\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            var deferred = $q.defer();\n\n            if (jwt !== undefined) {\n                this.storeAuthenticationToken(jwt, rememberMe);\n                deferred.resolve(jwt);\n            }\n            else {\n                deferred.reject();\n            }\n\n            return deferred.promise;\n        }\n\n        function storeAuthenticationToken(jwt, rememberMe) {\n            if(rememberMe){\n                $localStorage.authenticationToken = jwt;\n            } else {\n                $sessionStorage.authenticationToken = jwt;\n            }\n        }\n\n        function logout () {\n            delete $localStorage.authenticationToken;\n            delete $sessionStorage.authenticationToken;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$location', '$state', 'Auth', 'Principal', 'ENV', 'LoginService'];\n\n    function NavbarController ($location, $state, Auth, Principal, ENV, LoginService) {\n        var vm = this;\n\n        vm.navCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n        vm.inProduction = ENV === 'prod';\n        vm.login = login;\n        vm.logout = logout;\n        vm.$state = $state;\n\n        function login () {\n            LoginService.open();\n        }\n\n        function logout () {\n            Auth.logout();\n            $state.go('home');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('activeMenu', activeMenu);\n\n    function activeMenu($translate, $locale, tmhDynamicLocale) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var language = attrs.activeMenu;\n\n            scope.$watch(function() {\n                return $translate.use();\n            }, function(selectedLanguage) {\n                if (language === selectedLanguage) {\n                    tmhDynamicLocale.set(language);\n                    element.addClass('active');\n                } else {\n                    element.removeClass('active');\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('activeLink', activeLink);\n\n    function activeLink() {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var clazz = attrs.activeLink;\n            var path = attrs.href;\n            path = path.substring(1); //hack because path does bot return including hashbang\n            scope.location = location;\n            scope.$watch('location.path()', function(newPath) {\n                if (path === newPath) {\n                    element.addClass(clazz);\n                } else {\n                    element.removeClass(clazz);\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'error.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('work-list-follow', {\n            parent: 'entity',\n            url: '/work-list-follow',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.workListFollow.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/work-list-follow/work-list-follows.html',\n                    controller: 'WorkListFollowController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('workListFollow');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('work-list-follow-detail', {\n            parent: 'entity',\n            url: '/work-list-follow/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.workListFollow.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/work-list-follow/work-list-follow-detail.html',\n                    controller: 'WorkListFollowDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('workListFollow');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'WorkListFollow', function($stateParams, WorkListFollow) {\n                    return WorkListFollow.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('work-list-follow.new', {\n            parent: 'work-list-follow',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list-follow/work-list-follow-dialog.html',\n                    controller: 'WorkListFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                createtime: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('work-list-follow', null, { reload: true });\n                }, function() {\n                    $state.go('work-list-follow');\n                });\n            }]\n        })\n        .state('work-list-follow.edit', {\n            parent: 'work-list-follow',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list-follow/work-list-follow-dialog.html',\n                    controller: 'WorkListFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['WorkListFollow', function(WorkListFollow) {\n                            return WorkListFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('work-list-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('work-list-follow.delete', {\n            parent: 'work-list-follow',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list-follow/work-list-follow-delete-dialog.html',\n                    controller: 'WorkListFollowDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['WorkListFollow', function(WorkListFollow) {\n                            return WorkListFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('work-list-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('WorkListFollow', WorkListFollow);\n\n    WorkListFollow.$inject = ['$resource', 'DateUtils'];\n\n    function WorkListFollow ($resource, DateUtils) {\n        var resourceUrl =  'api/work-list-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.createtime = DateUtils.convertLocalDateFromServer(data.createtime);\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('WorkListFollowSearch', WorkListFollowSearch);\n\n    WorkListFollowSearch.$inject = ['$resource'];\n\n    function WorkListFollowSearch($resource) {\n        var resourceUrl =  'api/_search/work-list-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListFollowController', WorkListFollowController);\n\n    WorkListFollowController.$inject = ['$scope', '$state', 'WorkListFollow', 'WorkListFollowSearch'];\n\n    function WorkListFollowController ($scope, $state, WorkListFollow, WorkListFollowSearch) {\n        var vm = this;\n        vm.workListFollows = [];\n        vm.loadAll = function() {\n            WorkListFollow.query(function(result) {\n                vm.workListFollows = result;\n            });\n        };\n\n        vm.search = function () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            WorkListFollowSearch.query({query: vm.searchQuery}, function(result) {\n                vm.workListFollows = result;\n            });\n        };\n        vm.loadAll();\n        \n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListFollowDialogController', WorkListFollowDialogController);\n\n    WorkListFollowDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'WorkListFollow', 'WorkList', 'User'];\n\n    function WorkListFollowDialogController ($scope, $stateParams, $uibModalInstance, $q, entity, WorkListFollow, WorkList, User) {\n        var vm = this;\n        vm.workListFollow = entity;\n        vm.worklists = WorkList.query();\n        vm.users = User.query();\n        vm.load = function(id) {\n            WorkListFollow.get({id : id}, function(result) {\n                vm.workListFollow = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:workListFollowUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.workListFollow.id !== null) {\n                WorkListFollow.update(vm.workListFollow, onSaveSuccess, onSaveError);\n            } else {\n                WorkListFollow.save(vm.workListFollow, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.createtime = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListFollowDetailController', WorkListFollowDetailController);\n\n    WorkListFollowDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'WorkListFollow', 'WorkList', 'User'];\n\n    function WorkListFollowDetailController($scope, $rootScope, $stateParams, entity, WorkListFollow, WorkList, User) {\n        var vm = this;\n        vm.workListFollow = entity;\n        vm.load = function (id) {\n            WorkListFollow.get({id: id}, function(result) {\n                vm.workListFollow = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:workListFollowUpdate', function(event, result) {\n            vm.workListFollow = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListFollowDeleteController',WorkListFollowDeleteController);\n\n    WorkListFollowDeleteController.$inject = ['$uibModalInstance', 'entity', 'WorkListFollow'];\n\n    function WorkListFollowDeleteController($uibModalInstance, entity, WorkListFollow) {\n        var vm = this;\n        vm.workListFollow = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            WorkListFollow.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('work-list', {\n            parent: 'entity',\n            url: '/work-list?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.workList.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/work-list/work-lists.html',\n                    controller: 'WorkListController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('workList');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('work-list-detail', {\n            parent: 'entity',\n            url: '/work-list/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.workList.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/work-list/work-list-detail.html',\n                    controller: 'WorkListDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('workList');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'WorkList', function($stateParams, WorkList) {\n                    return WorkList.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('work-list.new', {\n            parent: 'work-list',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list/work-list-dialog.html',\n                    controller: 'WorkListDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                content: null,\n                                url: null,\n                                createtime: null,\n                                userId: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('work-list', null, { reload: true });\n                }, function() {\n                    $state.go('work-list');\n                });\n            }]\n        })\n        .state('work-list.edit', {\n            parent: 'work-list',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list/work-list-dialog.html',\n                    controller: 'WorkListDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['WorkList', function(WorkList) {\n                            return WorkList.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('work-list', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('work-list.delete', {\n            parent: 'work-list',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list/work-list-delete-dialog.html',\n                    controller: 'WorkListDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['WorkList', function(WorkList) {\n                            return WorkList.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('work-list', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('WorkList', WorkList);\n\n    WorkList.$inject = ['$resource', 'DateUtils'];\n\n    function WorkList ($resource, DateUtils) {\n        var resourceUrl =  'api/work-lists/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.createtime = DateUtils.convertLocalDateFromServer(data.createtime);\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('WorkListSearch', WorkListSearch);\n\n    WorkListSearch.$inject = ['$resource'];\n\n    function WorkListSearch($resource) {\n        var resourceUrl =  'api/_search/work-lists/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListController', WorkListController);\n\n    WorkListController.$inject = ['$scope', '$state', 'DataUtils', 'WorkList', 'WorkListSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function WorkListController ($scope, $state, DataUtils, WorkList, WorkListSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.openFile = DataUtils.openFile;\n        vm.byteSize = DataUtils.byteSize;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                WorkListSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                WorkList.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.workLists = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListDialogController', WorkListDialogController);\n\n    WorkListDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'WorkList'];\n\n    function WorkListDialogController ($scope, $stateParams, $uibModalInstance, DataUtils, entity, WorkList) {\n        var vm = this;\n        vm.workList = entity;\n        vm.load = function(id) {\n            WorkList.get({id : id}, function(result) {\n                vm.workList = result;\n            });\n        };\n\n        vm.workMap = {\n            status : [\n                {id: 0, name: '正常'},\n                {id: 1, name: '私有'},\n                {id: 2, name: '删除'}\n            ]\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:workListUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.workList.id !== null) {\n                WorkList.update(vm.workList, onSaveSuccess, onSaveError);\n            } else {\n                WorkList.save(vm.workList, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.createtime = false;\n\n        vm.openFile = DataUtils.openFile;\n        vm.byteSize = DataUtils.byteSize;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListDetailController', WorkListDetailController);\n\n    WorkListDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'DataUtils', 'entity', 'WorkList'];\n\n    function WorkListDetailController($scope, $rootScope, $stateParams, DataUtils, entity, WorkList) {\n        var vm = this;\n        vm.workList = entity;\n        vm.load = function (id) {\n            WorkList.get({id: id}, function(result) {\n                vm.workList = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:workListUpdate', function(event, result) {\n            vm.workList = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n        vm.byteSize = DataUtils.byteSize;\n        vm.openFile = DataUtils.openFile;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListDeleteController',WorkListDeleteController);\n\n    WorkListDeleteController.$inject = ['$uibModalInstance', 'entity', 'WorkList'];\n\n    function WorkListDeleteController($uibModalInstance, entity, WorkList) {\n        var vm = this;\n        vm.workList = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            WorkList.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('stages-follow', {\n            parent: 'entity',\n            url: '/stages-follow?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.stagesFollow.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/stages-follow/stages-follows.html',\n                    controller: 'StagesFollowController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('stagesFollow');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('stages-follow-detail', {\n            parent: 'entity',\n            url: '/stages-follow/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.stagesFollow.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/stages-follow/stages-follow-detail.html',\n                    controller: 'StagesFollowDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('stagesFollow');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'StagesFollow', function($stateParams, StagesFollow) {\n                    return StagesFollow.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('stages-follow.new', {\n            parent: 'stages-follow',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages-follow/stages-follow-dialog.html',\n                    controller: 'StagesFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                musixiserUid: null,\n                                audienceUid: null,\n                                stagesId: null,\n                                timestamp: null,\n                                updatetime: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('stages-follow', null, { reload: true });\n                }, function() {\n                    $state.go('stages-follow');\n                });\n            }]\n        })\n        .state('stages-follow.edit', {\n            parent: 'stages-follow',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages-follow/stages-follow-dialog.html',\n                    controller: 'StagesFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['StagesFollow', function(StagesFollow) {\n                            return StagesFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('stages-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('stages-follow.delete', {\n            parent: 'stages-follow',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages-follow/stages-follow-delete-dialog.html',\n                    controller: 'StagesFollowDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['StagesFollow', function(StagesFollow) {\n                            return StagesFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('stages-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('StagesFollow', StagesFollow);\n\n    StagesFollow.$inject = ['$resource', 'DateUtils'];\n\n    function StagesFollow ($resource, DateUtils) {\n        var resourceUrl =  'api/stages-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.timestamp = DateUtils.convertDateTimeFromServer(data.timestamp);\n                    data.updatetime = DateUtils.convertDateTimeFromServer(data.updatetime);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('StagesFollowSearch', StagesFollowSearch);\n\n    StagesFollowSearch.$inject = ['$resource'];\n\n    function StagesFollowSearch($resource) {\n        var resourceUrl =  'api/_search/stages-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesFollowController', StagesFollowController);\n\n    StagesFollowController.$inject = ['$scope', '$state', 'StagesFollow', 'StagesFollowSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function StagesFollowController ($scope, $state, StagesFollow, StagesFollowSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                StagesFollowSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                StagesFollow.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.stagesFollows = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesFollowDialogController', StagesFollowDialogController);\n\n    StagesFollowDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'StagesFollow'];\n\n    function StagesFollowDialogController ($scope, $stateParams, $uibModalInstance, entity, StagesFollow) {\n        var vm = this;\n        vm.stagesFollow = entity;\n        vm.load = function(id) {\n            StagesFollow.get({id : id}, function(result) {\n                vm.stagesFollow = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:stagesFollowUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.stagesFollow.id !== null) {\n                StagesFollow.update(vm.stagesFollow, onSaveSuccess, onSaveError);\n            } else {\n                StagesFollow.save(vm.stagesFollow, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.timestamp = false;\n        vm.datePickerOpenStatus.updatetime = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesFollowDetailController', StagesFollowDetailController);\n\n    StagesFollowDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'StagesFollow'];\n\n    function StagesFollowDetailController($scope, $rootScope, $stateParams, entity, StagesFollow) {\n        var vm = this;\n        vm.stagesFollow = entity;\n        vm.load = function (id) {\n            StagesFollow.get({id: id}, function(result) {\n                vm.stagesFollow = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:stagesFollowUpdate', function(event, result) {\n            vm.stagesFollow = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesFollowDeleteController',StagesFollowDeleteController);\n\n    StagesFollowDeleteController.$inject = ['$uibModalInstance', 'entity', 'StagesFollow'];\n\n    function StagesFollowDeleteController($uibModalInstance, entity, StagesFollow) {\n        var vm = this;\n        vm.stagesFollow = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            StagesFollow.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('stages', {\n            parent: 'entity',\n            url: '/stages?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.stages.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/stages/stages.html',\n                    controller: 'StagesController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('stages');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('stages-detail', {\n            parent: 'entity',\n            url: '/stages/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.stages.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/stages/stages-detail.html',\n                    controller: 'StagesDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('stages');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Stages', function($stateParams, Stages) {\n                    return Stages.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('stages.new', {\n            parent: 'stages',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages/stages-dialog.html',\n                    controller: 'StagesDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                status: null,\n                                createtime: null,\n                                userId: null,\n                                audienceNum: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('stages', null, { reload: true });\n                }, function() {\n                    $state.go('stages');\n                });\n            }]\n        })\n        .state('stages.edit', {\n            parent: 'stages',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages/stages-dialog.html',\n                    controller: 'StagesDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Stages', function(Stages) {\n                            return Stages.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('stages', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('stages.delete', {\n            parent: 'stages',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages/stages-delete-dialog.html',\n                    controller: 'StagesDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Stages', function(Stages) {\n                            return Stages.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('stages', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('Stages', Stages);\n\n    Stages.$inject = ['$resource', 'DateUtils'];\n\n    function Stages ($resource, DateUtils) {\n        var resourceUrl =  'api/stages/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.createtime = DateUtils.convertLocalDateFromServer(data.createtime);\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('StagesSearch', StagesSearch);\n\n    StagesSearch.$inject = ['$resource'];\n\n    function StagesSearch($resource) {\n        var resourceUrl =  'api/_search/stages/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesController', StagesController);\n\n    StagesController.$inject = ['$scope', '$state', 'Stages', 'StagesSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function StagesController ($scope, $state, Stages, StagesSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                StagesSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Stages.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.stages = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesDialogController', StagesDialogController);\n\n    StagesDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'Stages'];\n\n    function StagesDialogController ($scope, $stateParams, $uibModalInstance, entity, Stages) {\n        var vm = this;\n        vm.stages = entity;\n        vm.load = function(id) {\n            Stages.get({id : id}, function(result) {\n                vm.stages = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:stagesUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.stages.id !== null) {\n                Stages.update(vm.stages, onSaveSuccess, onSaveError);\n            } else {\n                Stages.save(vm.stages, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.createtime = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesDetailController', StagesDetailController);\n\n    StagesDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Stages'];\n\n    function StagesDetailController($scope, $rootScope, $stateParams, entity, Stages) {\n        var vm = this;\n        vm.stages = entity;\n        vm.load = function (id) {\n            Stages.get({id: id}, function(result) {\n                vm.stages = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:stagesUpdate', function(event, result) {\n            vm.stages = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesDeleteController',StagesDeleteController);\n\n    StagesDeleteController.$inject = ['$uibModalInstance', 'entity', 'Stages'];\n\n    function StagesDeleteController($uibModalInstance, entity, Stages) {\n        var vm = this;\n        vm.stages = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Stages.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('musixiser-follow', {\n            parent: 'entity',\n            url: '/musixiser-follow?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.musixiserFollow.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follows.html',\n                    controller: 'MusixiserFollowController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('musixiserFollow');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('musixiser-follow-detail', {\n            parent: 'entity',\n            url: '/musixiser-follow/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.musixiserFollow.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follow-detail.html',\n                    controller: 'MusixiserFollowDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('musixiserFollow');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'MusixiserFollow', function($stateParams, MusixiserFollow) {\n                    return MusixiserFollow.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('musixiser-follow.new', {\n            parent: 'musixiser-follow',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follow-dialog.html',\n                    controller: 'MusixiserFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                userId: null,\n                                followUid: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser-follow', null, { reload: true });\n                }, function() {\n                    $state.go('musixiser-follow');\n                });\n            }]\n        })\n        .state('musixiser-follow.edit', {\n            parent: 'musixiser-follow',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follow-dialog.html',\n                    controller: 'MusixiserFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['MusixiserFollow', function(MusixiserFollow) {\n                            return MusixiserFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('musixiser-follow.delete', {\n            parent: 'musixiser-follow',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follow-delete-dialog.html',\n                    controller: 'MusixiserFollowDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['MusixiserFollow', function(MusixiserFollow) {\n                            return MusixiserFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('MusixiserFollow', MusixiserFollow);\n\n    MusixiserFollow.$inject = ['$resource'];\n\n    function MusixiserFollow ($resource) {\n        var resourceUrl =  'api/musixiser-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('MusixiserFollowSearch', MusixiserFollowSearch);\n\n    MusixiserFollowSearch.$inject = ['$resource'];\n\n    function MusixiserFollowSearch($resource) {\n        var resourceUrl =  'api/_search/musixiser-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserFollowController', MusixiserFollowController);\n\n    MusixiserFollowController.$inject = ['$scope', '$state', 'MusixiserFollow', 'MusixiserFollowSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function MusixiserFollowController ($scope, $state, MusixiserFollow, MusixiserFollowSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                MusixiserFollowSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                MusixiserFollow.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.musixiserFollows = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserFollowDialogController', MusixiserFollowDialogController);\n\n    MusixiserFollowDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'MusixiserFollow'];\n\n    function MusixiserFollowDialogController ($scope, $stateParams, $uibModalInstance, entity, MusixiserFollow) {\n        var vm = this;\n        vm.musixiserFollow = entity;\n        vm.load = function(id) {\n            MusixiserFollow.get({id : id}, function(result) {\n                vm.musixiserFollow = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:musixiserFollowUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.musixiserFollow.id !== null) {\n                MusixiserFollow.update(vm.musixiserFollow, onSaveSuccess, onSaveError);\n            } else {\n                MusixiserFollow.save(vm.musixiserFollow, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserFollowDetailController', MusixiserFollowDetailController);\n\n    MusixiserFollowDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'MusixiserFollow'];\n\n    function MusixiserFollowDetailController($scope, $rootScope, $stateParams, entity, MusixiserFollow) {\n        var vm = this;\n        vm.musixiserFollow = entity;\n        vm.load = function (id) {\n            MusixiserFollow.get({id: id}, function(result) {\n                vm.musixiserFollow = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:musixiserFollowUpdate', function(event, result) {\n            vm.musixiserFollow = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserFollowDeleteController',MusixiserFollowDeleteController);\n\n    MusixiserFollowDeleteController.$inject = ['$uibModalInstance', 'entity', 'MusixiserFollow'];\n\n    function MusixiserFollowDeleteController($uibModalInstance, entity, MusixiserFollow) {\n        var vm = this;\n        vm.musixiserFollow = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            MusixiserFollow.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('musixiser', {\n            parent: 'entity',\n            url: '/musixiser?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.musixiser.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/musixiser/musixisers.html',\n                    controller: 'MusixiserController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('musixiser');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('musixiser-detail', {\n            parent: 'entity',\n            url: '/musixiser/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.musixiser.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/musixiser/musixiser-detail.html',\n                    controller: 'MusixiserDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('musixiser');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Musixiser', function($stateParams, Musixiser) {\n                    return Musixiser.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('musixiser.new', {\n            parent: 'musixiser',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser/musixiser-dialog.html',\n                    controller: 'MusixiserDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                realname: null,\n                                tel: null,\n                                email: null,\n                                birth: null,\n                                gender: null,\n                                smallAvatar: null,\n                                largeAvatar: null,\n                                nation: null,\n                                isMaster: null,\n                                userId: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser', null, { reload: true });\n                }, function() {\n                    $state.go('musixiser');\n                });\n            }]\n        })\n        .state('musixiser.edit', {\n            parent: 'musixiser',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser/musixiser-dialog.html',\n                    controller: 'MusixiserDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Musixiser', function(Musixiser) {\n                            return Musixiser.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('musixiser.delete', {\n            parent: 'musixiser',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser/musixiser-delete-dialog.html',\n                    controller: 'MusixiserDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Musixiser', function(Musixiser) {\n                            return Musixiser.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('Musixiser', Musixiser);\n\n    Musixiser.$inject = ['$resource'];\n\n    function Musixiser ($resource) {\n        var resourceUrl =  'api/musixisers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('MusixiserSearch', MusixiserSearch);\n\n    MusixiserSearch.$inject = ['$resource'];\n\n    function MusixiserSearch($resource) {\n        var resourceUrl =  'api/_search/musixisers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserController', MusixiserController);\n\n    MusixiserController.$inject = ['$scope', '$state', 'Musixiser', 'MusixiserSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function MusixiserController ($scope, $state, Musixiser, MusixiserSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                MusixiserSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Musixiser.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.musixisers = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserDialogController', MusixiserDialogController);\n\n    MusixiserDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'Musixiser'];\n\n    function MusixiserDialogController ($scope, $stateParams, $uibModalInstance, entity, Musixiser) {\n        var vm = this;\n        vm.musixiser = entity;\n        vm.load = function(id) {\n            Musixiser.get({id : id}, function(result) {\n                vm.musixiser = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:musixiserUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.musixiser.id !== null) {\n                Musixiser.update(vm.musixiser, onSaveSuccess, onSaveError);\n            } else {\n                Musixiser.save(vm.musixiser, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserDetailController', MusixiserDetailController);\n\n    MusixiserDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Musixiser'];\n\n    function MusixiserDetailController($scope, $rootScope, $stateParams, entity, Musixiser) {\n        var vm = this;\n        vm.musixiser = entity;\n        vm.load = function (id) {\n            Musixiser.get({id: id}, function(result) {\n                vm.musixiser = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:musixiserUpdate', function(event, result) {\n            vm.musixiser = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserDeleteController',MusixiserDeleteController);\n\n    MusixiserDeleteController.$inject = ['$uibModalInstance', 'entity', 'Musixiser'];\n\n    function MusixiserDeleteController($uibModalInstance, entity, Musixiser) {\n        var vm = this;\n        vm.musixiser = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Musixiser.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('config', {\n                parent: 'entity',\n                url: '/config?page&sort&search',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: '配置管理'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/config/configs.html',\n                        controller: 'ConfigController',\n                        controllerAs: 'vm'\n                    }\n                },\n                params: {\n                    page: {\n                        value: '1',\n                        squash: true\n                    },\n                    sort: {\n                        value: 'id,asc',\n                        squash: true\n                    },\n                    search: null\n                },\n                resolve: {\n                    pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                        return {\n                            page: PaginationUtil.parsePage($stateParams.page),\n                            sort: $stateParams.sort,\n                            predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                            ascending: PaginationUtil.parseAscending($stateParams.sort),\n                            search: $stateParams.search\n                        };\n                    }],\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        //$translatePartialLoader.addPart('config');\n                        $translatePartialLoader.addPart('global');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('config-detail', {\n                parent: 'entity',\n                url: '/musixiser/{id}',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'musixiseApp.musixiser.detail.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/musixiser/musixiser-detail.html',\n                        controller: 'MusixiserDetailController',\n                        controllerAs: 'vm'\n                    }\n                },\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('musixiser');\n                        return $translate.refresh();\n                    }],\n                    entity: ['$stateParams', 'Musixiser', function($stateParams, Musixiser) {\n                        return Musixiser.get({id : $stateParams.id});\n                    }]\n                }\n            })\n            .state('config.new', {\n                parent: 'config',\n                url: '/new',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/config/config-dialog.html',\n                        controller: 'ConfigDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: function () {\n                                return {\n                                    ckey: null,\n                                    cval: null,\n                                    id: null\n                                };\n                            }\n                        }\n                    }).result.then(function() {\n                        $state.go('config', null, { reload: true });\n                    }, function() {\n                        $state.go('config');\n                    });\n                }]\n            })\n            .state('config.edit', {\n                parent: 'config',\n                url: '/{id}/edit',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/config/config-dialog.html',\n                        controller: 'ConfigDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: ['Config', function(Config) {\n                                return Config.get({id : $stateParams.id});\n                            }]\n                        }\n                    }).result.then(function() {\n                        $state.go('config', null, { reload: true });\n                    }, function() {\n                        $state.go('^');\n                    });\n                }]\n            })\n            .state('config.delete', {\n                parent: 'config',\n                url: '/{id}/delete',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/config/config-delete-dialog.html',\n                        controller: 'ConfigDeleteController',\n                        controllerAs: 'vm',\n                        size: 'md',\n                        resolve: {\n                            entity: ['Config', function(Config) {\n                                return Config.get({id : $stateParams.id});\n                            }]\n                        }\n                    }).result.then(function() {\n                        $state.go('config', null, { reload: true });\n                    }, function() {\n                        $state.go('^');\n                    });\n                }]\n            });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('Config', Config);\n\n    Config.$inject = ['$resource'];\n\n    function Config ($resource) {\n        var resourceUrl =  'api/config-lists/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ConfigController', ConfigController);\n\n    ConfigController.$inject = ['$scope', '$state', 'Config', 'MusixiserSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function ConfigController ($scope, $state, Config, MusixiserSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                MusixiserSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Config.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.config = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ConfigDialogController', ConfigDialogController);\n\n    ConfigDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'Config'];\n\n    function ConfigDialogController ($scope, $stateParams, $uibModalInstance, entity, Config) {\n        var vm = this;\n        vm.config = entity;\n        vm.load = function(id) {\n            Config.get({id : id}, function(result) {\n                vm.config = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:musixiserUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.config.id !== null) {\n                Config.update(vm.config, onSaveSuccess, onSaveError);\n            } else {\n                Config.save(vm.config, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ConfigDeleteController',ConfigDeleteController);\n\n    ConfigDeleteController.$inject = ['$uibModalInstance', 'entity', 'Config'];\n\n    function ConfigDeleteController($uibModalInstance, entity, Config) {\n        var vm = this;\n        vm.config = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Config.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('audience', {\n            parent: 'entity',\n            url: '/audience?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.audience.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/audience/audiences.html',\n                    controller: 'AudienceController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audience');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('audience-detail', {\n            parent: 'entity',\n            url: '/audience/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.audience.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/audience/audience-detail.html',\n                    controller: 'AudienceDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audience');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Audience', function($stateParams, Audience) {\n                    return Audience.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('audience.new', {\n            parent: 'audience',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/audience/audience-dialog.html',\n                    controller: 'AudienceDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                nickname: null,\n                                realname: null,\n                                email: null,\n                                tel: null,\n                                userId: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('audience', null, { reload: true });\n                }, function() {\n                    $state.go('audience');\n                });\n            }]\n        })\n        .state('audience.edit', {\n            parent: 'audience',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/audience/audience-dialog.html',\n                    controller: 'AudienceDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Audience', function(Audience) {\n                            return Audience.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('audience', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('audience.delete', {\n            parent: 'audience',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/audience/audience-delete-dialog.html',\n                    controller: 'AudienceDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Audience', function(Audience) {\n                            return Audience.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('audience', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n;\n(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('Audience', Audience);\n\n    Audience.$inject = ['$resource'];\n\n    function Audience ($resource) {\n        var resourceUrl =  'api/audiences/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('AudienceSearch', AudienceSearch);\n\n    AudienceSearch.$inject = ['$resource'];\n\n    function AudienceSearch($resource) {\n        var resourceUrl =  'api/_search/audiences/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AudienceController', AudienceController);\n\n    AudienceController.$inject = ['$scope', '$state', 'Audience', 'AudienceSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function AudienceController ($scope, $state, Audience, AudienceSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                AudienceSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Audience.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.audiences = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AudienceDialogController', AudienceDialogController);\n\n    AudienceDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'Audience'];\n\n    function AudienceDialogController ($scope, $stateParams, $uibModalInstance, entity, Audience) {\n        var vm = this;\n        vm.audience = entity;\n        vm.load = function(id) {\n            Audience.get({id : id}, function(result) {\n                vm.audience = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:audienceUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.audience.id !== null) {\n                Audience.update(vm.audience, onSaveSuccess, onSaveError);\n            } else {\n                Audience.save(vm.audience, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AudienceDetailController', AudienceDetailController);\n\n    AudienceDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Audience'];\n\n    function AudienceDetailController($scope, $rootScope, $stateParams, entity, Audience) {\n        var vm = this;\n        vm.audience = entity;\n        vm.load = function (id) {\n            Audience.get({id: id}, function(result) {\n                vm.audience = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:audienceUpdate', function(event, result) {\n            vm.audience = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AudienceDeleteController',AudienceDeleteController);\n\n    AudienceDeleteController.$inject = ['$uibModalInstance', 'entity', 'Audience'];\n\n    function AudienceDeleteController($uibModalInstance, entity, Audience) {\n        var vm = this;\n        vm.audience = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Audience.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            \n            return input;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .filter('characters', characters);\n        \n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n;\n(function(){\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse (header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function (p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if( angular.isString(page) ) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n\n            return links;\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page-1) * 20)==0 ? 1:(($ctrl.page-1) * 20)}} - ' +\n                    '{{($ctrl.page * 20) < $ctrl.queryCount ? ($ctrl.page * 20) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total'\n        }\n    };\n\n    angular\n        .module('musixiseApp')\n        .component('jhiItemCount', jhiItemCount);\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n            }\n            return input.substring(0, 1).toUpperCase() + input.substring(1);\n        }\n    }\n})();\n;\n(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm',\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('login');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope,$state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('[ng-model=\"vm.username\"]').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                // If we're redirected to login, our\n                // previousState is already set in the authExpiredInterceptor. When login succesful go to stored state\n                if ($rootScope.redirected && $rootScope.previousStateName) {\n                    $state.go($rootScope.previousStateName, $rootScope.previousStateParams);\n                    $rootScope.redirected = false;\n                } else {\n                    $rootScope.$broadcast('authenticationSuccess');\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiLanguageService', JhiLanguageService);\n\n    JhiLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];\n\n    function JhiLanguageService ($q, $http, $translate, LANGUAGES) {\n        var service = {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        return service;\n\n        function getAll () {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent () {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiLanguageController', JhiLanguageController);\n\n    JhiLanguageController.$inject = ['$translate', 'JhiLanguageService', 'tmhDynamicLocale'];\n\n    function JhiLanguageController ($translate, JhiLanguageService, tmhDynamicLocale) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function changeLanguage (languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', [\n            'zh-cn',\n            'en'\n            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n        ]\n    );\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(paginationConfig);\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(pagerConfig);\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        scope.$watch(function() {\n                            return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce', '$translate'];\n\n        function getService ($timeout, $sce,$translate) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('musixiseApp')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n    \n    angular\n        .module('musixiseApp')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope, $translate) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            key = key && key !== null ? key : message;\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: key,\n                        params: data,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('musixiseApp.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var errorHeader = httpResponse.headers('X-musixiseApp-error');\n                var entityKey = httpResponse.headers('X-musixiseApp-params');\n                if (errorHeader) {\n                    var entityName = $translate.instant('global.menu.entities.' + entityKey);\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = $translate.instant('musixiseApp.' + fieldError.objectName + '.' + convertedField);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var alertKey = response.headers('X-musixiseApp-alert');\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers('X-musixiseApp-params')});\n            }\n            return response;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || response.data.path.indexOf('/api/account') === 0 ))) {\n                $rootScope.$emit('musixiseApp.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('authInterceptor', authInterceptor);\n\n    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];\n\n    function authInterceptor ($rootScope, $q, $location, $localStorage, $sessionStorage) {\n        var service = {\n            request: request\n        };\n\n        return service;\n\n        function request (config) {\n            /*jshint camelcase: false */\n            config.headers = config.headers || {};\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n            \n            if (token) {\n                config.headers.Authorization = 'Bearer ' + token;\n            }\n            \n            return config;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    \n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            if (response.status === 401) {\n                delete $localStorage.authenticationToken;\n                delete $sessionStorage.authenticationToken;\n                var Principal = $injector.get('Principal');\n                if (Principal.isAuthenticated()) {\n                    var Auth = $injector.get('Auth');\n                    Auth.authorize(true);\n                }\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('translationHandler', translationHandler);\n\n    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];\n\n    function translationHandler($rootScope, $window, $state, $translate) {\n        return {\n            initialize: initialize,\n            updateTitle: updateTitle\n        };\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {\n                updateTitle();\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null){\n                    translateChangeSuccess();\n                }\n            });\n        }\n\n        // update the window title using params in the following\n        // precendence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(function (title) {\n                $window.document.title = title;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$translate', 'JhiLanguageService', 'translationHandler',\n        'Auth', 'Principal', 'ENV', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $translate, JhiLanguageService, translationHandler,\n        Auth, Principal, ENV, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.ENV = ENV;\n            $rootScope.VERSION = VERSION;\n            $rootScope.back = back;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                \n                // Update the language\n                JhiLanguageService.getCurrent().then(function (language) {\n                    $translate.use(language);\n                });\n                \n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title' ;\n\n                // Remember previous state unless we've been redirected to login or we've just\n                // reset the state memory after logout. If we're redirected to login, our\n                // previousState is already set in the authExpiredInterceptor. If we're going\n                // to login directly, we don't want to be sent to some previous state anyway\n                if (!$rootScope.redirected && $rootScope.previousStateName) {\n                    $rootScope.previousStateName = fromState.name;\n                    $rootScope.previousStateParams = fromParams;\n                }\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                translationHandler.updateTitle(titleKey);\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n\n            function back() {\n                // If previous state is 'activate' or do not exist go to 'home'\n                if ($rootScope.previousStateName === 'activate' || $state.get($rootScope.previousStateName) === null) {\n                    $state.go('home');\n                } else {\n                    $state.go($rootScope.previousStateName, $rootScope.previousStateParams);\n                }\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(translationConfig);\n\n    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n    function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{lang}/{part}.json'\n        });\n\n        $translateProvider.preferredLanguage('en');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('translationStorageProvider', translationStorageProvider);\n\n    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n    function translationStorageProvider($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to prefered language \"en\"');\n                $cookies.putObject(name, 'en');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider'];\n\n    function localStorageConfig($localStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        \n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('authInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider', 'ENV'];\n\n    function compileServiceConfig($compileProvider, ENV) {\n        // disable debug data on prod profile to improve performance\n        if(ENV === 'prod'){\n            $compileProvider.debugInfoEnabled(false);\n        }\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'paginationConstants', 'JhiLanguageService'];\n\n    function UserManagementController(Principal, User, ParseLinks, paginationConstants, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.links = null;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.page = 1;\n        vm.setActive = setActive;\n        vm.totalItems = null;\n        vm.users = [];\n\n\n        vm.loadAll();\n\n        \n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n\n        function loadAll () {\n            User.query({page: vm.page - 1, size: paginationConstants.itemsPerPage}, function (result, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.users = result;\n            });\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.loadAll();\n        }\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n            vm.editForm.$setPristine();\n            vm.editForm.$setUntouched();\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'JhiLanguageService'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-tracker', {\n            parent: 'admin',\n            url: '/tracker',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'tracker.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/tracker/tracker.html',\n                    controller: 'JhiTrackerController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('tracker');\n                    return $translate.refresh();\n                }]\n            },\n            onEnter: function(JhiTrackerService) {\n                JhiTrackerService.subscribe();\n            },\n            onExit: function(JhiTrackerService) {\n                JhiTrackerService.unsubscribe();\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n    /* globals SockJS, Stomp */\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiTrackerService', JhiTrackerService);\n\n    JhiTrackerService.$inject = ['$rootScope', '$window', '$cookies', '$http', '$q', 'AuthServerProvider'];\n\n    function JhiTrackerService ($rootScope, $window, $cookies, $http, $q, AuthServerProvider) {\n        var stompClient = null;\n        var subscriber = null;\n        var listener = $q.defer();\n        var connected = $q.defer();\n        var alreadyConnectedOnce = false;\n\n        var service = {\n            connect: connect,\n            disconnect: disconnect,\n            receive: receive,\n            sendActivity: sendActivity,\n            subscribe: subscribe,\n            unsubscribe: unsubscribe\n        };\n\n        return service;\n\n        function connect () {\n            //building absolute path so that websocket doesnt fail when deploying with a context path\n            var loc = $window.location;\n            var url = '//' + loc.host + loc.pathname + 'websocket/tracker';\n            var authToken = AuthServerProvider.getToken();\n            if(authToken){\n                url += '?access_token=' + authToken;\n            }\n            var socket = new SockJS(url);\n            stompClient = Stomp.over(socket);\n            var stateChangeStart;\n            var headers = {};\n            stompClient.connect(headers, function() {\n                connected.resolve('success');\n                sendActivity();\n                if (!alreadyConnectedOnce) {\n                    stateChangeStart = $rootScope.$on('$stateChangeStart', function () {\n                        sendActivity();\n                    });\n                    alreadyConnectedOnce = true;\n                }\n            });\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n            });\n        }\n\n        function disconnect () {\n            if (stompClient !== null) {\n                stompClient.disconnect();\n                stompClient = null;\n            }\n        }\n\n        function receive () {\n            return listener.promise;\n        }\n\n        function sendActivity() {\n            if (stompClient !== null && stompClient.connected) {\n                stompClient\n                    .send('/topic/activity',\n                    {},\n                    angular.toJson({'page': $rootScope.toState.name}));\n            }\n        }\n\n        function subscribe () {\n            connected.promise.then(function() {\n                subscriber = stompClient.subscribe('/topic/tracker', function(data) {\n                    listener.notify(angular.fromJson(data.body));\n                });\n            }, null, null);\n        }\n\n        function unsubscribe () {\n            if (subscriber !== null) {\n                subscriber.unsubscribe();\n            }\n            listener = $q.defer();\n        }\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiTrackerController', JhiTrackerController);\n\n    JhiTrackerController.$inject = ['$cookies', '$http', 'JhiTrackerService'];\n\n    function JhiTrackerController ($cookies, $http, JhiTrackerService) {\n        // This controller uses a Websocket connection to receive user activities in real-time.\n        var vm = this;\n\n        vm.activities = [];\n\n        JhiTrackerService.receive().then(null, null, function(activity) {\n            showActivity(activity);\n        });\n\n        function showActivity(activity) {\n            var existingActivity = false;\n            for (var index = 0; index < vm.activities.length; index++) {\n                if(vm.activities[index].sessionId === activity.sessionId) {\n                    existingActivity = true;\n                    if (activity.page === 'logout') {\n                        vm.activities.splice(index, 1);\n                    } else {\n                        vm.activities[index] = activity;\n                    }\n                }\n            }\n            if (!existingActivity && (activity.page !== 'logout')) {\n                vm.activities.push(activity);\n            }\n        }\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'metrics.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('metrics');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('metrics/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            vm.cachesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    index = newKey.lastIndexOf('.');\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(index + 1),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'logs.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('logs');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('api/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'health.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('health');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var service = {\n            checkHealth: checkHealth\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('health').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular.module('musixiseApp')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.addHealthObject = addHealthObject;\n        vm.baseName = baseName;\n        vm.flattenHealthData = flattenHealthData;\n        vm.getLabelClass = getLabelClass;\n        vm.getModuleName = getModuleName;\n        vm.hasSubSystem = hasSubSystem;\n        vm.isHealthObject = isHealthObject;\n        vm.refresh = refresh;\n        vm.updatingHealth = true;\n        vm.separator = '.';\n        vm.showHealth = showHealth;\n        vm.subSystemName = subSystemName;\n        vm.transformHealthData = transformHealthData;\n\n        vm.refresh();\n\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!vm.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function baseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (vm.isHealthObject(value)) {\n                    if (vm.hasSubSystem(value)) {\n                        vm.addHealthObject(result, false, value, vm.getModuleName(path, key));\n                        vm.flattenHealthData(result, vm.getModuleName(path, key), value);\n                    } else {\n                        vm.addHealthObject(result, true, value, vm.getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + vm.separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = vm.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  vm.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n        function subSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            vm.flattenHealthData(response, null, data);\n            return response;\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'global.menu.admin.apidocs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', function ($translate) {\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'configuration.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('configuration');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'audits.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audits');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('api/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('social-register', {\n            parent: 'account',\n            url: '/social-register/:provider?{success:boolean}',\n            data: {\n                authorities: [],\n                pageTitle: 'social.register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/social/social-register.html',\n                    controller: 'SocialRegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('social');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('social-auth', {\n            parent: 'account',\n            url: '/social-auth',\n            data: {\n                authorities: [],\n            },\n            views: {\n                'content@': {\n                    controller: 'SocialAuthController'\n                }\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('SocialService', SocialService);\n\n    function SocialService () {\n        var socialService = {\n            getProviderSetting: getProviderSetting,\n            getProviderURL: getProviderURL,\n            getCSRF: getCSRF\n        };\n\n        return socialService;\n\n        function getProviderSetting (provider) {\n            switch(provider) {\n            case 'google': return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';\n            case 'facebook': return 'public_profile,email';\n            case 'twitter': return '';\n                // jhipster-needle-add-social-button\n            default: return 'Provider setting not defined';\n            }\n        }\n\n        function getProviderURL (provider) {\n            return 'signin/' + provider;\n        }\n\n        function getCSRF () {\n            /* globals document */\n            var name = 'CSRF-TOKEN=';\n            var ca = document.cookie.split(';');\n            for (var i = 0; i < ca.length; i++) {\n                var c = ca[i];\n                while (c.charAt(0) === ' ') {\n                    c = c.substring(1);\n                }\n                if (c.indexOf(name) !== -1) {\n                    return c.substring(name.length, c.length);\n                }\n            }\n            return '';\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('SocialRegisterController', SocialRegisterController);\n\n    SocialRegisterController.$inject = ['$filter', '$stateParams'];\n\n    function SocialRegisterController ($filter, $stateParams) {\n        var vm = this;\n\n        vm.success = $stateParams.success;\n        vm.error = !vm.success;\n        vm.provider = $stateParams.provider;\n        vm.providerLabel = $filter('capitalize')(vm.provider);\n        vm.success = $stateParams.success;\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('SocialAuthController', SocialAuthController);\n\n    SocialAuthController.$inject = ['$state', '$cookies', 'Auth'];\n\n    function SocialAuthController($state, $cookies, Auth) {\n        var token = $cookies.get('social-authentication');\n\n        Auth.loginWithToken(token, false).then(function () {\n            $cookies.remove('social-authentication');\n            Auth.authorize(true);\n        }, function () {\n            $state.go('social-register', {'success': 'false'});\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('settings');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth', 'JhiLanguageService', '$translate'];\n\n    function SettingsController (Principal, Auth, JhiLanguageService, $translate) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n                JhiLanguageService.getCurrent().then(function(current) {\n                    if (vm.settingsAccount.langKey !== current) {\n                        $translate.use(vm.settingsAccount.langKey);\n                    }\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('register');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = ['$translate', '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($translate, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('[ng-model=\"vm.registerAccount.login\"]').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey = $translate.use();\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('password');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n;\n/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small translate=\"global.messages.validate.newpassword.strength\">Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penality (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penality (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx = 0;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'activate.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('activate');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                    $translatePartialLoader.addPart('home');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService'];\n\n    function HomeController ($scope, Principal, LoginService) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;\n(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n;\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('global');\n                }]\n            }\n        });\n    }\n})();\n;\n(function () {\n    \"use strict\";\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular.module(\"musixiseApp\")\n\n.constant(\"ENV\", \"prod\")\n\n.constant(\"VERSION\", \"0.0.1-SNAPSHOT\")\n\n;\n})();\n;(function(){angular.module(\"musixiseApp\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"app/home/home.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><span class=\\\"hipster img-responsive img-rounded\\\"></span></div><div class=\\\"col-md-8\\\"><h1 translate=\\\"home.title\\\">Welcome, Java Hipster!</h1><p class=\\\"lead\\\" translate=\\\"home.subtitle\\\">This is your homepage</p><div ng-switch=\\\"vm.isAuthenticated()\\\"><div class=\\\"alert alert-success\\\" ng-switch-when=\\\"true\\\" translate=\\\"home.logged.message\\\" translate-values=\\\"{username: \\'{{vm.account.login}}\\'}\\\">You are logged in as user \\\"{{vm.account.login}}\\\".</div><div class=\\\"alert alert-warning\\\" ng-switch-when=\\\"false\\\" translate=\\\"global.messages.info.authenticated\\\" translate-compile>If you want to <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login()\\\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")<br>- User (login=\\\"user\\\" and password=\\\"user\\\").</div><div class=\\\"alert alert-warning\\\" ng-switch-when=\\\"false\\\" translate=\\\"global.messages.info.register\\\" translate-compile>You don\\'t have an account yet? <a class=\\\"alert-link\\\" ui-sref=\\\"register\\\">Register a new account</a></div></div><p translate=\\\"home.question\\\">If you have any question on JHipster:</p><ul><li><a href=\\\"http://jhipster.github.io/\\\" target=\\\"_blank\\\" translate=\\\"home.link.homepage\\\">JHipster homepage</a></li><li><a href=\\\"http://stackoverflow.com/tags/jhipster/info\\\" target=\\\"_blank\\\" translate=\\\"home.link.stackoverflow\\\">JHipster on Stack Overflow</a></li><li><a href=\\\"https://github.com/jhipster/generator-jhipster/issues?state=open\\\" target=\\\"_blank\\\" translate=\\\"home.link.bugtracker\\\">JHipster bug tracker</a></li><li><a href=\\\"https://gitter.im/jhipster/generator-jhipster\\\" target=\\\"_blank\\\" translate=\\\"home.link.chat\\\">JHipster public chat room</a></li><li><a href=\\\"https://twitter.com/java_hipster\\\" target=\\\"_blank\\\" translate=\\\"home.link.follow\\\">follow @java_hipster on Twitter</a></li></ul><p><span translate=\\\"home.like\\\">If you like JHipster, don\\'t forget to give us a star on </span>&nbsp;<a href=\\\"https://github.com/jhipster/generator-jhipster\\\" target=\\\"_blank\\\" translate=\\\"home.github\\\">Github</a>!</p></div></div></div>\");\n$templateCache.put(\"app/account/activate/activate.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1 translate=\\\"activate.title\\\">Activation</h1><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"activate.messages.success\\\" translate-compile><strong>Your user has been activated.</strong> Please <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.login\\\">sign in</a>.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"activate.messages.error\\\"><strong>Your user could not be activated.</strong> Please use the registration form to sign up.</div></div></div></div>\");\n$templateCache.put(\"app/account/password/password.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h2 translate=\\\"password.title\\\" translate-values=\\\"{username: \\'{{vm.account.login}}\\'}\\\">Password for [<b>{{vm.account.login}}</b>]</h2><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"password.messages.success\\\"><strong>Password changed!</strong></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"password.messages.error\\\"><strong>An error has occurred!</strong> The password could not be changed.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\" translate=\\\"global.messages.error.dontmatch\\\">The password and its confirmation do not match!</div><form name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.changePassword()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\" translate=\\\"global.form.newpassword\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"{{\\'global.form.newpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.password\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\" translate=\\\"global.messages.validate.newpassword.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\" translate=\\\"global.messages.validate.newpassword.minlength\\\">Your password is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\" translate=\\\"global.messages.validate.newpassword.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\" translate=\\\"global.form.confirmpassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\" translate=\\\"global.messages.validate.confirmpassword.required\\\">Your confirmation password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\" translate=\\\"global.messages.validate.confirmpassword.minlength\\\">Your confirmation password is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\" translate=\\\"global.messages.validate.confirmpassword.maxlength\\\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"password.form.button\\\">Save</button></form></div></div></div>\");\n$templateCache.put(\"app/account/register/register.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1 translate=\\\"register.title\\\">Registration</h1><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"register.messages.success\\\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"register.messages.error.fail\\\"><strong>Registration failed!</strong> Please try again later.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorUserExists\\\" translate=\\\"register.messages.error.userexists\\\"><strong>Login name already registered!</strong> Please choose another one.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorEmailExists\\\" translate=\\\"register.messages.error.emailexists\\\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\" translate=\\\"global.messages.error.dontmatch\\\">The password and its confirmation do not match!</div></div><div class=\\\"col-md-4 col-md-offset-2\\\"><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.register()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"login\\\" translate=\\\"global.form.username\\\">Username</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"login\\\" name=\\\"login\\\" placeholder=\\\"{{\\'global.form.username.placeholder\\' | translate}}\\\" ng-model=\\\"vm.registerAccount.login\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" ng-pattern=\\\"/^[a-z0-9]*$/\\\" required><div ng-show=\\\"form.login.$dirty && form.login.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.required\\\" translate=\\\"register.messages.validate.login.required\\\">Your username is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.minlength\\\" translate=\\\"register.messages.validate.login.minlength\\\">Your username is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.maxlength\\\" translate=\\\"register.messages.validate.login.maxlength\\\">Your username cannot be longer than 50 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.login.$error.pattern\\\" translate=\\\"register.messages.validate.login.pattern\\\">Your username can only contain lower-case letters and digits.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\" translate=\\\"global.form.email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"{{\\'global.form.email.placeholder\\' | translate}}\\\" ng-model=\\\"vm.registerAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\" translate=\\\"global.messages.validate.email.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\" translate=\\\"global.messages.validate.email.invalid\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\" translate=\\\"global.messages.validate.email.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\" translate=\\\"global.messages.validate.email.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\" translate=\\\"global.form.newpassword\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"{{\\'global.form.newpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.registerAccount.password\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\" translate=\\\"global.messages.validate.newpassword.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\" translate=\\\"global.messages.validate.newpassword.minlength\\\">Your password is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\" translate=\\\"global.messages.validate.newpassword.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.registerAccount.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\" translate=\\\"global.form.confirmpassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\" translate=\\\"global.messages.validate.confirmpassword.required\\\">Your confirmation password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\" translate=\\\"global.messages.validate.confirmpassword.minlength\\\">Your confirmation password is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\" translate=\\\"global.messages.validate.confirmpassword.maxlength\\\">Your confirmation password cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"register.form.button\\\">Register</button></form><p></p><div class=\\\"alert alert-warning\\\" translate=\\\"global.messages.info.authenticated\\\" translate-compile>If you want to <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"login()\\\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")<br>- User (login=\\\"user\\\" and password=\\\"user\\\").</div></div><div class=\\\"col-md-4\\\"><br><jh-social ng-provider=\\\"google\\\"></jh-social><jh-social ng-provider=\\\"facebook\\\"></jh-social><jh-social ng-provider=\\\"twitter\\\"></jh-social><jh-social ng-provider=\\\"weibo\\\"></jh-social><jh-social ng-provider=\\\"wechat\\\"></jh-social><jh-social ng-provider=\\\"qq\\\"></jh-social><!-- jhipster-needle-add-social-button --></div></div></div>\");\n$templateCache.put(\"app/account/settings/settings.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h2 translate=\\\"settings.title\\\" translate-values=\\\"{username: \\'{{vm.settingsAccount.login}}\\'}\\\">User settings for [<b>{{vm.settingsAccount.login}}</b>]</h2><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"settings.messages.success\\\"><strong>Settings saved!</strong></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.errorEmailExists\\\" translate=\\\"settings.messages.error.emailexists\\\"><strong>E-mail is already in use!</strong> Please choose another one.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"settings.messages.error.fail\\\"><strong>An error has occurred!</strong> Settings could not be saved.</div><form name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"firstName\\\" translate=\\\"settings.form.firstname\\\">First Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"firstName\\\" name=\\\"firstName\\\" placeholder=\\\"{{\\'settings.form.firstname.placeholder\\' | translate}}\\\" ng-model=\\\"vm.settingsAccount.firstName\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" required maxlength=\\\"50\\\"><div ng-show=\\\"form.firstName.$dirty && form.firstName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.required\\\" translate=\\\"settings.messages.validate.firstname.required\\\">Your first name is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.minlength\\\" translate=\\\"settings.messages.validate.firstname.minlength\\\">Your first name is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.firstName.$error.maxlength\\\" translate=\\\"settings.messages.validate.firstname.maxlength\\\">Your first name cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"lastName\\\" translate=\\\"settings.form.lastname\\\">Last Name</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"lastName\\\" name=\\\"lastName\\\" placeholder=\\\"{{\\'settings.form.lastname.placeholder\\' | translate}}\\\" ng-model=\\\"vm.settingsAccount.lastName\\\" ng-minlength=\\\"1\\\" ng-maxlength=\\\"50\\\" required maxlength=\\\"50\\\"><div ng-show=\\\"form.lastName.$dirty && form.lastName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.required\\\" translate=\\\"settings.messages.validate.lastname.required\\\">Your last name is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.minlength\\\" translate=\\\"settings.messages.validate.lastname.minlength\\\">Your last name is required to be at least 1 character.</p><p class=\\\"help-block\\\" ng-show=\\\"form.lastName.$error.maxlength\\\" translate=\\\"settings.messages.validate.lastname.maxlength\\\">Your last name cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\" translate=\\\"global.form.email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"{{\\'global.form.email.placeholder\\' | translate}}\\\" ng-model=\\\"vm.settingsAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required maxlength=\\\"100\\\"><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\" translate=\\\"global.messages.validate.email.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\" translate=\\\"global.messages.validate.email.invalid\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\" translate=\\\"global.messages.validate.email.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\" translate=\\\"global.messages.validate.email.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><div class=\\\"form-group\\\"><label for=\\\"langKey\\\" translate=\\\"settings.form.language\\\">Language</label><select id=\\\"langKey\\\" name=\\\"langKey\\\" class=\\\"form-control\\\" ng-model=\\\"vm.settingsAccount.langKey\\\" ng-controller=\\\"JhiLanguageController as languageVm\\\" ng-options=\\\"code as (code | findLanguageFromKey) for code in languageVm.languages\\\"></select></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"settings.form.button\\\">Save</button></form></div></div></div>\");\n$templateCache.put(\"app/account/social/social-register.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1 ng-show=\\\"success\\\" translate=\\\"social.register.title\\\" translate-values=\\\"{ label: vm.providerLabel }\\\">Registration with</h1><h1 ng-show=\\\"error\\\" translate=\\\"social.register.errorTitle\\\">Registration</h1><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\" translate=\\\"social.register.messages.success\\\"><strong>Registration saved!</strong> Please check your email for confirmation.</div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\" translate=\\\"social.register.messages.error.fail\\\"><strong>Registration failed!</strong> Please try again later.</div><jh-social ng-if=\\\"vm.success\\\" ng-provider=\\\"{{ vm.provider }}\\\"></jh-social><br><div class=\\\"alert alert-warning\\\" translate=\\\"global.messages.info.authenticated\\\">If you want to <a class=\\\"alert-link\\\" href=\\\"#/login\\\">sign in</a>, you can try the default accounts:<br>- Administrator (login=\\\"admin\\\" and password=\\\"admin\\\")<br>- User (login=\\\"user\\\" and password=\\\"user\\\").</div></div></div></div>\");\n$templateCache.put(\"app/admin/audits/audits.html\",\"<div><h2 translate=\\\"audits.title\\\">Audits</h2><div class=\\\"row\\\"><div class=\\\"col-md-5\\\"><h4 translate=\\\"audits.filter.title\\\">Filter by date</h4><p class=\\\"input-group\\\"><span class=\\\"input-group-addon\\\" translate=\\\"audits.filter.from\\\">from</span> <input type=\\\"date\\\" class=\\\"input-sm form-control\\\" name=\\\"start\\\" ng-model=\\\"vm.fromDate\\\" ng-change=\\\"vm.onChangeDate()\\\" required> <span class=\\\"input-group-addon\\\" translate=\\\"audits.filter.to\\\">to</span> <input type=\\\"date\\\" class=\\\"input-sm form-control\\\" name=\\\"end\\\" ng-model=\\\"vm.toDate\\\" ng-change=\\\"vm.onChangeDate()\\\" required></p></div></div><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\"><thead><tr><th ng-click=\\\"predicate = \\'timestamp\\'; reverse=!reverse\\\"><span translate=\\\"audits.table.header.date\\\">Date</span></th><th ng-click=\\\"predicate = \\'principal\\'; reverse=!reverse\\\"><span translate=\\\"audits.table.header.principal\\\">User</span></th><th ng-click=\\\"predicate = \\'type\\'; reverse=!reverse\\\"><span translate=\\\"audits.table.header.status\\\">State</span></th><th ng-click=\\\"predicate = \\'data.message\\'; reverse=!reverse\\\"><span translate=\\\"audits.table.header.data\\\">Extra data</span></th></tr></thead><tr ng-repeat=\\\"audit in vm.audits | filter:filter | orderBy:predicate:reverse\\\" ng-hide=\\\"audit.filtered\\\"><td><span>{{audit.timestamp| date:\\'medium\\'}}</span></td><td><small>{{audit.principal}}</small></td><td>{{audit.type}}</td><td><span ng-show=\\\"audit.data.message\\\">{{audit.data.message}}</span> <span ng-show=\\\"audit.data.remoteAddress\\\"><span translate=\\\"audits.table.data.remoteAddress\\\">Remote Address</span> {{audit.data.remoteAddress}}</span></td></tr></table><div class=\\\"text-center\\\"><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.loadPage(page)\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/admin/configuration/configuration.html\",\"<div><h2 translate=\\\"configuration.title\\\">Configuration</h2><span translate=\\\"configuration.filter\\\">Filter (by prefix)</span> <input type=\\\"text\\\" ng-model=\\\"filter\\\" class=\\\"form-control\\\"><label ng-hide=\\\"filteredConfig.length == 0\\\">Spring configuration</label><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\" style=\\\"table-layout:fixed\\\" ng-hide=\\\"filteredConfig.length == 0\\\"><thead><tr><th ng-click=\\\"predicate = \\'prefix\\'; reverse=!reverse\\\" class=\\\"col-sm-4\\\"><span translate=\\\"configuration.table.prefix\\\">Prefix</span></th><th translate=\\\"configuration.table.properties\\\" class=\\\"col-sm-8\\\">Properties</th></tr></thead><tr ng-repeat=\\\"entry in filtered = (vm.configuration | filter:filter | orderBy:predicate:reverse)\\\"><td><span>{{entry.prefix}}</span></td><td><div class=\\\"row\\\" ng-repeat=\\\"(key, value) in entry.properties\\\"><div class=\\\"col-md-4\\\">{{key}}</div><div class=\\\"col-md-8\\\"><span class=\\\"pull-right label label-default break\\\">{{value}}</span></div></div></td></tr></table><div ng-repeat=\\\"(key, value) in vm.allConfiguration\\\"><label ng-hide=\\\"filtered.length == 0\\\"><span>{{key}}</span></label><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\" style=\\\"table-layout:fixed\\\" ng-hide=\\\"filtered.length == 0\\\"><thead><tr><th class=\\\"col-sm-4\\\">Property</th><th class=\\\"col-sm-8\\\">Value</th></tr></thead><tbody><tr ng-repeat=\\\"item in filtered = (value | filter:filter)\\\"><td class=\\\"break\\\">{{item.key}}</td><td class=\\\"break\\\"><span class=\\\"pull-right label label-default break\\\">{{item.val}}</span></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/admin/docs/docs.html\",\"<iframe src=\\\"swagger-ui/index.html\\\" frameborder=\\\"0\\\" marginheight=\\\"0\\\" marginwidth=\\\"0\\\" width=\\\"100%\\\" height=\\\"900\\\" scrolling=\\\"auto\\\" target=\\\"_top\\\"></iframe>\");\n$templateCache.put(\"app/admin/health/health.html\",\"<div><h2 translate=\\\"health.title\\\">Health Checks</h2><p><button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.refresh()\\\"><span class=\\\"glyphicon glyphicon-refresh\\\"></span>&nbsp;<span translate=\\\"health.refresh.button\\\">Refresh</span></button></p><table id=\\\"healthCheck\\\" class=\\\"table table-striped\\\"><thead><tr><th class=\\\"col-md-7\\\" translate=\\\"health.table.service\\\">Service Name</th><th class=\\\"col-md-2 text-center\\\" translate=\\\"health.table.status\\\">Status</th><th class=\\\"col-md-2 text-center\\\" translate=\\\"health.details.details\\\">Details</th></tr></thead><tbody><tr ng-repeat=\\\"health in vm.healthData\\\"><td>{{\\'health.indicator.\\' + vm.baseName(health.name) | translate}} {{vm.subSystemName(health.name)}}</td><td class=\\\"text-center\\\"><span class=\\\"label\\\" ng-class=\\\"vm.getLabelClass(health.status)\\\">{{\\'health.status.\\' + health.status | translate}}</span></td><td class=\\\"text-center\\\"><a class=\\\"hand\\\" ng-click=\\\"vm.showHealth(health)\\\" ng-show=\\\"health.details || health.error\\\"><i class=\\\"glyphicon glyphicon-eye-open\\\"></i></a></td></tr></tbody></table></div>\");\n$templateCache.put(\"app/admin/health/health.modal.html\",\"<div class=\\\"modal-header\\\"><button aria-label=\\\"Close\\\" data-dismiss=\\\"modal\\\" class=\\\"close\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\"><span aria-hidden=\\\"true\\\">&times;</span></button><h4 class=\\\"modal-title\\\" id=\\\"showHealthLabel\\\">{{\\'health.indicator.\\' + vm.baseName(vm.currentHealth.name) | translate}} {{vm.subSystemName(vm.currentHealth.name)}}</h4></div><div class=\\\"modal-body pad\\\"><div ng-show=\\\"vm.currentHealth.details\\\"><h4 translate=\\\"health.details.properties\\\">Properties</h4><table class=\\\"table table-striped\\\"><thead><tr><th class=\\\"col-md-6 text-left\\\" translate=\\\"health.details.name\\\">Name</th><th class=\\\"col-md-6 text-left\\\" translate=\\\"health.details.value\\\">Value</th></tr></thead><tbody><tr ng-repeat=\\\"(k,v) in vm.currentHealth.details\\\"><td class=\\\"col-md-6 text-left\\\">{{k}}</td><td class=\\\"col-md-6 text-left\\\">{{v}}</td></tr></tbody></table></div><div ng-show=\\\"vm.currentHealth.error\\\"><h4 translate=\\\"health.details.error\\\">Error</h4><pre>{{vm.currentHealth.error}}</pre></div></div><div class=\\\"modal-footer\\\"><button data-dismiss=\\\"modal\\\" class=\\\"btn btn-default pull-left\\\" type=\\\"button\\\" ng-click=\\\"vm.cancel()\\\">Done</button></div>\");\n$templateCache.put(\"app/admin/logs/logs.html\",\"<div><h2 translate=\\\"logs.title\\\">Logs</h2><p translate=\\\"logs.nbloggers\\\" translate-values=\\\"{total: \\'{{ vm.loggers.length }}\\'}\\\">There are {{ vm.loggers.length }} loggers.</p><span translate=\\\"logs.filter\\\">Filter</span> <input type=\\\"text\\\" ng-model=\\\"filter\\\" class=\\\"form-control\\\"><table class=\\\"table table-condensed table-striped table-bordered table-responsive\\\"><thead><tr title=\\\"click to order\\\"><th ng-click=\\\"predicate = \\'name\\'; reverse=!reverse\\\"><span translate=\\\"logs.table.name\\\">Name</span></th><th ng-click=\\\"predicate = \\'level\\'; reverse=!reverse\\\"><span translate=\\\"logs.table.level\\\">Level</span></th></tr></thead><tr ng-repeat=\\\"logger in vm.loggers | filter:filter | orderBy:predicate:reverse\\\"><td><small>{{logger.name | characters:140}}</small></td><td><button ng-click=\\\"vm.changeLevel(logger.name, \\'TRACE\\')\\\" ng-class=\\\"(logger.level==\\'TRACE\\') ? \\'btn-danger\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">TRACE</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'DEBUG\\')\\\" ng-class=\\\"(logger.level==\\'DEBUG\\') ? \\'btn-warning\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">DEBUG</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'INFO\\')\\\" ng-class=\\\"(logger.level==\\'INFO\\') ? \\'btn-info\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">INFO</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'WARN\\')\\\" ng-class=\\\"(logger.level==\\'WARN\\') ? \\'btn-success\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">WARN</button> <button ng-click=\\\"vm.changeLevel(logger.name, \\'ERROR\\')\\\" ng-class=\\\"(logger.level==\\'ERROR\\') ? \\'btn-primary\\' : \\'btn-default\\'\\\" class=\\\"btn btn-default btn-xs\\\">ERROR</button></td></tr></table></div>\");\n$templateCache.put(\"app/admin/metrics/metrics.html\",\"<div><h2 translate=\\\"metrics.title\\\">Application Metrics</h2><p><button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ng-click=\\\"vm.refresh()\\\"><span class=\\\"glyphicon glyphicon-refresh\\\"></span>&nbsp;<span translate=\\\"metrics.refresh.button\\\">Refresh</span></button></p><h3 translate=\\\"metrics.jvm.title\\\">JVM Metrics</h3><div class=\\\"row\\\" ng-hide=\\\"vm.updatingMetrics\\\"><div class=\\\"col-md-4\\\"><b translate=\\\"metrics.jvm.memory.title\\\">Memory</b><p><span translate=\\\"metrics.jvm.memory.total\\\">Total Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.total.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.total.max\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.total.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.total.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.total.max\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.memory.heap\\\">Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.heap.max\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.memory.nonheap\\\">Non-Heap Memory</span> ({{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value / 1000000 | number:0}}M / {{vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value / 1000000 | number:0}}M)</p><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value\\\" value=\\\"vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.memory.non-heap.used\\'].value * 100 / vm.metrics.gauges[\\'jvm.memory.non-heap.committed\\'].value | number:0}}%</span></uib-progressbar></div><div class=\\\"col-md-4\\\"><b translate=\\\"metrics.jvm.threads.title\\\">Threads</b> (Total: {{vm.metrics.gauges[\\'jvm.threads.count\\'].value}}) <a class=\\\"hand\\\" ng-click=\\\"vm.refreshThreadDumpData()\\\" data-toggle=\\\"modal\\\" data-target=\\\"#threadDump\\\"><i class=\\\"glyphicon glyphicon-eye-open\\\"></i></a><p><span translate=\\\"metrics.jvm.threads.runnable\\\">Runnable</span> {{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value}}</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.runnable.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.threads.timedwaiting\\\">Timed Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"warning\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.timed_waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.threads.waiting\\\">Waiting</span> ({{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"warning\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.waiting.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar><p><span translate=\\\"metrics.jvm.threads.blocked\\\">Blocked</span> ({{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value}})</p><uib-progressbar min=\\\"0\\\" value=\\\"vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value\\\" max=\\\"vm.metrics.gauges[\\'jvm.threads.count\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'jvm.threads.blocked.count\\'].value * 100 / vm.metrics.gauges[\\'jvm.threads.count\\'].value | number:0}}%</span></uib-progressbar></div><div class=\\\"col-md-4\\\"><b translate=\\\"metrics.jvm.gc.title\\\">Garbage collections</b><div class=\\\"row\\\"><div class=\\\"col-md-9\\\" translate=\\\"metrics.jvm.gc.marksweepcount\\\">Mark Sweep count</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.count\\'].value}}</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\" translate=\\\"metrics.jvm.gc.marksweeptime\\\">Mark Sweep time</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-MarkSweep.time\\'].value}}ms</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\" translate=\\\"metrics.jvm.gc.scavengecount\\\">Scavenge count</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.count\\'].value}}</div></div><div class=\\\"row\\\"><div class=\\\"col-md-9\\\" translate=\\\"metrics.jvm.gc.scavengetime\\\">Scavenge time</div><div class=\\\"col-md-3 text-right\\\">{{vm.metrics.gauges[\\'jvm.garbage.PS-Scavenge.time\\'].value}}ms</div></div></div></div><div class=\\\"well well-lg\\\" ng-show=\\\"vm.updatingMetrics\\\" translate=\\\"metrics.updating\\\">Updating...</div><h3 translate=\\\"metrics.jvm.http.title\\\">HTTP requests (events per second)</h3><p><span translate=\\\"metrics.jvm.http.active\\\">Active requests</span> <b>{{vm.metrics.counters[\\'com.codahale.metrics.servlet.InstrumentedFilter.activeRequests\\'].count | number:0}}</b> - <span translate=\\\"metrics.jvm.http.total\\\">Total requests</span> <b>{{vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count | number:0}}</b></p><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"metrics.jvm.http.table.code\\\">Code</th><th translate=\\\"metrics.jvm.http.table.count\\\">Count</th><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.http.table.mean\\\">Mean</th><th class=\\\"text-right\\\"><span translate=\\\"metrics.jvm.http.table.average\\\">Average</span> (1 min)</th><th class=\\\"text-right\\\"><span translate=\\\"metrics.jvm.http.table.average\\\">Average</span> (5 min)</th><th class=\\\"text-right\\\"><span translate=\\\"metrics.jvm.http.table.average\\\">Average</span> (15 min)</th></tr></thead><tbody><tr><td translate=\\\"metrics.jvm.http.code.ok\\\">OK</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.ok\\'].m15_rate | number:2}}</td></tr><tr><td translate=\\\"metrics.jvm.http.code.notfound\\\">Not Found</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.notFound\\'].m15_rate | number:2}}</td></tr><tr><td translate=\\\"metrics.jvm.http.code.servererror\\\">Server error</td><td><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.timers[\\'com.codahale.metrics.servlet.InstrumentedFilter.requests\\'].count\\\" value=\\\"vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].count}}</span></uib-progressbar></td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].mean_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m1_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m5_rate | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.meters[\\'com.codahale.metrics.servlet.InstrumentedFilter.responseCodes.serverError\\'].m15_rate | number:2}}</td></tr></tbody></table></div><h3 translate=\\\"metrics.servicesstats.title\\\">Services statistics (time in millisecond)</h3><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"metrics.servicesstats.table.name\\\">Service name</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.count\\\">Count</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.mean\\\">Mean</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.min\\\">Min</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.p50\\\">p50</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.p75\\\">p75</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.p95\\\">p95</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.p99\\\">p99</th><th class=\\\"text-right\\\" translate=\\\"metrics.servicesstats.table.max\\\">Max</th></tr></thead><tbody><tr ng-repeat=\\\"(k, v) in vm.servicesStats\\\"><td>{{k}}</td><td class=\\\"text-right\\\">{{v.count}}</td><td class=\\\"text-right\\\">{{v.mean * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.min * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p50 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p75 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p95 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.p99 * 1000 | number:0}}</td><td class=\\\"text-right\\\">{{v.max * 1000 | number:0}}</td></tr></tbody></table></div><h3 translate=\\\"metrics.ehcache.title\\\">Ehcache statistics</h3><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"metrics.ehcache.cachename\\\">Cache name</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.objects\\\">Objects</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.hits\\\">Hits</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.misses\\\">Misses</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.evictioncount\\\">Eviction count</th><th class=\\\"text-right\\\" translate=\\\"metrics.ehcache.mean\\\">Mean get time (ms)</th></tr></thead><tbody><tr ng-repeat=\\\"(k, v) in vm.cachesStats\\\" ng-once><td>{{v.name}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.objects\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.hits\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.misses\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.eviction-count\\'].value}}</td><td class=\\\"text-right\\\">{{vm.metrics.gauges[k + \\'.mean-get-time\\'].value | number:2}}</td></tr></tbody></table></div><h3 translate=\\\"metrics.datasource.title\\\" ng-show=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value > 0\\\">DataSource statistics (time in millisecond)</h3><div class=\\\"table-responsive\\\" ng-show=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value > 0\\\"><table class=\\\"table table-striped\\\"><thead><tr><th><span translate=\\\"metrics.datasource.usage\\\">Usage</span> ({{vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value}} / {{vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value}})</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.count\\\">Count</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.mean\\\">Mean</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.min\\\">Min</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.p50\\\">p50</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.p75\\\">p75</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.p95\\\">p95</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.p99\\\">p99</th><th class=\\\"text-right\\\" translate=\\\"metrics.datasource.max\\\">Max</th></tr></thead><tbody><tr><td><div class=\\\"progress progress-striped\\\"><uib-progressbar min=\\\"0\\\" max=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value\\\" value=\\\"vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value\\\" class=\\\"progress-striped active\\\" type=\\\"success\\\"><span>{{vm.metrics.gauges[\\'HikariPool-0.pool.ActiveConnections\\'].value * 100 / vm.metrics.gauges[\\'HikariPool-0.pool.TotalConnections\\'].value | number:0}}%</span></uib-progressbar></div></td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].count}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].mean | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].min | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p50 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p75 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p95 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].p99 | number:2}}</td><td class=\\\"text-right\\\">{{vm.metrics.histograms[\\'HikariPool-0.pool.Usage\\'].max | number:2}}</td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/admin/metrics/metrics.modal.html\",\"<!-- Modal used to display the threads dump --><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" ng-click=\\\"vm.cancel()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"metrics.jvm.threads.dump.title\\\">Threads dump</h4></div><div class=\\\"modal-body pad\\\"><span class=\\\"label label-primary\\\" ng-click=\\\"threadDumpFilter = {}\\\">All&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpAll}}</span></span>&nbsp; <span class=\\\"label label-success\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'RUNNABLE\\'}\\\">Runnable&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpRunnable}}</span></span>&nbsp; <span class=\\\"label label-info\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'WAITING\\'}\\\">Waiting&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpWaiting}}</span></span>&nbsp; <span class=\\\"label label-warning\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'TIMED_WAITING\\'}\\\">Timed Waiting&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpTimedWaiting}}</span></span>&nbsp; <span class=\\\"label label-danger\\\" ng-click=\\\"threadDumpFilter = {threadState: \\'BLOCKED\\'}\\\">Blocked&nbsp;<span class=\\\"badge\\\">{{vm.threadDumpBlocked}}</span></span>&nbsp;<div class=\\\"voffset2\\\">&nbsp;</div>Filter <input type=\\\"text\\\" ng-model=\\\"threadDumpFilter\\\" class=\\\"form-control\\\"><div class=\\\"row pad\\\" ng-repeat=\\\"(k, v) in vm.threadDump | filter:threadDumpFilter\\\"><h5><span class=\\\"label\\\" ng-class=\\\"vm.getLabelClass(v.threadState)\\\">{{v.threadState}}</span>&nbsp;{{v.threadName}} (ID {{v.threadId}}) <a ng-click=\\\"show = !show\\\"><span ng-show=\\\"!show\\\" translate=\\\"metrics.jvm.threads.dump.show\\\">Show StackTrace</span> <span ng-show=\\\"show\\\" translate=\\\"metrics.jvm.threads.dump.hide\\\">Hide StackTrace</span></a></h5><div class=\\\"well\\\" ng-show=\\\"show\\\"><div ng-repeat=\\\"(stK, stV) in v.stackTrace\\\">{{stV.className}}.{{stV.methodName}}({{stV.fileName}}:{{stV.lineNumber}}) <span class=\\\"voffset1\\\"></span></div></div><table class=\\\"table table-condensed\\\"><thead><tr><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.threads.dump.blockedtime\\\">Blocked Time</th><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.threads.dump.blockedcount\\\">Blocked Count</th><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.threads.dump.waitedtime\\\">Waited Time</th><th class=\\\"text-right\\\" translate=\\\"metrics.jvm.threads.dump.waitedcount\\\">Waited Count</th><th translate=\\\"metrics.jvm.threads.dump.lockname\\\">Lock Name</th></tr></thead><tbody><tr><td>{{v.blockedTime}}</td><td>{{v.blockedCount}}</td><td>{{v.waitedTime}}</td><td>{{v.waitedCount}}</td><td>{{v.lockName}}</td></tr></tbody></table></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default pull-left\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.cancel()\\\">Done</button></div>\");\n$templateCache.put(\"app/admin/tracker/tracker.html\",\"<div><h2 translate=\\\"tracker.title\\\">Real-time user activities</h2><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"tracker.table.userlogin\\\">User</th><th translate=\\\"tracker.table.ipaddress\\\">IP Address</th><th translate=\\\"tracker.table.page\\\">Current page</th><th translate=\\\"tracker.table.time\\\">Time</th><th></th></tr></thead><tbody><tr ng-repeat=\\\"activity in vm.activities\\\"><td>{{activity.userLogin}}</td><td>{{activity.ipAddress}}</td><td>{{activity.page}}</td><td>{{activity.time}}</td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/admin/user-management/user-management-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.user.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"userManagement.delete.question\\\" translate-values=\\\"{login: \\'{{vm.user.login}}\\'}\\\">Are you sure you want to delete this User?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/admin/user-management/user-management-detail.html\",\"<div><h2><span translate=\\\"userManagement.detail.title\\\">User</span> \\\"{{vm.user.login}}\\\"</h2><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"entity.detail.field\\\">Field</th><th translate=\\\"entity.detail.value\\\">Value</th></tr></thead><tbody><tr><td><span translate=\\\"userManagement.login\\\">Login</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.login}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.firstName\\\">FirstName</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.firstName}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.lastName\\\">LastName</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.lastName}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.email\\\">Email</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.email}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.activated\\\">Activated</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.activated}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.langKey\\\">LangKey</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.langKey}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.createdBy\\\">CreatedBy</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.createdBy}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.createdDate\\\">CreatedDate</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.createdDate | date:\\'dd/MM/yy HH:mm\\' }}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.lastModifiedBy\\\">LastModifiedBy</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.lastModifiedBy}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.lastModifiedDate\\\">LastCreatedDate</span></td><td><input type=\\\"text\\\" class=\\\"input-sm form-control\\\" value=\\\"{{vm.user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}\\\" readonly=\\\"readonly\\\"></td></tr><tr><td><span translate=\\\"userManagement.profiles\\\">Profiles</span></td><td><ul class=\\\"list-unstyled\\\"><li ng-repeat=\\\"authority in user.authorities\\\"><span>{{authority}}</span></li></ul></td></tr></tbody></table></div><button type=\\\"submit\\\" ui-sref=\\\"user-management\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/admin/user-management/user-management-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myUserLabel\\\" translate=\\\"userManagement.home.createOrEditLabel\\\">Create or edit a User</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"id\\\" ng-model=\\\"vm.user.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"userManagement.login\\\">Login</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"login\\\" ng-model=\\\"vm.user.login\\\" ng-required=\\\"vm.user.id == null\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.login.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.login.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.login.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"50\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"userManagement.firstName\\\">FirstName</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"firstName\\\" ng-model=\\\"vm.user.firstName\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.firstName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.firstName.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"50\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label translate=\\\"userManagement.lastName\\\">LastName</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"lastName\\\" ng-model=\\\"vm.user.lastName\\\" ng-maxlength=\\\"50\\\"><div ng-show=\\\"editForm.lastName.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.lastName.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"50\\\">This field cannot be longer than 50 characters.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"userManagement.email\\\">Email</label><input type=\\\"email\\\" class=\\\"form-control\\\" name=\\\"email\\\" ng-model=\\\"vm.user.email\\\" required ng-maxlength=\\\"100\\\"><div ng-show=\\\"editForm.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.maxlength\\\" translate=\\\"entity.validation.maxlength\\\" translate-value-max=\\\"100\\\">This field cannot be longer than 100 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.email.$error.email\\\" translate=\\\"global.messages.validate.email.invalid\\\">Your e-mail is invalid.</p></div></div><div class=\\\"form-group\\\"><label for=\\\"activated\\\"><input ng-disabled=\\\"vm.user.id === null\\\" type=\\\"checkbox\\\" id=\\\"activated\\\" ng-model=\\\"vm.user.activated\\\"> <span translate=\\\"userManagement.activated\\\">Activated</span></label></div><div class=\\\"form-group\\\"><label translate=\\\"userManagement.langKey\\\">LangKey</label><select class=\\\"form-control\\\" name=\\\"langKey\\\" ng-model=\\\"vm.user.langKey\\\" ng-options=\\\"language as language for language in vm.languages track by language\\\"></select></div><div class=\\\"form-group\\\"><label translate=\\\"userManagement.profiles\\\">Profiles</label><select class=\\\"form-control\\\" multiple=\\\"multiple\\\" name=\\\"authority\\\" ng-model=\\\"vm.user.authorities\\\" ng-options=\\\"authority for authority in vm.authorities\\\"></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/admin/user-management/user-management.html\",\"<div><h2 translate=\\\"userManagement.home.title\\\">Users</h2><jhi-alert></jhi-alert><div class=\\\"container\\\"><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"user-management.new\\\"><span class=\\\"glyphicon glyphicon-flash\\\"></span> <span translate=\\\"userManagement.home.createLabel\\\">Create a new User</span></button></div></div></div><div class=\\\"table-responsive\\\"><table class=\\\"table table-striped\\\"><thead><tr><th translate=\\\"global.field.id\\\">ID</th><th translate=\\\"userManagement.login\\\">Login</th><th translate=\\\"userManagement.email\\\">Email</th><th></th><th translate=\\\"userManagement.langKey\\\">LangKey</th><th translate=\\\"userManagement.profiles\\\">Profiles</th><th translate=\\\"userManagement.createdDate\\\">CreatedDate</th><th translate=\\\"userManagement.lastModifiedBy\\\">LastModifiedBy</th><th translate=\\\"userManagement.lastModifiedDate\\\">LastModifiedDate</th><th></th></tr></thead><tbody><tr ng-repeat=\\\"user in vm.users track by user.id\\\"><td><a ui-sref=\\\"user-management-detail({login:user.login})\\\">{{user.id}}</a></td><td>{{user.login}}</td><td>{{user.email}}</td><td><span class=\\\"label label-danger\\\" ng-click=\\\"vm.setActive(user, true)\\\" ng-show=\\\"!user.activated\\\" translate=\\\"userManagement.deactivated\\\" style=\\\"cursor: pointer\\\">Desactivated</span> <span class=\\\"label label-success\\\" ng-click=\\\"vm.setActive(user, false)\\\" ng-show=\\\"user.activated\\\" translate=\\\"userManagement.activated\\\" style=\\\"cursor: pointer\\\">Activated</span></td><td>{{user.langKey}}</td><td><div ng-repeat=\\\"authority in user.authorities\\\"><span class=\\\"label label-info\\\">{{ authority }}</span></div></td><td>{{user.createdDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td>{{user.lastModifiedBy}}</td><td>{{user.lastModifiedDate | date:\\'dd/MM/yy HH:mm\\'}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"user-management-detail({login:user.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"user-management.edit({login:user.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"user-management.delete({login:user.id})\\\" class=\\\"btn btn-danger btn-sm\\\" ng-disabled=\\\"vm.currentAccount.login==user.login\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.loadAll()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/components/login/login.html\",\"<div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.cancel()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"login.title\\\">Sign in</h4></div><div class=\\\"modal-body\\\"><div class=\\\"row\\\"><div class=\\\"col-md-4 col-md-offset-4\\\"><h1 translate=\\\"login.title\\\">Sign in</h1></div><div class=\\\"col-md-8 col-md-offset-2\\\"><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.authenticationError\\\" translate=\\\"login.messages.error.authentication\\\"><strong>Failed to sign in!</strong> Please check your credentials and try again.</div></div><div class=\\\"col-md-6\\\"><form class=\\\"form\\\" role=\\\"form\\\" ng-submit=\\\"vm.login($event)\\\"><div class=\\\"form-group\\\"><label for=\\\"username\\\" translate=\\\"global.form.username\\\">Login</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"username\\\" placeholder=\\\"{{\\'global.form.username.placeholder\\' | translate}}\\\" ng-model=\\\"vm.username\\\"></div><div class=\\\"form-group\\\"><label for=\\\"password\\\" translate=\\\"login.form.password\\\">Password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" placeholder=\\\"{{\\'login.form.password.placeholder\\' | translate}}\\\" ng-model=\\\"vm.password\\\"></div><div class=\\\"form-group\\\"><label for=\\\"rememberMe\\\"><input type=\\\"checkbox\\\" id=\\\"rememberMe\\\" ng-model=\\\"vm.rememberMe\\\" checked=\\\"checked\\\"> <span translate=\\\"login.form.rememberme\\\">Remember me</span></label></div><button type=\\\"submit\\\" class=\\\"btn btn-primary\\\" translate=\\\"login.form.button\\\">Sign in</button></form><p></p><div class=\\\"alert alert-warning\\\"><a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.requestResetPassword()\\\" translate=\\\"login.password.forgot\\\">Did you forget your password?</a></div><div class=\\\"alert alert-warning\\\" translate=\\\"global.messages.info.register\\\" translate-compile>You don\\'t have an account yet? <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"vm.register()\\\">Register a new account</a></div></div><div class=\\\"col-md-6\\\"><br><jh-social ng-provider=\\\"google\\\"></jh-social><jh-social ng-provider=\\\"facebook\\\"></jh-social><jh-social ng-provider=\\\"twitter\\\"></jh-social><jh-social ng-provider=\\\"weibo\\\"></jh-social><jh-social ng-provider=\\\"wechat\\\"></jh-social><jh-social ng-provider=\\\"qq\\\"></jh-social><!-- jhipster-needle-add-social-button --></div></div></div>\");\n$templateCache.put(\"app/entities/audience/audience-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.audience.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"musixiseApp.audience.delete.question\\\" translate-values=\\\"{id: \\'{{vm.audience.id}}\\'}\\\">Are you sure you want to delete this Audience?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/audience/audience-detail.html\",\"<div><h2><span translate=\\\"musixiseApp.audience.detail.title\\\">Audience</span> {{vm.audience.id}}</h2><hr><dl class=\\\"dl-horizontal\\\"><dt><span translate=\\\"musixiseApp.audience.nickname\\\">Nickname</span></dt><dd><span>{{vm.audience.nickname}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.audience.realname\\\">Realname</span></dt><dd><span>{{vm.audience.realname}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.audience.email\\\">Email</span></dt><dd><span>{{vm.audience.email}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.audience.tel\\\">Tel</span></dt><dd><span>{{vm.audience.tel}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.audience.userId\\\">UserId</span></dt><dd><span>{{vm.audience.userId}}<span></span></span></dd><hr></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/audience/audience-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myAudienceLabel\\\" translate=\\\"musixiseApp.audience.home.createOrEditLabel\\\">Create or edit a Audience</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.audience.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.audience.nickname\\\" for=\\\"field_nickname\\\">Nickname</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"nickname\\\" id=\\\"field_nickname\\\" ng-model=\\\"vm.audience.nickname\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.audience.realname\\\" for=\\\"field_realname\\\">Realname</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"realname\\\" id=\\\"field_realname\\\" ng-model=\\\"vm.audience.realname\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.audience.email\\\" for=\\\"field_email\\\">Email</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"email\\\" id=\\\"field_email\\\" ng-model=\\\"vm.audience.email\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.audience.tel\\\" for=\\\"field_tel\\\">Tel</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"tel\\\" id=\\\"field_tel\\\" ng-model=\\\"vm.audience.tel\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.audience.userId\\\" for=\\\"field_userId\\\">UserId</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"userId\\\" id=\\\"field_userId\\\" ng-model=\\\"vm.audience.userId\\\"></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/audience/audiences.html\",\"<div><h2 translate=\\\"musixiseApp.audience.home.title\\\">Audiences</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"audience.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span class=\\\"hidden-xs\\\" translate=\\\"musixiseApp.audience.home.createLabel\\\">Create new Audience</span></button></div><div class=\\\"col-xs-8 no-padding-right\\\"><form name=\\\"searchForm\\\" class=\\\"form-inline\\\"><div class=\\\"input-group pull-right\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.searchQuery\\\" id=\\\"searchQuery\\\" placeholder=\\\"{{ \\'musixiseApp.audience.home.search\\' | translate }}\\\"> <span class=\\\"input-group-btn width-min\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.search(vm.searchQuery)\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span></button> </span><span class=\\\"input-group-btn width-min\\\" ng-if=\\\"vm.currentSearch\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span></button></span></div></form></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.transition()\\\"><th jh-sort-by=\\\"id\\\"><span translate=\\\"global.field.id\\\">ID</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"nickname\\\"><span translate=\\\"musixiseApp.audience.nickname\\\">Nickname</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"realname\\\"><span translate=\\\"musixiseApp.audience.realname\\\">Realname</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"email\\\"><span translate=\\\"musixiseApp.audience.email\\\">Email</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"tel\\\"><span translate=\\\"musixiseApp.audience.tel\\\">Tel</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"userId\\\"><span translate=\\\"musixiseApp.audience.userId\\\">UserId</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"audience in vm.audiences track by audience.id\\\"><td><a ui-sref=\\\"audience-detail({id:audience.id})\\\">{{audience.id}}</a></td><td>{{audience.nickname}}</td><td>{{audience.realname}}</td><td>{{audience.email}}</td><td>{{audience.tel}}</td><td>{{audience.userId}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"audience-detail({id:audience.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"audience.edit({id:audience.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"audience.delete({id:audience.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><jhi-item-count page=\\\"vm.page\\\" total=\\\"vm.queryCount\\\"></jhi-item-count><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.transition()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/entities/config/config-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.config.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p>Are you sure you want to delete this Config?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/config/config-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myMusixiserLabel\\\" translate=\\\"\\\">Create or edit a config</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.config.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_ckey\\\">key</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"ckey\\\" id=\\\"field_ckey\\\" ng-model=\\\"vm.config.ckey\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"field_cval\\\">value</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"cval\\\" id=\\\"field_cval\\\" ng-model=\\\"vm.config.cval\\\"></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/config/configs.html\",\"<div><h2>Config</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"config.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span class=\\\"hidden-xs\\\">Create new Config</span></button></div><div class=\\\"col-xs-8 no-padding-right\\\"><form name=\\\"searchForm\\\" class=\\\"form-inline\\\"><div class=\\\"input-group pull-right\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.searchQuery\\\" id=\\\"searchQuery\\\" placeholder=\\\"\\\"> <span class=\\\"input-group-btn width-min\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.search(vm.searchQuery)\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span></button> </span><span class=\\\"input-group-btn width-min\\\" ng-if=\\\"vm.currentSearch\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span></button></span></div></form></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.transition()\\\"><th jh-sort-by=\\\"id\\\"><span translate=\\\"global.field.id\\\">ID</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"ckey\\\"><span>key</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"cval\\\"><span>value</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"config in vm.config track by config.id\\\"><td><a ui-sref=\\\"config-detail({id:config.id})\\\">{{config.id}}</a></td><td>{{config.ckey}}</td><td>{{config.cval}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"config.edit({id:config.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"config.delete({id:config.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><jhi-item-count page=\\\"vm.page\\\" total=\\\"vm.queryCount\\\"></jhi-item-count><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.transition()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/entities/musixiser/musixiser-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.musixiser.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"musixiseApp.musixiser.delete.question\\\" translate-values=\\\"{id: \\'{{vm.musixiser.id}}\\'}\\\">Are you sure you want to delete this Musixiser?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/musixiser/musixiser-detail.html\",\"<div><h2><span translate=\\\"musixiseApp.musixiser.detail.title\\\">Musixiser</span> {{vm.musixiser.id}}</h2><hr><dl class=\\\"dl-horizontal\\\"><dt><span translate=\\\"musixiseApp.musixiser.realname\\\">Realname</span></dt><dd><span>{{vm.musixiser.realname}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.tel\\\">Tel</span></dt><dd><span>{{vm.musixiser.tel}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.email\\\">Email</span></dt><dd><span>{{vm.musixiser.email}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.birth\\\">Birth</span></dt><dd><span>{{vm.musixiser.birth}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.gender\\\">Gender</span></dt><dd><span>{{vm.musixiser.gender}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.smallAvatar\\\">SmallAvatar</span></dt><dd><span>{{vm.musixiser.smallAvatar}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.largeAvatar\\\">LargeAvatar</span></dt><dd><span>{{vm.musixiser.largeAvatar}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.nation\\\">Nation</span></dt><dd><span>{{vm.musixiser.nation}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.isMaster\\\">IsMaster</span></dt><dd><span>{{vm.musixiser.isMaster}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiser.userId\\\">UserId</span></dt><dd><span>{{vm.musixiser.userId}}<span></span></span></dd><hr></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/musixiser/musixiser-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myMusixiserLabel\\\" translate=\\\"musixiseApp.musixiser.home.createOrEditLabel\\\">Create or edit a Musixiser</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.musixiser.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.realname\\\" for=\\\"field_realname\\\">Realname</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"realname\\\" id=\\\"field_realname\\\" ng-model=\\\"vm.musixiser.realname\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.tel\\\" for=\\\"field_tel\\\">Tel</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"tel\\\" id=\\\"field_tel\\\" ng-model=\\\"vm.musixiser.tel\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.email\\\" for=\\\"field_email\\\">Email</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"email\\\" id=\\\"field_email\\\" ng-model=\\\"vm.musixiser.email\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.birth\\\" for=\\\"field_birth\\\">Birth</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"birth\\\" id=\\\"field_birth\\\" ng-model=\\\"vm.musixiser.birth\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.gender\\\" for=\\\"field_gender\\\">Gender</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"gender\\\" id=\\\"field_gender\\\" ng-model=\\\"vm.musixiser.gender\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.smallAvatar\\\" for=\\\"field_smallAvatar\\\">SmallAvatar</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"smallAvatar\\\" id=\\\"field_smallAvatar\\\" ng-model=\\\"vm.musixiser.smallAvatar\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.largeAvatar\\\" for=\\\"field_largeAvatar\\\">LargeAvatar</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"largeAvatar\\\" id=\\\"field_largeAvatar\\\" ng-model=\\\"vm.musixiser.largeAvatar\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.nation\\\" for=\\\"field_nation\\\">Nation</label><input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"nation\\\" id=\\\"field_nation\\\" ng-model=\\\"vm.musixiser.nation\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.isMaster\\\" for=\\\"field_isMaster\\\">IsMaster</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"isMaster\\\" id=\\\"field_isMaster\\\" ng-model=\\\"vm.musixiser.isMaster\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiser.userId\\\" for=\\\"field_userId\\\">UserId</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"userId\\\" id=\\\"field_userId\\\" ng-model=\\\"vm.musixiser.userId\\\" required><div ng-show=\\\"editForm.userId.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.userId.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.userId.$error.number\\\" translate=\\\"entity.validation.number\\\">This field should be a number.</p></div></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/musixiser/musixisers.html\",\"<div><h2 translate=\\\"musixiseApp.musixiser.home.title\\\">Musixisers</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"musixiser.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span class=\\\"hidden-xs\\\" translate=\\\"musixiseApp.musixiser.home.createLabel\\\">Create new Musixiser</span></button></div><div class=\\\"col-xs-8 no-padding-right\\\"><form name=\\\"searchForm\\\" class=\\\"form-inline\\\"><div class=\\\"input-group pull-right\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.searchQuery\\\" id=\\\"searchQuery\\\" placeholder=\\\"{{ \\'musixiseApp.musixiser.home.search\\' | translate }}\\\"> <span class=\\\"input-group-btn width-min\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.search(vm.searchQuery)\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span></button> </span><span class=\\\"input-group-btn width-min\\\" ng-if=\\\"vm.currentSearch\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span></button></span></div></form></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.transition()\\\"><th jh-sort-by=\\\"userId\\\"><span translate=\\\"musixiseApp.musixiser.userId\\\">UserId</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"realname\\\"><span translate=\\\"musixiseApp.musixiser.realname\\\">Realname</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"email\\\"><span translate=\\\"musixiseApp.musixiser.email\\\">Email</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"smallAvatar\\\"><span translate=\\\"musixiseApp.musixiser.smallAvatar\\\">SmallAvatar</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"followNum\\\"><span>followNum</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"fansNum\\\"><span>fansNum</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"songNum\\\"><span>songNum</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"createdDate\\\"><span>createdDate</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"musixiser in vm.musixisers track by musixiser.id\\\"><td>{{musixiser.userId}}</td><td>{{musixiser.realname}}</td><td>{{musixiser.email}}</td><td><img style=\\\"width: 50px\\\" class=\\\"img-circle\\\" src=\\\"{{musixiser.smallAvatar}}\\\"></td><td>{{musixiser.followNum}}</td><td>{{musixiser.fansNum}}</td><td>{{musixiser.songNum}}</td><td>{{musixiser.createdDate}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"musixiser-detail({id:musixiser.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"musixiser.edit({id:musixiser.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"musixiser.delete({id:musixiser.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><jhi-item-count page=\\\"vm.page\\\" total=\\\"vm.queryCount\\\"></jhi-item-count><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.transition()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/entities/musixiser-follow/musixiser-follow-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.musixiserFollow.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"musixiseApp.musixiserFollow.delete.question\\\" translate-values=\\\"{id: \\'{{vm.musixiserFollow.id}}\\'}\\\">Are you sure you want to delete this MusixiserFollow?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/musixiser-follow/musixiser-follow-detail.html\",\"<div><h2><span translate=\\\"musixiseApp.musixiserFollow.detail.title\\\">MusixiserFollow</span> {{vm.musixiserFollow.id}}</h2><hr><dl class=\\\"dl-horizontal\\\"><dt><span translate=\\\"musixiseApp.musixiserFollow.userId\\\">UserId</span></dt><dd><span>{{vm.musixiserFollow.userId}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.musixiserFollow.followId\\\">FollowId</span></dt><dd><span>{{vm.musixiserFollow.followId}}<span></span></span></dd><hr></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/musixiser-follow/musixiser-follow-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myMusixiserFollowLabel\\\" translate=\\\"musixiseApp.musixiserFollow.home.createOrEditLabel\\\">Create or edit a MusixiserFollow</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.musixiserFollow.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiserFollow.userId\\\" for=\\\"field_userId\\\">UserId</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"userId\\\" id=\\\"field_userId\\\" ng-model=\\\"vm.musixiserFollow.userId\\\" required><div ng-show=\\\"editForm.userId.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.userId.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.userId.$error.number\\\" translate=\\\"entity.validation.number\\\">This field should be a number.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.musixiserFollow.followId\\\" for=\\\"field_followId\\\">FollowId</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"followId\\\" id=\\\"field_followId\\\" ng-model=\\\"vm.musixiserFollow.followId\\\" required><div ng-show=\\\"editForm.followId.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.followId.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.followId.$error.number\\\" translate=\\\"entity.validation.number\\\">This field should be a number.</p></div></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/musixiser-follow/musixiser-follows.html\",\"<div><h2 translate=\\\"musixiseApp.musixiserFollow.home.title\\\">MusixiserFollows</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"musixiser-follow.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span class=\\\"hidden-xs\\\" translate=\\\"musixiseApp.musixiserFollow.home.createLabel\\\">Create new MusixiserFollow</span></button></div><div class=\\\"col-xs-8 no-padding-right\\\"><form name=\\\"searchForm\\\" class=\\\"form-inline\\\"><div class=\\\"input-group pull-right\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.searchQuery\\\" id=\\\"searchQuery\\\" placeholder=\\\"{{ \\'musixiseApp.musixiserFollow.home.search\\' | translate }}\\\"> <span class=\\\"input-group-btn width-min\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.search(vm.searchQuery)\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span></button> </span><span class=\\\"input-group-btn width-min\\\" ng-if=\\\"vm.currentSearch\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span></button></span></div></form></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.transition()\\\"><th jh-sort-by=\\\"id\\\"><span translate=\\\"global.field.id\\\">ID</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"userId\\\"><span translate=\\\"musixiseApp.musixiserFollow.userId\\\">UserId</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"followId\\\"><span translate=\\\"musixiseApp.musixiserFollow.followId\\\">followId</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"musixiserFollow in vm.musixiserFollows track by musixiserFollow.id\\\"><td><a ui-sref=\\\"musixiser-follow-detail({id:musixiserFollow.id})\\\">{{musixiserFollow.id}}</a></td><td>{{musixiserFollow.userId}}</td><td>{{musixiserFollow.followId}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"musixiser-follow-detail({id:musixiserFollow.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"musixiser-follow.edit({id:musixiserFollow.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"musixiser-follow.delete({id:musixiserFollow.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><jhi-item-count page=\\\"vm.page\\\" total=\\\"vm.queryCount\\\"></jhi-item-count><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.transition()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/entities/stages/stages-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.stages.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"musixiseApp.stages.delete.question\\\" translate-values=\\\"{id: \\'{{vm.stages.id}}\\'}\\\">Are you sure you want to delete this Stages?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/stages/stages-detail.html\",\"<div><h2><span translate=\\\"musixiseApp.stages.detail.title\\\">Stages</span> {{vm.stages.id}}</h2><hr><dl class=\\\"dl-horizontal\\\"><dt><span translate=\\\"musixiseApp.stages.status\\\">Status</span></dt><dd><span>{{vm.stages.status}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.stages.createtime\\\">Createtime</span></dt><dd><span>{{vm.stages.createtime | date:\\'mediumDate\\'}}</span></dd><hr><dt><span translate=\\\"musixiseApp.stages.userId\\\">UserId</span></dt><dd><span>{{vm.stages.userId}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.stages.audienceNum\\\">AudienceNum</span></dt><dd><span>{{vm.stages.audienceNum}}<span></span></span></dd><hr></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/stages/stages-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myStagesLabel\\\" translate=\\\"musixiseApp.stages.home.createOrEditLabel\\\">Create or edit a Stages</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.stages.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stages.status\\\" for=\\\"field_status\\\">Status</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"status\\\" id=\\\"field_status\\\" ng-model=\\\"vm.stages.status\\\" required><div ng-show=\\\"editForm.status.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.status.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p><p class=\\\"help-block\\\" ng-show=\\\"editForm.status.$error.number\\\" translate=\\\"entity.validation.number\\\">This field should be a number.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stages.createtime\\\" for=\\\"field_createtime\\\">Createtime</label><div class=\\\"input-group\\\"><input id=\\\"field_createtime\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"createtime\\\" uib-datepicker-popup=\\\"{{dateformat}}\\\" ng-model=\\\"vm.stages.createtime\\\" is-open=\\\"vm.datePickerOpenStatus.createtime\\\" required> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'createtime\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div><div ng-show=\\\"editForm.createtime.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"editForm.createtime.$error.required\\\" translate=\\\"entity.validation.required\\\">This field is required.</p></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stages.userId\\\" for=\\\"field_userId\\\">UserId</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"userId\\\" id=\\\"field_userId\\\" ng-model=\\\"vm.stages.userId\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stages.audienceNum\\\" for=\\\"field_audienceNum\\\">AudienceNum</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"audienceNum\\\" id=\\\"field_audienceNum\\\" ng-model=\\\"vm.stages.audienceNum\\\"></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/stages/stages.html\",\"<div><h2 translate=\\\"musixiseApp.stages.home.title\\\">Stages</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"stages.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span class=\\\"hidden-xs\\\" translate=\\\"musixiseApp.stages.home.createLabel\\\">Create new Stages</span></button></div><div class=\\\"col-xs-8 no-padding-right\\\"><form name=\\\"searchForm\\\" class=\\\"form-inline\\\"><div class=\\\"input-group pull-right\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.searchQuery\\\" id=\\\"searchQuery\\\" placeholder=\\\"{{ \\'musixiseApp.stages.home.search\\' | translate }}\\\"> <span class=\\\"input-group-btn width-min\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.search(vm.searchQuery)\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span></button> </span><span class=\\\"input-group-btn width-min\\\" ng-if=\\\"vm.currentSearch\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span></button></span></div></form></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.transition()\\\"><th jh-sort-by=\\\"id\\\"><span translate=\\\"global.field.id\\\">ID</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"status\\\"><span translate=\\\"musixiseApp.stages.status\\\">Status</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"createtime\\\"><span translate=\\\"musixiseApp.stages.createtime\\\">Createtime</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"userId\\\"><span translate=\\\"musixiseApp.stages.userId\\\">UserId</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"audienceNum\\\"><span translate=\\\"musixiseApp.stages.audienceNum\\\">AudienceNum</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"stages in vm.stages track by stages.id\\\"><td><a ui-sref=\\\"stages-detail({id:stages.id})\\\">{{stages.id}}</a></td><td>{{stages.status}}</td><td>{{stages.createtime | date:\\'mediumDate\\'}}</td><td>{{stages.userId}}</td><td>{{stages.audienceNum}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"stages-detail({id:stages.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"stages.edit({id:stages.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"stages.delete({id:stages.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><jhi-item-count page=\\\"vm.page\\\" total=\\\"vm.queryCount\\\"></jhi-item-count><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.transition()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/entities/stages-follow/stages-follow-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.stagesFollow.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"musixiseApp.stagesFollow.delete.question\\\" translate-values=\\\"{id: \\'{{vm.stagesFollow.id}}\\'}\\\">Are you sure you want to delete this StagesFollow?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/stages-follow/stages-follow-detail.html\",\"<div><h2><span translate=\\\"musixiseApp.stagesFollow.detail.title\\\">StagesFollow</span> {{vm.stagesFollow.id}}</h2><hr><dl class=\\\"dl-horizontal\\\"><dt><span translate=\\\"musixiseApp.stagesFollow.musixiserUid\\\">MusixiserUid</span></dt><dd><span>{{vm.stagesFollow.musixiserUid}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.stagesFollow.audienceUid\\\">AudienceUid</span></dt><dd><span>{{vm.stagesFollow.audienceUid}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.stagesFollow.stagesId\\\">StagesId</span></dt><dd><span>{{vm.stagesFollow.stagesId}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.stagesFollow.timestamp\\\">Timestamp</span></dt><dd><span>{{vm.stagesFollow.timestamp | date:\\'medium\\'}}</span></dd><hr><dt><span translate=\\\"musixiseApp.stagesFollow.updatetime\\\">Updatetime</span></dt><dd><span>{{vm.stagesFollow.updatetime | date:\\'medium\\'}}</span></dd><hr></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/stages-follow/stages-follow-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myStagesFollowLabel\\\" translate=\\\"musixiseApp.stagesFollow.home.createOrEditLabel\\\">Create or edit a StagesFollow</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.stagesFollow.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stagesFollow.musixiserUid\\\" for=\\\"field_musixiserUid\\\">MusixiserUid</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"musixiserUid\\\" id=\\\"field_musixiserUid\\\" ng-model=\\\"vm.stagesFollow.musixiserUid\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stagesFollow.audienceUid\\\" for=\\\"field_audienceUid\\\">AudienceUid</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"audienceUid\\\" id=\\\"field_audienceUid\\\" ng-model=\\\"vm.stagesFollow.audienceUid\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stagesFollow.stagesId\\\" for=\\\"field_stagesId\\\">StagesId</label><input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"stagesId\\\" id=\\\"field_stagesId\\\" ng-model=\\\"vm.stagesFollow.stagesId\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stagesFollow.timestamp\\\" for=\\\"field_timestamp\\\">Timestamp</label><div class=\\\"input-group\\\"><input id=\\\"field_timestamp\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"timestamp\\\" datetime-picker=\\\"{{dateformat}}\\\" ng-model=\\\"vm.stagesFollow.timestamp\\\" is-open=\\\"vm.datePickerOpenStatus.timestamp\\\"> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'timestamp\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.stagesFollow.updatetime\\\" for=\\\"field_updatetime\\\">Updatetime</label><div class=\\\"input-group\\\"><input id=\\\"field_updatetime\\\" type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"updatetime\\\" datetime-picker=\\\"{{dateformat}}\\\" ng-model=\\\"vm.stagesFollow.updatetime\\\" is-open=\\\"vm.datePickerOpenStatus.updatetime\\\"> <span class=\\\"input-group-btn\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" ng-click=\\\"vm.openCalendar(\\'updatetime\\')\\\"><i class=\\\"glyphicon glyphicon-calendar\\\"></i></button></span></div></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/stages-follow/stages-follows.html\",\"<div><h2 translate=\\\"musixiseApp.stagesFollow.home.title\\\">StagesFollows</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"stages-follow.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span class=\\\"hidden-xs\\\" translate=\\\"musixiseApp.stagesFollow.home.createLabel\\\">Create new StagesFollow</span></button></div><div class=\\\"col-xs-8 no-padding-right\\\"><form name=\\\"searchForm\\\" class=\\\"form-inline\\\"><div class=\\\"input-group pull-right\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.searchQuery\\\" id=\\\"searchQuery\\\" placeholder=\\\"{{ \\'musixiseApp.stagesFollow.home.search\\' | translate }}\\\"> <span class=\\\"input-group-btn width-min\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.search(vm.searchQuery)\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span></button> </span><span class=\\\"input-group-btn width-min\\\" ng-if=\\\"vm.currentSearch\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span></button></span></div></form></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.transition()\\\"><th jh-sort-by=\\\"id\\\"><span translate=\\\"global.field.id\\\">ID</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"musixiserUid\\\"><span translate=\\\"musixiseApp.stagesFollow.musixiserUid\\\">MusixiserUid</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"audienceUid\\\"><span translate=\\\"musixiseApp.stagesFollow.audienceUid\\\">AudienceUid</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"stagesId\\\"><span translate=\\\"musixiseApp.stagesFollow.stagesId\\\">StagesId</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"timestamp\\\"><span translate=\\\"musixiseApp.stagesFollow.timestamp\\\">Timestamp</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"updatetime\\\"><span translate=\\\"musixiseApp.stagesFollow.updatetime\\\">Updatetime</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"stagesFollow in vm.stagesFollows track by stagesFollow.id\\\"><td><a ui-sref=\\\"stages-follow-detail({id:stagesFollow.id})\\\">{{stagesFollow.id}}</a></td><td>{{stagesFollow.musixiserUid}}</td><td>{{stagesFollow.audienceUid}}</td><td>{{stagesFollow.stagesId}}</td><td>{{stagesFollow.timestamp | date:\\'medium\\'}}</td><td>{{stagesFollow.updatetime | date:\\'medium\\'}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"stages-follow-detail({id:stagesFollow.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"stages-follow.edit({id:stagesFollow.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"stages-follow.delete({id:stagesFollow.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><jhi-item-count page=\\\"vm.page\\\" total=\\\"vm.queryCount\\\"></jhi-item-count><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.transition()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/entities/work-list/work-list-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.workList.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"musixiseApp.workList.delete.question\\\" translate-values=\\\"{id: \\'{{vm.workList.id}}\\'}\\\">Are you sure you want to delete this WorkList?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/work-list/work-list-detail.html\",\"<div><h2><span translate=\\\"musixiseApp.workList.detail.title\\\">WorkList</span> {{vm.workList.id}}</h2><hr><dl class=\\\"dl-horizontal\\\"><hr><dt><span translate=\\\"musixiseApp.workList.userId\\\">userId</span></dt><dd><span>{{vm.workList.userId}}<span></span></span></dd><dt><span>title</span></dt><dd><span>{{vm.workList.title}}<span></span></span></dd><dt><span>cover</span></dt><dd><span>{{vm.workList.cover}}<span></span></span></dd><dt><span translate=\\\"musixiseApp.workList.content\\\">Content</span></dt><dd><span>{{vm.workList.content}}<span></span></span></dd><hr><dt><span translate=\\\"musixiseApp.workList.url\\\">Url</span></dt><dd><span>{{vm.workList.url}}<span></span></span></dd><hr><dt><span>collectNum</span></dt><dd><span>{{vm.workList.collectNum}}</span></dd><hr><dt><span>createdDate</span></dt><dd><span>{{vm.workList.createdDate}}</span></dd><hr><dt><span>lastModifiedDate</span></dt><dd><span>{{vm.workList.lastModifiedDate}}</span></dd><hr></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/work-list/work-list-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myWorkListLabel\\\" translate=\\\"musixiseApp.workList.home.createOrEditLabel\\\">Create or edit a WorkList</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.workList.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"title\\\">title</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"title\\\" name=\\\"title\\\" ng-model=\\\"vm.workList.title\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"cover\\\">cover</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"cover\\\" name=\\\"cover\\\" ng-model=\\\"vm.workList.cover\\\"></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" translate=\\\"musixiseApp.workList.content\\\" for=\\\"field_content\\\">Content</label><textarea class=\\\"form-control\\\" name=\\\"content\\\" id=\\\"field_content\\\" ng-model=\\\"vm.workList.content\\\" required>\\n            <div ng-show=\\\"editForm.content.$invalid\\\">\\n                <p class=\\\"help-block\\\" ng-show=\\\"editForm.content.$error.required\\\" translate=\\\"entity.validation.required\\\">\\n                    This field is required.\\n                </p>\\n            </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" translate=\\\"musixiseApp.workList.url\\\" for=\\\"field_url\\\">Url</label>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"url\\\" id=\\\"field_url\\\" ng-model=\\\"vm.workList.url\\\">\\n        </div>\\n\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" for=\\\"status\\\">status</label>\\n            <select id=\\\"status\\\" name=\\\"status\\\" class=\\\"form-control\\\" ng-model=\\\"vm.workList.status\\\" ng-options=\\\"status.id as status.name for status in vm.workMap.status\\\"></select>\\n\\n        </div>\\n\\n\\n        <div class=\\\"form-group\\\">\\n            <label class=\\\"control-label\\\" translate=\\\"musixiseApp.workList.userId\\\" for=\\\"field_userId\\\">UserId</label>\\n            <input type=\\\"number\\\" class=\\\"form-control\\\" name=\\\"userId\\\" id=\\\"field_userId\\\" ng-model=\\\"vm.workList.userId\\\">\\n        </div>\\n\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n        <button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\">\\n            <span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span>\\n        </button>\\n        <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\">\\n            <span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span>\\n        </button>\\n    </div>\\n</form>\");\n$templateCache.put(\"app/entities/work-list/work-lists.html\",\"<div><h2>作品列表</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"work-list.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span class=\\\"hidden-xs\\\" translate=\\\"musixiseApp.workList.home.createLabel\\\">Create new WorkList</span></button></div><div class=\\\"col-xs-8 no-padding-right\\\"><form name=\\\"searchForm\\\" class=\\\"form-inline\\\"><div class=\\\"input-group pull-right\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.searchQuery\\\" id=\\\"searchQuery\\\" placeholder=\\\"{{ \\'musixiseApp.workList.home.search\\' | translate }}\\\"> <span class=\\\"input-group-btn width-min\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.search(vm.searchQuery)\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span></button> </span><span class=\\\"input-group-btn width-min\\\" ng-if=\\\"vm.currentSearch\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span></button></span></div></form></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr jh-sort=\\\"vm.predicate\\\" ascending=\\\"vm.reverse\\\" callback=\\\"vm.transition()\\\"><th jh-sort-by=\\\"id\\\"><span translate=\\\"global.field.id\\\">ID</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"userId\\\"><span translate=\\\"musixiseApp.workList.userId\\\">UserId</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"title\\\"><span>title</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"cover\\\"><span>cover</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"url\\\"><span translate=\\\"musixiseApp.workList.url\\\">Url</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"status\\\"><span>status</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"collectNum\\\"><span>collectNum</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th jh-sort-by=\\\"createtime\\\"><span translate=\\\"musixiseApp.workList.createtime\\\">Createtime</span> <span class=\\\"glyphicon glyphicon-sort\\\"></span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"workList in vm.workLists track by workList.id\\\"><td><a ui-sref=\\\"work-list-detail({id:workList.id})\\\">{{workList.id}}</a></td><td>{{workList.userId}}</td><td>{{workList.title}}</td><td><img style=\\\"width: 50px\\\" class=\\\"img-thumbnail\\\" src=\\\"{{workList.cover}}\\\"></td><td>{{workList.url}}</td><td><span ng-show=\\\"workList.status == 0\\\">正常</span> <span ng-show=\\\"workList.status == 1\\\">私有</span> <span ng-show=\\\"workList.status == 2\\\">删除</span></td><td>{{workList.collectNum}}</td><td>{{workList.createdDate}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"work-list-detail({id:workList.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"work-list.edit({id:workList.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"work-list.delete({id:workList.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div><div class=\\\"text-center\\\"><jhi-item-count page=\\\"vm.page\\\" total=\\\"vm.queryCount\\\"></jhi-item-count><uib-pagination class=\\\"pagination-sm\\\" total-items=\\\"vm.totalItems\\\" ng-model=\\\"vm.page\\\" ng-change=\\\"vm.transition()\\\"></uib-pagination></div></div>\");\n$templateCache.put(\"app/entities/work-list-follow/work-list-follow-delete-dialog.html\",\"<form name=\\\"deleteForm\\\" ng-submit=\\\"vm.confirmDelete(vm.workListFollow.id)\\\"><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" translate=\\\"entity.delete.title\\\">Confirm delete operation</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><p translate=\\\"musixiseApp.workListFollow.delete.question\\\" translate-values=\\\"{id: \\'{{vm.workListFollow.id}}\\'}\\\">Are you sure you want to delete this WorkListFollow?</p></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"deleteForm.$invalid\\\" class=\\\"btn btn-danger\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.delete\\\">Delete</span></button></div></form>\");\n$templateCache.put(\"app/entities/work-list-follow/work-list-follow-detail.html\",\"<div><h2><span translate=\\\"musixiseApp.workListFollow.detail.title\\\">WorkListFollow</span> {{vm.workListFollow.id}}</h2><hr><dl class=\\\"dl-horizontal\\\"><dt><span translate=\\\"musixiseApp.workListFollow.createdDate\\\">createdDate</span></dt><dd><span>{{vm.workListFollow.createdDate | date:\\'mediumDate\\'}}</span></dd><hr><dt><span translate=\\\"musixiseApp.workListFollow.work\\\">work</span></dt><dd><a ui-sref=\\\"work-list-detail({id:vm.workListFollow.work.id})\\\">{{vm.workListFollow.work.id}}</a></dd><hr><dt><span translate=\\\"musixiseApp.workListFollow.user\\\">user</span></dt><dd>{{vm.workListFollow.user.id}}</dd><hr></dl><button type=\\\"submit\\\" onclick=\\\"window.history.back()\\\" class=\\\"btn btn-info\\\"><span class=\\\"glyphicon glyphicon-arrow-left\\\"></span>&nbsp;<span translate=\\\"entity.action.back\\\"> Back</span></button></div>\");\n$templateCache.put(\"app/entities/work-list-follow/work-list-follow-dialog.html\",\"<form name=\\\"editForm\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.save()\\\" show-validation><div class=\\\"modal-header\\\"><button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-hidden=\\\"true\\\" ng-click=\\\"vm.clear()\\\">&times;</button><h4 class=\\\"modal-title\\\" id=\\\"myWorkListFollowLabel\\\" translate=\\\"musixiseApp.workListFollow.home.createOrEditLabel\\\">Create or edit a WorkListFollow</h4></div><div class=\\\"modal-body\\\"><jhi-alert-error></jhi-alert-error><div class=\\\"form-group\\\"><label for=\\\"id\\\" translate=\\\"global.field.id\\\">ID</label><input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"id\\\" name=\\\"id\\\" ng-model=\\\"vm.workListFollow.id\\\" readonly=\\\"readonly\\\"></div><div class=\\\"form-group\\\"><label translate=\\\"musixiseApp.workListFollow.work\\\" for=\\\"field_work\\\">work</label><select class=\\\"form-control\\\" id=\\\"field_work\\\" name=\\\"work\\\" ng-model=\\\"vm.workListFollow.work\\\" ng-options=\\\"workList as workList.id for workList in vm.worklists track by workList.id\\\"><option value=\\\"\\\"></option></select></div><div class=\\\"form-group\\\"><label translate=\\\"musixiseApp.workListFollow.user\\\" for=\\\"field_user\\\">user</label><select class=\\\"form-control\\\" id=\\\"field_user\\\" name=\\\"user\\\" ng-model=\\\"vm.workListFollow.user\\\" ng-options=\\\"user as user.id for user in vm.users track by user.id\\\"><option value=\\\"\\\"></option></select></div></div><div class=\\\"modal-footer\\\"><button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-ban-circle\\\"></span>&nbsp;<span translate=\\\"entity.action.cancel\\\">Cancel</span></button> <button type=\\\"submit\\\" ng-disabled=\\\"editForm.$invalid || isSaving\\\" class=\\\"btn btn-primary\\\"><span class=\\\"glyphicon glyphicon-save\\\"></span>&nbsp;<span translate=\\\"entity.action.save\\\">Save</span></button></div></form>\");\n$templateCache.put(\"app/entities/work-list-follow/work-list-follows.html\",\"<div><h2 translate=\\\"musixiseApp.workListFollow.home.title\\\">WorkListFollows</h2><jhi-alert></jhi-alert><div class=\\\"container-fluid\\\"><div class=\\\"row\\\"><div class=\\\"col-xs-4 no-padding-left\\\"><button class=\\\"btn btn-primary\\\" ui-sref=\\\"work-list-follow.new\\\"><span class=\\\"glyphicon glyphicon-plus\\\"></span> <span class=\\\"hidden-xs\\\">Create new WorkListFollow</span></button></div><div class=\\\"col-xs-8 no-padding-right\\\"><form name=\\\"searchForm\\\" class=\\\"form-inline\\\"><div class=\\\"input-group pull-right\\\"><input type=\\\"text\\\" class=\\\"form-control\\\" ng-model=\\\"vm.searchQuery\\\" id=\\\"searchQuery\\\" placeholder=\\\"{{ \\'musixiseApp.workListFollow.home.search\\' | translate }}\\\"> <span class=\\\"input-group-btn width-min\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.search(vm.searchQuery)\\\"><span class=\\\"glyphicon glyphicon-search\\\"></span></button> </span><span class=\\\"input-group-btn width-min\\\" ng-if=\\\"vm.currentSearch\\\"><button class=\\\"btn btn-info\\\" ng-click=\\\"vm.clear()\\\"><span class=\\\"glyphicon glyphicon-trash\\\"></span></button></span></div></form></div></div></div><br><div class=\\\"table-responsive\\\"><table class=\\\"jh-table table table-striped\\\"><thead><tr><th><span translate=\\\"global.field.id\\\">ID</span></th><th><span>work</span></th><th><span>user</span></th><th><span>createdDate</span></th><th></th></tr></thead><tbody><tr ng-repeat=\\\"workListFollow in vm.workListFollows track by workListFollow.id\\\"><td><a ui-sref=\\\"work-list-follow-detail({id:workListFollow.id})\\\">{{workListFollow.id}}</a></td><td><a ui-sref=\\\"work-list-detail({id:workListFollow.work.id})\\\">{{workListFollow.work.id}}</a></td><td>{{workListFollow.user.id}}</td><td>{{workListFollow.createdDate}}</td><td class=\\\"text-right\\\"><div class=\\\"btn-group flex-btn-group-container\\\"><button type=\\\"submit\\\" ui-sref=\\\"work-list-follow-detail({id:workListFollow.id})\\\" class=\\\"btn btn-info btn-sm\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.view\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"work-list-follow.edit({id:workListFollow.id})\\\" class=\\\"btn btn-primary btn-sm\\\"><span class=\\\"glyphicon glyphicon-pencil\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.edit\\\"></span></button> <button type=\\\"submit\\\" ui-sref=\\\"work-list-follow.delete({id:workListFollow.id})\\\" class=\\\"btn btn-danger btn-sm\\\"><span class=\\\"glyphicon glyphicon-remove-circle\\\"></span> <span class=\\\"hidden-xs hidden-sm\\\" translate=\\\"entity.action.delete\\\"></span></button></div></td></tr></tbody></table></div></div>\");\n$templateCache.put(\"app/layouts/error/accessdenied.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><span class=\\\"hipster img-responsive img-rounded\\\"></span></div><div class=\\\"col-md-8\\\"><h1 translate=\\\"error.title\\\">Error Page!</h1><div class=\\\"alert alert-danger\\\" translate=\\\"error.403\\\">You are not authorized to access the page.</div></div></div></div>\");\n$templateCache.put(\"app/layouts/error/error.html\",\"<div ng-cloak><div class=\\\"row\\\"><div class=\\\"col-md-4\\\"><span class=\\\"hipster img-responsive img-rounded\\\"></span></div><div class=\\\"col-md-8\\\"><h1 translate=\\\"error.title\\\">Error Page!</h1><div ng-show=\\\"errorMessage\\\"><div class=\\\"alert alert-danger\\\">{{errorMessage}}</div></div></div></div></div>\");\n$templateCache.put(\"app/layouts/navbar/navbar.html\",\"<nav class=\\\"navbar navbar-default\\\" role=\\\"navigation\\\"><div class=\\\"container\\\"><div class=\\\"navbar-header\\\"><button type=\\\"button\\\" class=\\\"navbar-toggle\\\" ng-click=\\\"vm.navCollapsed = !vm.navCollapsed\\\"><span class=\\\"sr-only\\\">Toggle navigation</span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span> <span class=\\\"icon-bar\\\"></span></button> <a class=\\\"navbar-brand\\\" href=\\\"#/\\\"><span translate=\\\"global.title\\\">Musixise</span> <span class=\\\"navbar-version\\\">v{{VERSION}}</span></a></div><div class=\\\"collapse navbar-collapse\\\" id=\\\"navbar-collapse\\\" uib-collapse=\\\"vm.navCollapsed\\\" ng-switch=\\\"vm.isAuthenticated()\\\"><ul class=\\\"nav navbar-nav navbar-right\\\"><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"home\\\" ng-click=\\\"vm.navCollapsed = true\\\"><span class=\\\"glyphicon glyphicon-home\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.home\\\">Home</span></a></li><!-- jhipster-needle-add-element-to-menu - JHipster will add new menu items here --><li ng-class=\\\"{active: vm.$state.includes(\\'entity\\')}\\\" ng-switch-when=\\\"true\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"entity-menu\\\"><span><span class=\\\"glyphicon glyphicon-th-list\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.entities.main\\\">Entities </span><b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"musixiser\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-asterisk\\\"></span> &#xA0;<span translate=\\\"global.menu.entities.musixiser\\\">Musixiser</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"work-list\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-asterisk\\\"></span> &#xA0;<span translate=\\\"global.menu.entities.workList\\\">Work List</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"work-list-follow\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-asterisk\\\"></span> &#xA0;<span translate=\\\"global.menu.entities.workListFollow\\\">Work List Follow</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"musixiser-follow\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-asterisk\\\"></span> &#xA0;<span translate=\\\"global.menu.entities.musixiserFollow\\\">Musixiser Follow</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"config\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-asterisk\\\"></span> &#xA0;<span translate=\\\"config\\\">Config</span></a></li><!-- jhipster-needle-add-entity-to-menu - JHipster will add entities to the menu here --></ul></li><li ng-class=\\\"{active: vm.$state.includes(\\'account\\')}\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"account-menu\\\"><span><span class=\\\"glyphicon glyphicon-user\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.account.main\\\">Account </span><b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a ui-sref=\\\"settings\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-wrench\\\"></span> &#xA0;<span translate=\\\"global.menu.account.settings\\\">Settings</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a ui-sref=\\\"password\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-lock\\\"></span> &#xA0;<span translate=\\\"global.menu.account.password\\\">Password</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"true\\\"><a href=\\\"\\\" ng-click=\\\"vm.logout()\\\" id=\\\"logout\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-log-out\\\"></span> &#xA0;<span translate=\\\"global.menu.account.logout\\\">Sign out</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"false\\\"><a href=\\\"\\\" ng-click=\\\"vm.login()\\\" id=\\\"login\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-log-in\\\"></span> &#xA0;<span translate=\\\"global.menu.account.login\\\">Sign in</span></a></li><li ui-sref-active=\\\"active\\\" ng-switch-when=\\\"false\\\"><a ui-sref=\\\"register\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-plus-sign\\\"></span> &#xA0;<span translate=\\\"global.menu.account.register\\\">Register</span></a></li></ul></li><li ng-class=\\\"{active: vm.vm.$state.includes(\\'admin\\')}\\\" ng-switch-when=\\\"true\\\" has-authority=\\\"ROLE_ADMIN\\\" uib-dropdown class=\\\"dropdown pointer\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" id=\\\"admin-menu\\\"><span><span class=\\\"glyphicon glyphicon-tower\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.admin.main\\\">Administration</span> <b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"user-management\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-user\\\"></span> &#xA0;<span translate=\\\"global.menu.admin.userManagement\\\">User management</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-tracker\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-eye-open\\\"></span> &nbsp;<span translate=\\\"global.menu.admin.tracker\\\">User tracker</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-metrics\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-dashboard\\\"></span> &#xA0;<span translate=\\\"global.menu.admin.metrics\\\">Metrics</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-health\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-heart\\\"></span> &#xA0;<span translate=\\\"global.menu.admin.health\\\">Health</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"jhi-configuration\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-list-alt\\\"></span> &#xA0;<span translate=\\\"global.menu.admin.configuration\\\">Configuration</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"audits\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-bell\\\"></span> &#xA0;<span translate=\\\"global.menu.admin.audits\\\">Audits</span></a></li><li ui-sref-active=\\\"active\\\"><a ui-sref=\\\"logs\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-tasks\\\"></span> &#xA0;<span translate=\\\"global.menu.admin.logs\\\">Logs</span></a></li><li ng-hide=\\\"vm.inProduction\\\" ui-sref-active=\\\"active\\\"><a ui-sref=\\\"docs\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-book\\\"></span> &#xA0;<span translate=\\\"global.menu.admin.apidocs\\\">API</span></a></li><!-- jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here --><li ng-hide=\\\"vm.inProduction\\\"><a href=\\\"/h2-console\\\" target=\\\"_tab\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\"><span class=\\\"glyphicon glyphicon-hdd\\\"></span> &#xA0;<span translate=\\\"global.menu.admin.database\\\">Database</span></a></li></ul></li><li ui-sref-active=\\\"active\\\" uib-dropdown class=\\\"dropdown pointer\\\" ng-controller=\\\"JhiLanguageController as languageVm\\\"><a class=\\\"dropdown-toggle\\\" uib-dropdown-toggle href=\\\"\\\" ng-if=\\\"languageVm.languages.length > 1\\\"><span><span class=\\\"glyphicon glyphicon-flag\\\"></span> <span class=\\\"hidden-sm\\\" translate=\\\"global.menu.language\\\">Language</span> <b class=\\\"caret\\\"></b></span></a><ul class=\\\"dropdown-menu\\\" uib-dropdown-menu ng-if=\\\"languageVm.languages.length > 1\\\"><li active-menu=\\\"{{language}}\\\" ng-repeat=\\\"language in languageVm.languages\\\"><a href=\\\"\\\" ng-click=\\\"languageVm.changeLanguage(language)\\\" data-toggle=\\\"collapse\\\" data-target=\\\".navbar-collapse.in\\\">{{language | findLanguageFromKey}}</a></li></ul></li></ul></div></div></nav>\");\n$templateCache.put(\"app/account/reset/finish/reset.finish.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-4 col-md-offset-4\\\"><h1 translate=\\\"reset.finish.title\\\">Reset password</h1><div class=\\\"alert alert-danger\\\" translate=\\\"reset.finish.messages.keymissing\\\" ng-show=\\\"vm.keyMissing\\\"><strong>The password reset key is missing.</strong></div><div class=\\\"alert alert-warning\\\" ng-hide=\\\"vm.success || vm.keyMissing\\\"><p translate=\\\"reset.finish.messages.info\\\">Choose a new password</p></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.error\\\"><p translate=\\\"reset.finish.messages.error\\\">Your password couldn\\'t be reset. Remember a password request is only valid for 24 hours.</p></div><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success\\\"><p translate=\\\"reset.finish.messages.success\\\" translate-compile><strong>Your password has been reset.</strong> Please <a class=\\\"alert-link\\\" href=\\\"\\\" ng-click=\\\"login\\\">sign in</a>.</p></div><div class=\\\"alert alert-danger\\\" ng-show=\\\"vm.doNotMatch\\\" translate=\\\"global.messages.error.dontmatch\\\">The password and its confirmation do not match!</div><div ng-hide=\\\"vm.keyMissing\\\"><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.finishReset()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"password\\\" translate=\\\"global.form.newpassword\\\">New password</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"password\\\" name=\\\"password\\\" placeholder=\\\"{{\\'global.form.newpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.resetAccount.password\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.password.$dirty && form.password.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.required\\\" translate=\\\"global.messages.validate.newpassword.required\\\">Your password is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.minlength\\\" translate=\\\"global.messages.validate.newpassword.minlength\\\">Your password is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.password.$error.maxlength\\\" translate=\\\"global.messages.validate.newpassword.maxlength\\\">Your password cannot be longer than 50 characters.</p></div><password-strength-bar password-to-check=\\\"vm.resetAccount.password\\\"></password-strength-bar></div><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"confirmPassword\\\" translate=\\\"global.form.confirmpassword\\\">New password confirmation</label><input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"confirmPassword\\\" name=\\\"confirmPassword\\\" placeholder=\\\"{{\\'global.form.confirmpassword.placeholder\\' | translate}}\\\" ng-model=\\\"vm.confirmPassword\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"50\\\" required><div ng-show=\\\"form.confirmPassword.$dirty && form.confirmPassword.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.required\\\" translate=\\\"global.messages.validate.confirmpassword.required\\\">Your password confirmation is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.minlength\\\" translate=\\\"global.messages.validate.confirmpassword.minlength\\\">Your password confirmation is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.confirmPassword.$error.maxlength\\\" translate=\\\"global.messages.validate.confirmpassword.maxlength\\\">Your password confirmation cannot be longer than 50 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"reset.finish.form.button\\\">Reset Password</button></form></div></div></div></div>\");\n$templateCache.put(\"app/account/reset/request/reset.request.html\",\"<div><div class=\\\"row\\\"><div class=\\\"col-md-8 col-md-offset-2\\\"><h1 translate=\\\"reset.request.title\\\">Reset your password</h1><div class=\\\"alert alert-danger\\\" translate=\\\"reset.request.messages.notfound\\\" ng-show=\\\"vm.errorEmailNotExists\\\"><strong>E-Mail address isn\\'t registered!</strong> Please check and try again.</div><div class=\\\"alert alert-warning\\\" ng-hide=\\\"vm.success\\\"><p translate=\\\"reset.request.messages.info\\\">Enter the e-mail address you used to register.</p></div><div class=\\\"alert alert-success\\\" ng-show=\\\"vm.success == \\'OK\\'\\\"><p translate=\\\"reset.request.messages.success\\\">Check your e-mails for details on how to reset your password.</p></div><form ng-show=\\\"!vm.success\\\" name=\\\"form\\\" role=\\\"form\\\" novalidate ng-submit=\\\"vm.requestReset()\\\" show-validation><div class=\\\"form-group\\\"><label class=\\\"control-label\\\" for=\\\"email\\\" translate=\\\"global.form.email\\\">E-mail</label><input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"email\\\" name=\\\"email\\\" placeholder=\\\"{{\\'global.form.email.placeholder\\' | translate}}\\\" ng-model=\\\"vm.resetAccount.email\\\" ng-minlength=\\\"5\\\" ng-maxlength=\\\"100\\\" required><div ng-show=\\\"form.email.$dirty && form.email.$invalid\\\"><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.required\\\" translate=\\\"global.messages.validate.email.required\\\">Your e-mail is required.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.email\\\" translate=\\\"global.messages.validate.email.invalid\\\">Your e-mail is invalid.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.minlength\\\" translate=\\\"global.messages.validate.email.minlength\\\">Your e-mail is required to be at least 5 characters.</p><p class=\\\"help-block\\\" ng-show=\\\"form.email.$error.maxlength\\\" translate=\\\"global.messages.validate.email.maxlength\\\">Your e-mail cannot be longer than 100 characters.</p></div></div><button type=\\\"submit\\\" ng-disabled=\\\"form.$invalid\\\" class=\\\"btn btn-primary\\\" translate=\\\"reset.request.form.button\\\">Reset</button></form></div></div></div>\");\n$templateCache.put(\"app/account/social/directive/social.html\",\"<form action=\\\"{{ providerURL }}\\\" method=\\\"POST\\\"><button type=\\\"submit\\\" class=\\\"btn btn-block jh-btn-social jh-btn-{{ provider }}\\\"><span translate=\\\"social.btnLabel\\\" translate-values=\\\"{ label: label }\\\">Sign in with {{ label }}</span></button> <input name=\\\"scope\\\" type=\\\"hidden\\\" value=\\\"{{ providerSetting }}\\\"> <input name=\\\"_csrf\\\" type=\\\"hidden\\\" value=\\\"{{ csrf }}\\\"></form>\");}]);})();","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('hasAnyAuthority', hasAnyAuthority);\n\n    function hasAnyAuthority(Principal) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var authorities = attrs.hasAnyAuthority.replace(/\\s+/g, '').split(',');\n\n            var setVisible = function () {\n                    element.removeClass('hidden');\n                },\n                setHidden = function () {\n                    element.addClass('hidden');\n                },\n                defineVisibility = function (reset) {\n                    var result;\n                    if (reset) {\n                        setVisible();\n                    }\n\n                    result = Principal.hasAnyAuthority(authorities);\n                    if (result) {\n                        setVisible();\n                    } else {\n                        setHidden();\n                    }\n                };\n\n            if (authorities.length > 0) {\n                defineVisibility(true);\n\n                scope.$watch(function() {\n                    return Principal.isAuthenticated();\n                }, function() {\n                    defineVisibility(true);\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Auth', Auth);\n\n    Auth.$inject = ['$rootScope', '$state', '$q', '$translate', 'Principal', 'AuthServerProvider', 'Account', 'LoginService', 'Register', 'Activate', 'Password', 'PasswordResetInit', 'PasswordResetFinish', 'JhiTrackerService'];\n\n    function Auth ($rootScope, $state, $q, $translate, Principal, AuthServerProvider, Account, LoginService, Register, Activate, Password, PasswordResetInit, PasswordResetFinish, JhiTrackerService) {\n        var service = {\n            activateAccount: activateAccount,\n            authorize: authorize,\n            changePassword: changePassword,\n            createAccount: createAccount,\n            login: login,\n            logout: logout,\n            loginWithToken: loginWithToken,\n            resetPasswordFinish: resetPasswordFinish,\n            resetPasswordInit: resetPasswordInit,\n            updateAccount: updateAccount\n        };\n\n        return service;\n\n        function activateAccount (key, callback) {\n            var cb = callback || angular.noop;\n\n            return Activate.get(key,\n                function (response) {\n                    return cb(response);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function authorize (force) {\n            var authReturn = Principal.identity(force).then(authThen);\n\n            return authReturn;\n\n            function authThen () {\n                var isAuthenticated = Principal.isAuthenticated();\n\n                // an authenticated user can't access to login and register pages\n                if (isAuthenticated && $rootScope.toState.parent === 'account' && ($rootScope.toState.name === 'login' || $rootScope.toState.name === 'register' || $rootScope.toState.name === 'social-auth')) {\n                    $state.go('home');\n                }\n\n                if ($rootScope.toState.data.authorities && $rootScope.toState.data.authorities.length > 0 && !Principal.hasAnyAuthority($rootScope.toState.data.authorities)) {\n                    if (isAuthenticated) {\n                        // user is signed in but not authorized for desired state\n                        $state.go('accessdenied');\n                    }\n                    else {\n                        // user is not authenticated. stow the state they wanted before you\n                        // send them to the login service, so you can return them when you're done\n                        $rootScope.redirected = true;\n                        $rootScope.previousStateName = $rootScope.toState;\n                        $rootScope.previousStateNameParams = $rootScope.toStateParams;\n\n                        // now, send them to the signin state so they can log in\n                        $state.go('accessdenied');\n                        LoginService.open();\n                    }\n                }\n            }\n        }\n\n        function changePassword (newPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return Password.save(newPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function createAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Register.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    this.logout();\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n\n        function login (credentials, callback) {\n            var cb = callback || angular.noop;\n            var deferred = $q.defer();\n\n            AuthServerProvider.login(credentials)\n                .then(loginThen)\n                .catch(function (err) {\n                    this.logout();\n                    deferred.reject(err);\n                    return cb(err);\n                }.bind(this));\n\n            function loginThen (data) {\n                Principal.identity(true).then(function(account) {\n                    // After the login the language will be changed to\n                    // the language selected by the user during his registration\n                    if (account!== null) {\n                        // $translate.use(account.langKey).then(function () {\n                        //     $translate.refresh();\n                        // });\n                    }\n                    JhiTrackerService.sendActivity();\n                    deferred.resolve(data);\n                });\n                return cb();\n            }\n\n            return deferred.promise;\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            return AuthServerProvider.loginWithToken(jwt, rememberMe);\n        }\n\n        function logout () {\n            AuthServerProvider.logout();\n            Principal.authenticate(null);\n\n            // Reset state memory if not redirected\n            if(!$rootScope.redirected) {\n                $rootScope.previousStateName = undefined;\n                $rootScope.previousStateNameParams = undefined;\n            }\n        }\n\n        function resetPasswordFinish (keyAndPassword, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetFinish.save(keyAndPassword, function () {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function resetPasswordInit (mail, callback) {\n            var cb = callback || angular.noop;\n\n            return PasswordResetInit.save(mail, function() {\n                return cb();\n            }, function (err) {\n                return cb(err);\n            }).$promise;\n        }\n\n        function updateAccount (account, callback) {\n            var cb = callback || angular.noop;\n\n            return Account.save(account,\n                function () {\n                    return cb(account);\n                },\n                function (err) {\n                    return cb(err);\n                }.bind(this)).$promise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('AuthServerProvider', AuthServerProvider);\n\n    AuthServerProvider.$inject = ['$http', '$localStorage', '$sessionStorage', '$q'];\n\n    function AuthServerProvider ($http, $localStorage, $sessionStorage, $q) {\n        var service = {\n            getToken: getToken,\n            hasValidToken: hasValidToken,\n            login: login,\n            loginWithToken: loginWithToken,\n            storeAuthenticationToken: storeAuthenticationToken,\n            logout: logout\n        };\n\n        return service;\n\n        function getToken () {\n            return $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n        }\n\n        function hasValidToken () {\n            var token = this.getToken();\n            return token && token.expires && token.expires > new Date().getTime();\n        }\n\n        function login (credentials) {\n            var data = {\n                username: credentials.username,\n                password: credentials.password,\n                rememberMe: credentials.rememberMe\n            };\n            return $http.post('api/authenticate', data).success(authenticateSuccess);\n\n            function authenticateSuccess (data, status, headers) {\n                var bearerToken = headers('Authorization');\n                if (angular.isDefined(bearerToken) && bearerToken.slice(0, 7) === 'Bearer ') {\n                    var jwt = bearerToken.slice(7, bearerToken.length);\n                    service.storeAuthenticationToken(jwt, credentials.rememberMe);\n                    return jwt;\n                }\n            }\n        }\n\n        function loginWithToken(jwt, rememberMe) {\n            var deferred = $q.defer();\n\n            if (jwt !== undefined) {\n                this.storeAuthenticationToken(jwt, rememberMe);\n                deferred.resolve(jwt);\n            }\n            else {\n                deferred.reject();\n            }\n\n            return deferred.promise;\n        }\n\n        function storeAuthenticationToken(jwt, rememberMe) {\n            if(rememberMe){\n                $localStorage.authenticationToken = jwt;\n            } else {\n                $sessionStorage.authenticationToken = jwt;\n            }\n        }\n\n        function logout () {\n            delete $localStorage.authenticationToken;\n            delete $sessionStorage.authenticationToken;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Activate', Activate);\n\n    Activate.$inject = ['$resource'];\n\n    function Activate ($resource) {\n        var service = $resource('api/activate', {}, {\n            'get': { method: 'GET', params: {}, isArray: false}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Account', Account);\n\n    Account.$inject = ['$resource'];\n\n    function Account ($resource) {\n        var service = $resource('api/account', {}, {\n            'get': { method: 'GET', params: {}, isArray: false,\n                interceptor: {\n                    response: function(response) {\n                        // expose response\n                        return response;\n                    }\n                }\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('NavbarController', NavbarController);\n\n    NavbarController.$inject = ['$location', '$state', 'Auth', 'Principal', 'ENV', 'LoginService'];\n\n    function NavbarController ($location, $state, Auth, Principal, ENV, LoginService) {\n        var vm = this;\n\n        vm.navCollapsed = true;\n        vm.isAuthenticated = Principal.isAuthenticated;\n        vm.inProduction = ENV === 'prod';\n        vm.login = login;\n        vm.logout = logout;\n        vm.$state = $state;\n\n        function login () {\n            LoginService.open();\n        }\n\n        function logout () {\n            Auth.logout();\n            $state.go('home');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('activeMenu', activeMenu);\n\n    function activeMenu($translate, $locale, tmhDynamicLocale) {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var language = attrs.activeMenu;\n\n            scope.$watch(function() {\n                return $translate.use();\n            }, function(selectedLanguage) {\n                if (language === selectedLanguage) {\n                    tmhDynamicLocale.set(language);\n                    element.addClass('active');\n                } else {\n                    element.removeClass('active');\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('activeLink', activeLink);\n\n    function activeLink() {\n        var directive = {\n            restrict: 'A',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs) {\n            var clazz = attrs.activeLink;\n            var path = attrs.href;\n            path = path.substring(1); //hack because path does bot return including hashbang\n            scope.location = location;\n            scope.$watch('location.path()', function(newPath) {\n                if (path === newPath) {\n                    element.addClass(clazz);\n                } else {\n                    element.removeClass(clazz);\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('error', {\n                parent: 'app',\n                url: '/error',\n                data: {\n                    authorities: [],\n                    pageTitle: 'error.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/error.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('accessdenied', {\n                parent: 'app',\n                url: '/accessdenied',\n                data: {\n                    authorities: []\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/layouts/error/accessdenied.html'\n                    }\n                },\n                resolve: {\n                    mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                        $translatePartialLoader.addPart('error');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('work-list-follow', {\n            parent: 'entity',\n            url: '/work-list-follow',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.workListFollow.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/work-list-follow/work-list-follows.html',\n                    controller: 'WorkListFollowController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('workListFollow');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('work-list-follow-detail', {\n            parent: 'entity',\n            url: '/work-list-follow/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.workListFollow.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/work-list-follow/work-list-follow-detail.html',\n                    controller: 'WorkListFollowDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('workListFollow');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'WorkListFollow', function($stateParams, WorkListFollow) {\n                    return WorkListFollow.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('work-list-follow.new', {\n            parent: 'work-list-follow',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list-follow/work-list-follow-dialog.html',\n                    controller: 'WorkListFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                createtime: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('work-list-follow', null, { reload: true });\n                }, function() {\n                    $state.go('work-list-follow');\n                });\n            }]\n        })\n        .state('work-list-follow.edit', {\n            parent: 'work-list-follow',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list-follow/work-list-follow-dialog.html',\n                    controller: 'WorkListFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['WorkListFollow', function(WorkListFollow) {\n                            return WorkListFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('work-list-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('work-list-follow.delete', {\n            parent: 'work-list-follow',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list-follow/work-list-follow-delete-dialog.html',\n                    controller: 'WorkListFollowDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['WorkListFollow', function(WorkListFollow) {\n                            return WorkListFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('work-list-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('WorkListFollow', WorkListFollow);\n\n    WorkListFollow.$inject = ['$resource', 'DateUtils'];\n\n    function WorkListFollow ($resource, DateUtils) {\n        var resourceUrl =  'api/work-list-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.createtime = DateUtils.convertLocalDateFromServer(data.createtime);\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('WorkListFollowSearch', WorkListFollowSearch);\n\n    WorkListFollowSearch.$inject = ['$resource'];\n\n    function WorkListFollowSearch($resource) {\n        var resourceUrl =  'api/_search/work-list-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListFollowController', WorkListFollowController);\n\n    WorkListFollowController.$inject = ['$scope', '$state', 'WorkListFollow', 'WorkListFollowSearch'];\n\n    function WorkListFollowController ($scope, $state, WorkListFollow, WorkListFollowSearch) {\n        var vm = this;\n        vm.workListFollows = [];\n        vm.loadAll = function() {\n            WorkListFollow.query(function(result) {\n                vm.workListFollows = result;\n            });\n        };\n\n        vm.search = function () {\n            if (!vm.searchQuery) {\n                return vm.loadAll();\n            }\n            WorkListFollowSearch.query({query: vm.searchQuery}, function(result) {\n                vm.workListFollows = result;\n            });\n        };\n        vm.loadAll();\n        \n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListFollowDialogController', WorkListFollowDialogController);\n\n    WorkListFollowDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', '$q', 'entity', 'WorkListFollow', 'WorkList', 'User'];\n\n    function WorkListFollowDialogController ($scope, $stateParams, $uibModalInstance, $q, entity, WorkListFollow, WorkList, User) {\n        var vm = this;\n        vm.workListFollow = entity;\n        vm.worklists = WorkList.query();\n        vm.users = User.query();\n        vm.load = function(id) {\n            WorkListFollow.get({id : id}, function(result) {\n                vm.workListFollow = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:workListFollowUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.workListFollow.id !== null) {\n                WorkListFollow.update(vm.workListFollow, onSaveSuccess, onSaveError);\n            } else {\n                WorkListFollow.save(vm.workListFollow, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.createtime = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListFollowDetailController', WorkListFollowDetailController);\n\n    WorkListFollowDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'WorkListFollow', 'WorkList', 'User'];\n\n    function WorkListFollowDetailController($scope, $rootScope, $stateParams, entity, WorkListFollow, WorkList, User) {\n        var vm = this;\n        vm.workListFollow = entity;\n        vm.load = function (id) {\n            WorkListFollow.get({id: id}, function(result) {\n                vm.workListFollow = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:workListFollowUpdate', function(event, result) {\n            vm.workListFollow = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListFollowDeleteController',WorkListFollowDeleteController);\n\n    WorkListFollowDeleteController.$inject = ['$uibModalInstance', 'entity', 'WorkListFollow'];\n\n    function WorkListFollowDeleteController($uibModalInstance, entity, WorkListFollow) {\n        var vm = this;\n        vm.workListFollow = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            WorkListFollow.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('work-list', {\n            parent: 'entity',\n            url: '/work-list?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.workList.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/work-list/work-lists.html',\n                    controller: 'WorkListController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('workList');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('work-list-detail', {\n            parent: 'entity',\n            url: '/work-list/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.workList.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/work-list/work-list-detail.html',\n                    controller: 'WorkListDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('workList');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'WorkList', function($stateParams, WorkList) {\n                    return WorkList.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('work-list.new', {\n            parent: 'work-list',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list/work-list-dialog.html',\n                    controller: 'WorkListDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                content: null,\n                                url: null,\n                                createtime: null,\n                                userId: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('work-list', null, { reload: true });\n                }, function() {\n                    $state.go('work-list');\n                });\n            }]\n        })\n        .state('work-list.edit', {\n            parent: 'work-list',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list/work-list-dialog.html',\n                    controller: 'WorkListDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['WorkList', function(WorkList) {\n                            return WorkList.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('work-list', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('work-list.delete', {\n            parent: 'work-list',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/work-list/work-list-delete-dialog.html',\n                    controller: 'WorkListDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['WorkList', function(WorkList) {\n                            return WorkList.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('work-list', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('WorkList', WorkList);\n\n    WorkList.$inject = ['$resource', 'DateUtils'];\n\n    function WorkList ($resource, DateUtils) {\n        var resourceUrl =  'api/work-lists/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.createtime = DateUtils.convertLocalDateFromServer(data.createtime);\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('WorkListSearch', WorkListSearch);\n\n    WorkListSearch.$inject = ['$resource'];\n\n    function WorkListSearch($resource) {\n        var resourceUrl =  'api/_search/work-lists/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListController', WorkListController);\n\n    WorkListController.$inject = ['$scope', '$state', 'DataUtils', 'WorkList', 'WorkListSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function WorkListController ($scope, $state, DataUtils, WorkList, WorkListSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.openFile = DataUtils.openFile;\n        vm.byteSize = DataUtils.byteSize;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                WorkListSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                WorkList.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.workLists = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListDialogController', WorkListDialogController);\n\n    WorkListDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'DataUtils', 'entity', 'WorkList'];\n\n    function WorkListDialogController ($scope, $stateParams, $uibModalInstance, DataUtils, entity, WorkList) {\n        var vm = this;\n        vm.workList = entity;\n        vm.load = function(id) {\n            WorkList.get({id : id}, function(result) {\n                vm.workList = result;\n            });\n        };\n\n        vm.workMap = {\n            status : [\n                {id: 0, name: '正常'},\n                {id: 1, name: '私有'},\n                {id: 2, name: '删除'}\n            ]\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:workListUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.workList.id !== null) {\n                WorkList.update(vm.workList, onSaveSuccess, onSaveError);\n            } else {\n                WorkList.save(vm.workList, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.createtime = false;\n\n        vm.openFile = DataUtils.openFile;\n        vm.byteSize = DataUtils.byteSize;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListDetailController', WorkListDetailController);\n\n    WorkListDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'DataUtils', 'entity', 'WorkList'];\n\n    function WorkListDetailController($scope, $rootScope, $stateParams, DataUtils, entity, WorkList) {\n        var vm = this;\n        vm.workList = entity;\n        vm.load = function (id) {\n            WorkList.get({id: id}, function(result) {\n                vm.workList = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:workListUpdate', function(event, result) {\n            vm.workList = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n        vm.byteSize = DataUtils.byteSize;\n        vm.openFile = DataUtils.openFile;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('WorkListDeleteController',WorkListDeleteController);\n\n    WorkListDeleteController.$inject = ['$uibModalInstance', 'entity', 'WorkList'];\n\n    function WorkListDeleteController($uibModalInstance, entity, WorkList) {\n        var vm = this;\n        vm.workList = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            WorkList.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('stages-follow', {\n            parent: 'entity',\n            url: '/stages-follow?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.stagesFollow.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/stages-follow/stages-follows.html',\n                    controller: 'StagesFollowController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('stagesFollow');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('stages-follow-detail', {\n            parent: 'entity',\n            url: '/stages-follow/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.stagesFollow.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/stages-follow/stages-follow-detail.html',\n                    controller: 'StagesFollowDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('stagesFollow');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'StagesFollow', function($stateParams, StagesFollow) {\n                    return StagesFollow.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('stages-follow.new', {\n            parent: 'stages-follow',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages-follow/stages-follow-dialog.html',\n                    controller: 'StagesFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                musixiserUid: null,\n                                audienceUid: null,\n                                stagesId: null,\n                                timestamp: null,\n                                updatetime: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('stages-follow', null, { reload: true });\n                }, function() {\n                    $state.go('stages-follow');\n                });\n            }]\n        })\n        .state('stages-follow.edit', {\n            parent: 'stages-follow',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages-follow/stages-follow-dialog.html',\n                    controller: 'StagesFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['StagesFollow', function(StagesFollow) {\n                            return StagesFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('stages-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('stages-follow.delete', {\n            parent: 'stages-follow',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages-follow/stages-follow-delete-dialog.html',\n                    controller: 'StagesFollowDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['StagesFollow', function(StagesFollow) {\n                            return StagesFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('stages-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('StagesFollow', StagesFollow);\n\n    StagesFollow.$inject = ['$resource', 'DateUtils'];\n\n    function StagesFollow ($resource, DateUtils) {\n        var resourceUrl =  'api/stages-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.timestamp = DateUtils.convertDateTimeFromServer(data.timestamp);\n                    data.updatetime = DateUtils.convertDateTimeFromServer(data.updatetime);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('StagesFollowSearch', StagesFollowSearch);\n\n    StagesFollowSearch.$inject = ['$resource'];\n\n    function StagesFollowSearch($resource) {\n        var resourceUrl =  'api/_search/stages-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesFollowController', StagesFollowController);\n\n    StagesFollowController.$inject = ['$scope', '$state', 'StagesFollow', 'StagesFollowSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function StagesFollowController ($scope, $state, StagesFollow, StagesFollowSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                StagesFollowSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                StagesFollow.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.stagesFollows = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesFollowDialogController', StagesFollowDialogController);\n\n    StagesFollowDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'StagesFollow'];\n\n    function StagesFollowDialogController ($scope, $stateParams, $uibModalInstance, entity, StagesFollow) {\n        var vm = this;\n        vm.stagesFollow = entity;\n        vm.load = function(id) {\n            StagesFollow.get({id : id}, function(result) {\n                vm.stagesFollow = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:stagesFollowUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.stagesFollow.id !== null) {\n                StagesFollow.update(vm.stagesFollow, onSaveSuccess, onSaveError);\n            } else {\n                StagesFollow.save(vm.stagesFollow, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.timestamp = false;\n        vm.datePickerOpenStatus.updatetime = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesFollowDetailController', StagesFollowDetailController);\n\n    StagesFollowDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'StagesFollow'];\n\n    function StagesFollowDetailController($scope, $rootScope, $stateParams, entity, StagesFollow) {\n        var vm = this;\n        vm.stagesFollow = entity;\n        vm.load = function (id) {\n            StagesFollow.get({id: id}, function(result) {\n                vm.stagesFollow = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:stagesFollowUpdate', function(event, result) {\n            vm.stagesFollow = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesFollowDeleteController',StagesFollowDeleteController);\n\n    StagesFollowDeleteController.$inject = ['$uibModalInstance', 'entity', 'StagesFollow'];\n\n    function StagesFollowDeleteController($uibModalInstance, entity, StagesFollow) {\n        var vm = this;\n        vm.stagesFollow = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            StagesFollow.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('stages', {\n            parent: 'entity',\n            url: '/stages?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.stages.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/stages/stages.html',\n                    controller: 'StagesController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('stages');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('stages-detail', {\n            parent: 'entity',\n            url: '/stages/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.stages.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/stages/stages-detail.html',\n                    controller: 'StagesDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('stages');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Stages', function($stateParams, Stages) {\n                    return Stages.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('stages.new', {\n            parent: 'stages',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages/stages-dialog.html',\n                    controller: 'StagesDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                status: null,\n                                createtime: null,\n                                userId: null,\n                                audienceNum: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('stages', null, { reload: true });\n                }, function() {\n                    $state.go('stages');\n                });\n            }]\n        })\n        .state('stages.edit', {\n            parent: 'stages',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages/stages-dialog.html',\n                    controller: 'StagesDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Stages', function(Stages) {\n                            return Stages.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('stages', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('stages.delete', {\n            parent: 'stages',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/stages/stages-delete-dialog.html',\n                    controller: 'StagesDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Stages', function(Stages) {\n                            return Stages.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('stages', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('Stages', Stages);\n\n    Stages.$inject = ['$resource', 'DateUtils'];\n\n    function Stages ($resource, DateUtils) {\n        var resourceUrl =  'api/stages/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    data.createtime = DateUtils.convertLocalDateFromServer(data.createtime);\n                    return data;\n                }\n            },\n            'update': {\n                method: 'PUT',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            },\n            'save': {\n                method: 'POST',\n                transformRequest: function (data) {\n                    data.createtime = DateUtils.convertLocalDateToServer(data.createtime);\n                    return angular.toJson(data);\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('StagesSearch', StagesSearch);\n\n    StagesSearch.$inject = ['$resource'];\n\n    function StagesSearch($resource) {\n        var resourceUrl =  'api/_search/stages/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesController', StagesController);\n\n    StagesController.$inject = ['$scope', '$state', 'Stages', 'StagesSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function StagesController ($scope, $state, Stages, StagesSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                StagesSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Stages.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.stages = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesDialogController', StagesDialogController);\n\n    StagesDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'Stages'];\n\n    function StagesDialogController ($scope, $stateParams, $uibModalInstance, entity, Stages) {\n        var vm = this;\n        vm.stages = entity;\n        vm.load = function(id) {\n            Stages.get({id : id}, function(result) {\n                vm.stages = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:stagesUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.stages.id !== null) {\n                Stages.update(vm.stages, onSaveSuccess, onSaveError);\n            } else {\n                Stages.save(vm.stages, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n\n        vm.datePickerOpenStatus = {};\n        vm.datePickerOpenStatus.createtime = false;\n\n        vm.openCalendar = function(date) {\n            vm.datePickerOpenStatus[date] = true;\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesDetailController', StagesDetailController);\n\n    StagesDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Stages'];\n\n    function StagesDetailController($scope, $rootScope, $stateParams, entity, Stages) {\n        var vm = this;\n        vm.stages = entity;\n        vm.load = function (id) {\n            Stages.get({id: id}, function(result) {\n                vm.stages = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:stagesUpdate', function(event, result) {\n            vm.stages = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('StagesDeleteController',StagesDeleteController);\n\n    StagesDeleteController.$inject = ['$uibModalInstance', 'entity', 'Stages'];\n\n    function StagesDeleteController($uibModalInstance, entity, Stages) {\n        var vm = this;\n        vm.stages = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Stages.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('musixiser-follow', {\n            parent: 'entity',\n            url: '/musixiser-follow?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.musixiserFollow.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follows.html',\n                    controller: 'MusixiserFollowController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('musixiserFollow');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('musixiser-follow-detail', {\n            parent: 'entity',\n            url: '/musixiser-follow/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.musixiserFollow.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follow-detail.html',\n                    controller: 'MusixiserFollowDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('musixiserFollow');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'MusixiserFollow', function($stateParams, MusixiserFollow) {\n                    return MusixiserFollow.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('musixiser-follow.new', {\n            parent: 'musixiser-follow',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follow-dialog.html',\n                    controller: 'MusixiserFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                userId: null,\n                                followUid: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser-follow', null, { reload: true });\n                }, function() {\n                    $state.go('musixiser-follow');\n                });\n            }]\n        })\n        .state('musixiser-follow.edit', {\n            parent: 'musixiser-follow',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follow-dialog.html',\n                    controller: 'MusixiserFollowDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['MusixiserFollow', function(MusixiserFollow) {\n                            return MusixiserFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('musixiser-follow.delete', {\n            parent: 'musixiser-follow',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser-follow/musixiser-follow-delete-dialog.html',\n                    controller: 'MusixiserFollowDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['MusixiserFollow', function(MusixiserFollow) {\n                            return MusixiserFollow.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser-follow', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('MusixiserFollow', MusixiserFollow);\n\n    MusixiserFollow.$inject = ['$resource'];\n\n    function MusixiserFollow ($resource) {\n        var resourceUrl =  'api/musixiser-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('MusixiserFollowSearch', MusixiserFollowSearch);\n\n    MusixiserFollowSearch.$inject = ['$resource'];\n\n    function MusixiserFollowSearch($resource) {\n        var resourceUrl =  'api/_search/musixiser-follows/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserFollowController', MusixiserFollowController);\n\n    MusixiserFollowController.$inject = ['$scope', '$state', 'MusixiserFollow', 'MusixiserFollowSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function MusixiserFollowController ($scope, $state, MusixiserFollow, MusixiserFollowSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                MusixiserFollowSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                MusixiserFollow.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.musixiserFollows = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserFollowDialogController', MusixiserFollowDialogController);\n\n    MusixiserFollowDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'MusixiserFollow'];\n\n    function MusixiserFollowDialogController ($scope, $stateParams, $uibModalInstance, entity, MusixiserFollow) {\n        var vm = this;\n        vm.musixiserFollow = entity;\n        vm.load = function(id) {\n            MusixiserFollow.get({id : id}, function(result) {\n                vm.musixiserFollow = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:musixiserFollowUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.musixiserFollow.id !== null) {\n                MusixiserFollow.update(vm.musixiserFollow, onSaveSuccess, onSaveError);\n            } else {\n                MusixiserFollow.save(vm.musixiserFollow, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserFollowDetailController', MusixiserFollowDetailController);\n\n    MusixiserFollowDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'MusixiserFollow'];\n\n    function MusixiserFollowDetailController($scope, $rootScope, $stateParams, entity, MusixiserFollow) {\n        var vm = this;\n        vm.musixiserFollow = entity;\n        vm.load = function (id) {\n            MusixiserFollow.get({id: id}, function(result) {\n                vm.musixiserFollow = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:musixiserFollowUpdate', function(event, result) {\n            vm.musixiserFollow = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserFollowDeleteController',MusixiserFollowDeleteController);\n\n    MusixiserFollowDeleteController.$inject = ['$uibModalInstance', 'entity', 'MusixiserFollow'];\n\n    function MusixiserFollowDeleteController($uibModalInstance, entity, MusixiserFollow) {\n        var vm = this;\n        vm.musixiserFollow = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            MusixiserFollow.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('musixiser', {\n            parent: 'entity',\n            url: '/musixiser?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.musixiser.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/musixiser/musixisers.html',\n                    controller: 'MusixiserController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('musixiser');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('musixiser-detail', {\n            parent: 'entity',\n            url: '/musixiser/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.musixiser.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/musixiser/musixiser-detail.html',\n                    controller: 'MusixiserDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('musixiser');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Musixiser', function($stateParams, Musixiser) {\n                    return Musixiser.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('musixiser.new', {\n            parent: 'musixiser',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser/musixiser-dialog.html',\n                    controller: 'MusixiserDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                realname: null,\n                                tel: null,\n                                email: null,\n                                birth: null,\n                                gender: null,\n                                smallAvatar: null,\n                                largeAvatar: null,\n                                nation: null,\n                                isMaster: null,\n                                userId: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser', null, { reload: true });\n                }, function() {\n                    $state.go('musixiser');\n                });\n            }]\n        })\n        .state('musixiser.edit', {\n            parent: 'musixiser',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser/musixiser-dialog.html',\n                    controller: 'MusixiserDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Musixiser', function(Musixiser) {\n                            return Musixiser.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('musixiser.delete', {\n            parent: 'musixiser',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/musixiser/musixiser-delete-dialog.html',\n                    controller: 'MusixiserDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Musixiser', function(Musixiser) {\n                            return Musixiser.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('musixiser', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('Musixiser', Musixiser);\n\n    Musixiser.$inject = ['$resource'];\n\n    function Musixiser ($resource) {\n        var resourceUrl =  'api/musixisers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('MusixiserSearch', MusixiserSearch);\n\n    MusixiserSearch.$inject = ['$resource'];\n\n    function MusixiserSearch($resource) {\n        var resourceUrl =  'api/_search/musixisers/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserController', MusixiserController);\n\n    MusixiserController.$inject = ['$scope', '$state', 'Musixiser', 'MusixiserSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function MusixiserController ($scope, $state, Musixiser, MusixiserSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                MusixiserSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Musixiser.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.musixisers = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserDialogController', MusixiserDialogController);\n\n    MusixiserDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'Musixiser'];\n\n    function MusixiserDialogController ($scope, $stateParams, $uibModalInstance, entity, Musixiser) {\n        var vm = this;\n        vm.musixiser = entity;\n        vm.load = function(id) {\n            Musixiser.get({id : id}, function(result) {\n                vm.musixiser = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:musixiserUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.musixiser.id !== null) {\n                Musixiser.update(vm.musixiser, onSaveSuccess, onSaveError);\n            } else {\n                Musixiser.save(vm.musixiser, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserDetailController', MusixiserDetailController);\n\n    MusixiserDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Musixiser'];\n\n    function MusixiserDetailController($scope, $rootScope, $stateParams, entity, Musixiser) {\n        var vm = this;\n        vm.musixiser = entity;\n        vm.load = function (id) {\n            Musixiser.get({id: id}, function(result) {\n                vm.musixiser = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:musixiserUpdate', function(event, result) {\n            vm.musixiser = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('MusixiserDeleteController',MusixiserDeleteController);\n\n    MusixiserDeleteController.$inject = ['$uibModalInstance', 'entity', 'Musixiser'];\n\n    function MusixiserDeleteController($uibModalInstance, entity, Musixiser) {\n        var vm = this;\n        vm.musixiser = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Musixiser.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n            .state('config', {\n                parent: 'entity',\n                url: '/config?page&sort&search',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: '配置管理'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/config/configs.html',\n                        controller: 'ConfigController',\n                        controllerAs: 'vm'\n                    }\n                },\n                params: {\n                    page: {\n                        value: '1',\n                        squash: true\n                    },\n                    sort: {\n                        value: 'id,asc',\n                        squash: true\n                    },\n                    search: null\n                },\n                resolve: {\n                    pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                        return {\n                            page: PaginationUtil.parsePage($stateParams.page),\n                            sort: $stateParams.sort,\n                            predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                            ascending: PaginationUtil.parseAscending($stateParams.sort),\n                            search: $stateParams.search\n                        };\n                    }],\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        //$translatePartialLoader.addPart('config');\n                        $translatePartialLoader.addPart('global');\n                        return $translate.refresh();\n                    }]\n                }\n            })\n            .state('config-detail', {\n                parent: 'entity',\n                url: '/musixiser/{id}',\n                data: {\n                    authorities: ['ROLE_USER'],\n                    pageTitle: 'musixiseApp.musixiser.detail.title'\n                },\n                views: {\n                    'content@': {\n                        templateUrl: 'app/entities/musixiser/musixiser-detail.html',\n                        controller: 'MusixiserDetailController',\n                        controllerAs: 'vm'\n                    }\n                },\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('musixiser');\n                        return $translate.refresh();\n                    }],\n                    entity: ['$stateParams', 'Musixiser', function($stateParams, Musixiser) {\n                        return Musixiser.get({id : $stateParams.id});\n                    }]\n                }\n            })\n            .state('config.new', {\n                parent: 'config',\n                url: '/new',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/config/config-dialog.html',\n                        controller: 'ConfigDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: function () {\n                                return {\n                                    ckey: null,\n                                    cval: null,\n                                    id: null\n                                };\n                            }\n                        }\n                    }).result.then(function() {\n                        $state.go('config', null, { reload: true });\n                    }, function() {\n                        $state.go('config');\n                    });\n                }]\n            })\n            .state('config.edit', {\n                parent: 'config',\n                url: '/{id}/edit',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/config/config-dialog.html',\n                        controller: 'ConfigDialogController',\n                        controllerAs: 'vm',\n                        backdrop: 'static',\n                        size: 'lg',\n                        resolve: {\n                            entity: ['Config', function(Config) {\n                                return Config.get({id : $stateParams.id});\n                            }]\n                        }\n                    }).result.then(function() {\n                        $state.go('config', null, { reload: true });\n                    }, function() {\n                        $state.go('^');\n                    });\n                }]\n            })\n            .state('config.delete', {\n                parent: 'config',\n                url: '/{id}/delete',\n                data: {\n                    authorities: ['ROLE_USER']\n                },\n                onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                    $uibModal.open({\n                        templateUrl: 'app/entities/config/config-delete-dialog.html',\n                        controller: 'ConfigDeleteController',\n                        controllerAs: 'vm',\n                        size: 'md',\n                        resolve: {\n                            entity: ['Config', function(Config) {\n                                return Config.get({id : $stateParams.id});\n                            }]\n                        }\n                    }).result.then(function() {\n                        $state.go('config', null, { reload: true });\n                    }, function() {\n                        $state.go('^');\n                    });\n                }]\n            });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('Config', Config);\n\n    Config.$inject = ['$resource'];\n\n    function Config ($resource) {\n        var resourceUrl =  'api/config-lists/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ConfigController', ConfigController);\n\n    ConfigController.$inject = ['$scope', '$state', 'Config', 'MusixiserSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function ConfigController ($scope, $state, Config, MusixiserSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                MusixiserSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Config.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.config = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ConfigDialogController', ConfigDialogController);\n\n    ConfigDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'Config'];\n\n    function ConfigDialogController ($scope, $stateParams, $uibModalInstance, entity, Config) {\n        var vm = this;\n        vm.config = entity;\n        vm.load = function(id) {\n            Config.get({id : id}, function(result) {\n                vm.config = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:musixiserUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.config.id !== null) {\n                Config.update(vm.config, onSaveSuccess, onSaveError);\n            } else {\n                Config.save(vm.config, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ConfigDeleteController',ConfigDeleteController);\n\n    ConfigDeleteController.$inject = ['$uibModalInstance', 'entity', 'Config'];\n\n    function ConfigDeleteController($uibModalInstance, entity, Config) {\n        var vm = this;\n        vm.config = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Config.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('audience', {\n            parent: 'entity',\n            url: '/audience?page&sort&search',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.audience.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/audience/audiences.html',\n                    controller: 'AudienceController',\n                    controllerAs: 'vm'\n                }\n            },\n            params: {\n                page: {\n                    value: '1',\n                    squash: true\n                },\n                sort: {\n                    value: 'id,asc',\n                    squash: true\n                },\n                search: null\n            },\n            resolve: {\n                pagingParams: ['$stateParams', 'PaginationUtil', function ($stateParams, PaginationUtil) {\n                    return {\n                        page: PaginationUtil.parsePage($stateParams.page),\n                        sort: $stateParams.sort,\n                        predicate: PaginationUtil.parsePredicate($stateParams.sort),\n                        ascending: PaginationUtil.parseAscending($stateParams.sort),\n                        search: $stateParams.search\n                    };\n                }],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audience');\n                    $translatePartialLoader.addPart('global');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('audience-detail', {\n            parent: 'entity',\n            url: '/audience/{id}',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'musixiseApp.audience.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/entities/audience/audience-detail.html',\n                    controller: 'AudienceDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audience');\n                    return $translate.refresh();\n                }],\n                entity: ['$stateParams', 'Audience', function($stateParams, Audience) {\n                    return Audience.get({id : $stateParams.id});\n                }]\n            }\n        })\n        .state('audience.new', {\n            parent: 'audience',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/audience/audience-dialog.html',\n                    controller: 'AudienceDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                nickname: null,\n                                realname: null,\n                                email: null,\n                                tel: null,\n                                userId: null,\n                                id: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('audience', null, { reload: true });\n                }, function() {\n                    $state.go('audience');\n                });\n            }]\n        })\n        .state('audience.edit', {\n            parent: 'audience',\n            url: '/{id}/edit',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/audience/audience-dialog.html',\n                    controller: 'AudienceDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['Audience', function(Audience) {\n                            return Audience.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('audience', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('audience.delete', {\n            parent: 'audience',\n            url: '/{id}/delete',\n            data: {\n                authorities: ['ROLE_USER']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/entities/audience/audience-delete-dialog.html',\n                    controller: 'AudienceDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['Audience', function(Audience) {\n                            return Audience.get({id : $stateParams.id});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('audience', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n\n})();\n","(function() {\n    'use strict';\n    angular\n        .module('musixiseApp')\n        .factory('Audience', Audience);\n\n    Audience.$inject = ['$resource'];\n\n    function Audience ($resource) {\n        var resourceUrl =  'api/audiences/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true},\n            'get': {\n                method: 'GET',\n                transformResponse: function (data) {\n                    data = angular.fromJson(data);\n                    return data;\n                }\n            },\n            'update': { method:'PUT' }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('AudienceSearch', AudienceSearch);\n\n    AudienceSearch.$inject = ['$resource'];\n\n    function AudienceSearch($resource) {\n        var resourceUrl =  'api/_search/audiences/:id';\n\n        return $resource(resourceUrl, {}, {\n            'query': { method: 'GET', isArray: true}\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AudienceController', AudienceController);\n\n    AudienceController.$inject = ['$scope', '$state', 'Audience', 'AudienceSearch', 'ParseLinks', 'AlertService', 'pagingParams', 'paginationConstants'];\n\n    function AudienceController ($scope, $state, Audience, AudienceSearch, ParseLinks, AlertService, pagingParams, paginationConstants) {\n        var vm = this;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.predicate = pagingParams.predicate;\n        vm.reverse = pagingParams.ascending;\n        vm.transition = transition;\n        vm.clear = clear;\n        vm.search = search;\n        vm.searchQuery = pagingParams.search;\n        vm.currentSearch = pagingParams.search;\n        vm.loadAll();\n\n        function loadAll () {\n            if (pagingParams.search) {\n                AudienceSearch.query({\n                    query: pagingParams.search,\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            } else {\n                Audience.query({\n                    page: pagingParams.page - 1,\n                    size: paginationConstants.itemsPerPage,\n                    sort: sort()\n                }, onSuccess, onError);\n            }\n            function sort() {\n                var result = [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')];\n                if (vm.predicate !== 'id') {\n                    result.push('id');\n                }\n                return result;\n            }\n            function onSuccess(data, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.queryCount = vm.totalItems;\n                vm.audiences = data;\n                vm.page = pagingParams.page;\n            }\n            function onError(error) {\n                AlertService.error(error.data.message);\n            }\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.transition();\n        }\n\n        function transition () {\n            $state.transitionTo($state.$current, {\n                page: vm.page,\n                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),\n                search: vm.currentSearch\n            });\n        }\n\n        function search (searchQuery) {\n            if (!searchQuery){\n                return vm.clear();\n            }\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = '_score';\n            vm.reverse = false;\n            vm.currentSearch = searchQuery;\n            vm.transition();\n        }\n\n        function clear () {\n            vm.links = null;\n            vm.page = 1;\n            vm.predicate = 'id';\n            vm.reverse = true;\n            vm.currentSearch = null;\n            vm.transition();\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AudienceDialogController', AudienceDialogController);\n\n    AudienceDialogController.$inject = ['$scope', '$stateParams', '$uibModalInstance', 'entity', 'Audience'];\n\n    function AudienceDialogController ($scope, $stateParams, $uibModalInstance, entity, Audience) {\n        var vm = this;\n        vm.audience = entity;\n        vm.load = function(id) {\n            Audience.get({id : id}, function(result) {\n                vm.audience = result;\n            });\n        };\n\n        var onSaveSuccess = function (result) {\n            $scope.$emit('musixiseApp:audienceUpdate', result);\n            $uibModalInstance.close(result);\n            vm.isSaving = false;\n        };\n\n        var onSaveError = function () {\n            vm.isSaving = false;\n        };\n\n        vm.save = function () {\n            vm.isSaving = true;\n            if (vm.audience.id !== null) {\n                Audience.update(vm.audience, onSaveSuccess, onSaveError);\n            } else {\n                Audience.save(vm.audience, onSaveSuccess, onSaveError);\n            }\n        };\n\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AudienceDetailController', AudienceDetailController);\n\n    AudienceDetailController.$inject = ['$scope', '$rootScope', '$stateParams', 'entity', 'Audience'];\n\n    function AudienceDetailController($scope, $rootScope, $stateParams, entity, Audience) {\n        var vm = this;\n        vm.audience = entity;\n        vm.load = function (id) {\n            Audience.get({id: id}, function(result) {\n                vm.audience = result;\n            });\n        };\n        var unsubscribe = $rootScope.$on('musixiseApp:audienceUpdate', function(event, result) {\n            vm.audience = result;\n        });\n        $scope.$on('$destroy', unsubscribe);\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AudienceDeleteController',AudienceDeleteController);\n\n    AudienceDeleteController.$inject = ['$uibModalInstance', 'entity', 'Audience'];\n\n    function AudienceDeleteController($uibModalInstance, entity, Audience) {\n        var vm = this;\n        vm.audience = entity;\n        vm.clear = function() {\n            $uibModalInstance.dismiss('cancel');\n        };\n        vm.confirmDelete = function (id) {\n            Audience.delete({id: id},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        };\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .filter('words', words);\n\n    function words() {\n        return wordsFilter;\n\n        function wordsFilter(input, words) {\n            if (isNaN(words)) {\n                return input;\n            }\n            if (words <= 0) {\n                return '';\n            }\n            if (input) {\n                var inputWords = input.split(/\\s+/);\n                if (inputWords.length > words) {\n                    input = inputWords.slice(0, words).join(' ') + '...';\n                }\n            }\n            \n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .filter('characters', characters);\n        \n    function characters () {\n        return charactersFilter;\n\n        function charactersFilter(input, chars, breakOnWord) {\n            if (isNaN(chars)) {\n                return input;\n            }\n            if (chars <= 0) {\n                return '';\n            }\n            if (input && input.length > chars) {\n                input = input.substring(0, chars);\n\n                if (!breakOnWord) {\n                    var lastspace = input.lastIndexOf(' ');\n                    // Get last space\n                    if (lastspace !== -1) {\n                        input = input.substr(0, lastspace);\n                    }\n                } else {\n                    while (input.charAt(input.length-1) === ' ') {\n                        input = input.substr(0, input.length - 1);\n                    }\n                }\n                return input + '...';\n            }\n            return input;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('jhSort', jhSort);\n\n    function jhSort () {\n        var directive = {\n            restrict: 'A',\n            scope: {\n                predicate: '=jhSort',\n                ascending: '=',\n                callback: '&'\n            },\n            controller: SortController,\n            controllerAs: 'vm',\n            bindToController: true\n        };\n\n        return directive;\n    }\n\n    SortController.$inject = ['$scope', '$element'];\n\n    function SortController ($scope, $element) {\n        var vm = this;\n\n        vm.applyClass = applyClass;\n        vm.resetClasses = resetClasses;\n        vm.sort = sort;\n        vm.triggerApply = triggerApply;\n\n        $scope.$watchGroup(['vm.predicate', 'vm.ascending'], vm.triggerApply);\n        vm.triggerApply();\n\n        function applyClass (element) {\n            var thisIcon = element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt',\n                remove = sortIcon + ' ' + sortDesc,\n                add = sortAsc;\n            if (!vm.ascending) {\n                remove = sortIcon + ' ' + sortAsc;\n                add = sortDesc;\n            }\n            vm.resetClasses();\n            thisIcon.removeClass(remove);\n            thisIcon.addClass(add);\n        }\n\n        function resetClasses () {\n            var allThIcons = $element.find('span.glyphicon'),\n                sortIcon = 'glyphicon-sort',\n                sortAsc = 'glyphicon-sort-by-attributes',\n                sortDesc = 'glyphicon-sort-by-attributes-alt';\n            allThIcons.removeClass(sortAsc + ' ' + sortDesc);\n            allThIcons.addClass(sortIcon);\n        }\n\n        function sort (field) {\n            if (field !== vm.predicate) {\n                vm.ascending = true;\n            } else {\n                vm.ascending = !vm.ascending;\n            }\n            vm.predicate = field;\n            $scope.$apply();\n            vm.callback();\n        }\n\n        function triggerApply (values)  {\n            vm.resetClasses();\n            if (values && values[0] !== '_score') {\n                vm.applyClass($element.find('th[jh-sort-by=\\'' + values[0] + '\\']'));\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('jhSortBy', jhSortBy);\n\n    function jhSortBy() {\n        var directive = {\n            restrict: 'A',\n            scope: false,\n            require: '^jhSort',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc(scope, element, attrs, parentCtrl) {\n            element.bind('click', function () {\n                parentCtrl.sort(attrs.jhSortBy);\n            });\n        }\n    }\n})();\n","(function(){\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('ParseLinks', ParseLinks);\n\n    function ParseLinks () {\n\n        var service = {\n            parse : parse\n        };\n\n        return service;\n\n        function parse (header) {\n            if (header.length === 0) {\n                throw new Error('input must not be of zero length');\n            }\n\n            // Split parts by comma\n            var parts = header.split(',');\n            var links = {};\n            // Parse each part into a named link\n            angular.forEach(parts, function (p) {\n                var section = p.split(';');\n                if (section.length !== 2) {\n                    throw new Error('section could not be split on \";\"');\n                }\n                var url = section[0].replace(/<(.*)>/, '$1').trim();\n                var queryString = {};\n                url.replace(\n                    new RegExp('([^?=&]+)(=([^&]*))?', 'g'),\n                    function($0, $1, $2, $3) { queryString[$1] = $3; }\n                );\n                var page = queryString.page;\n                if( angular.isString(page) ) {\n                    page = parseInt(page);\n                }\n                var name = section[1].replace(/rel=\"(.*)\"/, '$1').trim();\n                links[name] = page;\n            });\n\n            return links;\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('PaginationUtil', PaginationUtil);\n\n    function PaginationUtil () {\n\n        var service = {\n            parseAscending : parseAscending,\n            parsePage : parsePage,\n            parsePredicate : parsePredicate\n        };\n\n        return service;\n\n        function parseAscending (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                return sort.split(',').slice(-1)[0] === 'asc';\n            } else {\n                // default to true if no sort defined\n                return true;\n            }\n        }\n\n        // query params are strings, and need to be parsed\n        function parsePage (page) {\n            return parseInt(page);\n        }\n\n        // sort can be in the format `id,asc` or `id`\n        function parsePredicate (sort) {\n            var sortArray = sort.split(',');\n            if (sortArray.length > 1){\n                sortArray.pop();\n            }\n            return sortArray.join(',');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiItemCount = {\n        template: '<div class=\"info\">' +\n                    'Showing {{(($ctrl.page-1) * 20)==0 ? 1:(($ctrl.page-1) * 20)}} - ' +\n                    '{{($ctrl.page * 20) < $ctrl.queryCount ? ($ctrl.page * 20) : $ctrl.queryCount}} ' +\n                    'of {{$ctrl.queryCount}} items.' +\n                '</div>',\n        bindings: {\n            page: '<',\n            queryCount: '<total'\n        }\n    };\n\n    angular\n        .module('musixiseApp')\n        .component('jhiItemCount', jhiItemCount);\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('DateUtils', DateUtils);\n\n    DateUtils.$inject = ['$filter'];\n\n    function DateUtils ($filter) {\n\n        var service = {\n            convertDateTimeFromServer : convertDateTimeFromServer,\n            convertLocalDateFromServer : convertLocalDateFromServer,\n            convertLocalDateToServer : convertLocalDateToServer,\n            dateformat : dateformat\n        };\n\n        return service;\n\n        function convertDateTimeFromServer (date) {\n            if (date) {\n                return new Date(date);\n            } else {\n                return null;\n            }\n        }\n\n        function convertLocalDateFromServer (date) {\n            if (date) {\n                var dateString = date.split('-');\n                return new Date(dateString[0], dateString[1] - 1, dateString[2]);\n            }\n            return null;\n        }\n\n        function convertLocalDateToServer (date) {\n            if (date) {\n                return $filter('date')(date, 'yyyy-MM-dd');\n            } else {\n                return null;\n            }\n        }\n\n        function dateformat () {\n            return 'yyyy-MM-dd';\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('DataUtils', DataUtils);\n\n    DataUtils.$inject = ['$window'];\n\n    function DataUtils ($window) {\n\n        var service = {\n            abbreviate: abbreviate,\n            byteSize: byteSize,\n            openFile: openFile,\n            toBase64: toBase64\n        };\n\n        return service;\n\n        function abbreviate (text) {\n            if (!angular.isString(text)) {\n                return '';\n            }\n            if (text.length < 30) {\n                return text;\n            }\n            return text ? (text.substring(0, 15) + '...' + text.slice(-10)) : '';\n        }\n\n        function byteSize (base64String) {\n            if (!angular.isString(base64String)) {\n                return '';\n            }\n\n            function endsWith(suffix, str) {\n                return str.indexOf(suffix, str.length - suffix.length) !== -1;\n            }\n\n            function paddingSize(base64String) {\n                if (endsWith('==', base64String)) {\n                    return 2;\n                }\n                if (endsWith('=', base64String)) {\n                    return 1;\n                }\n                return 0;\n            }\n\n            function size(base64String) {\n                return base64String.length / 4 * 3 - paddingSize(base64String);\n            }\n\n            function formatAsBytes(size) {\n                return size.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ') + ' bytes';\n            }\n\n            return formatAsBytes(size(base64String));\n        }\n\n        function openFile (type, data) {\n            $window.open('data:' + type + ';base64,' + data, '_blank', 'height=300,width=400');\n        }\n\n        function toBase64 (file, cb) {\n            var fileReader = new FileReader();\n            fileReader.readAsDataURL(file);\n            fileReader.onload = function (e) {\n                var base64Data = e.target.result.substr(e.target.result.indexOf('base64,') + 'base64,'.length);\n                cb(base64Data);\n            };\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .filter('capitalize', capitalize);\n\n    function capitalize() {\n        return capitalizeFilter;\n\n        function capitalizeFilter (input) {\n            if (input !== null) {\n                input = input.toLowerCase();\n            }\n            return input.substring(0, 1).toUpperCase() + input.substring(1);\n        }\n    }\n})();\n","(function() {\n    /*jshint bitwise: false*/\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('Base64', Base64);\n\n    function Base64 () {\n        var keyStr = 'ABCDEFGHIJKLMNOP' +\n            'QRSTUVWXYZabcdef' +\n            'ghijklmnopqrstuv' +\n            'wxyz0123456789+/' +\n            '=';\n\n        var service = {\n            decode : decode,\n            encode : encode\n        };\n\n        return service;\n\n        function encode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            while (i < input.length) {\n                chr1 = input.charCodeAt(i++);\n                chr2 = input.charCodeAt(i++);\n                chr3 = input.charCodeAt(i++);\n\n                enc1 = chr1 >> 2;\n                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);\n                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);\n                enc4 = chr3 & 63;\n\n                if (isNaN(chr2)) {\n                    enc3 = enc4 = 64;\n                } else if (isNaN(chr3)) {\n                    enc4 = 64;\n                }\n\n                output = output +\n                    keyStr.charAt(enc1) +\n                    keyStr.charAt(enc2) +\n                    keyStr.charAt(enc3) +\n                    keyStr.charAt(enc4);\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n\n            return output;\n        }\n\n        function decode (input) {\n            var output = '',\n                chr1, chr2, chr3 = '',\n                enc1, enc2, enc3, enc4 = '',\n                i = 0;\n\n            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =\n            input = input.replace(/[^A-Za-z0-9\\+\\/\\=]/g, '');\n\n            while (i < input.length) {\n                enc1 = keyStr.indexOf(input.charAt(i++));\n                enc2 = keyStr.indexOf(input.charAt(i++));\n                enc3 = keyStr.indexOf(input.charAt(i++));\n                enc4 = keyStr.indexOf(input.charAt(i++));\n\n                chr1 = (enc1 << 2) | (enc2 >> 4);\n                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);\n                chr3 = ((enc3 & 3) << 6) | enc4;\n\n                output = output + String.fromCharCode(chr1);\n\n                if (enc3 !== 64) {\n                    output = output + String.fromCharCode(chr2);\n                }\n                if (enc4 !== 64) {\n                    output = output + String.fromCharCode(chr3);\n                }\n\n                chr1 = chr2 = chr3 = '';\n                enc1 = enc2 = enc3 = enc4 = '';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('LoginService', LoginService);\n\n    LoginService.$inject = ['$uibModal'];\n\n    function LoginService ($uibModal) {\n        var service = {\n            open: open\n        };\n\n        var modalInstance = null;\n        var resetModal = function () {\n            modalInstance = null;\n        };\n\n        return service;\n\n        function open () {\n            if (modalInstance !== null) return;\n            modalInstance = $uibModal.open({\n                animation: true,\n                templateUrl: 'app/components/login/login.html',\n                controller: 'LoginController',\n                controllerAs: 'vm',\n                resolve: {\n                    translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                        $translatePartialLoader.addPart('login');\n                        return $translate.refresh();\n                    }]\n                }\n            });\n            modalInstance.result.then(\n                resetModal,\n                resetModal\n            );\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('LoginController', LoginController);\n\n    LoginController.$inject = ['$rootScope', '$state', '$timeout', 'Auth', '$uibModalInstance'];\n\n    function LoginController ($rootScope,$state, $timeout, Auth, $uibModalInstance) {\n        var vm = this;\n\n        vm.authenticationError = false;\n        vm.cancel = cancel;\n        vm.credentials = {};\n        vm.login = login;\n        vm.password = null;\n        vm.register = register;\n        vm.rememberMe = true;\n        vm.requestResetPassword = requestResetPassword;\n        vm.username = null;\n\n        $timeout(function (){angular.element('[ng-model=\"vm.username\"]').focus();});\n\n        function cancel () {\n            vm.credentials = {\n                username: null,\n                password: null,\n                rememberMe: true\n            };\n            vm.authenticationError = false;\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function login (event) {\n            event.preventDefault();\n            Auth.login({\n                username: vm.username,\n                password: vm.password,\n                rememberMe: vm.rememberMe\n            }).then(function () {\n                vm.authenticationError = false;\n                $uibModalInstance.close();\n                // If we're redirected to login, our\n                // previousState is already set in the authExpiredInterceptor. When login succesful go to stored state\n                if ($rootScope.redirected && $rootScope.previousStateName) {\n                    $state.go($rootScope.previousStateName, $rootScope.previousStateParams);\n                    $rootScope.redirected = false;\n                } else {\n                    $rootScope.$broadcast('authenticationSuccess');\n                }\n            }).catch(function () {\n                vm.authenticationError = true;\n            });\n        }\n\n        function register () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('register');\n        }\n\n        function requestResetPassword () {\n            $uibModalInstance.dismiss('cancel');\n            $state.go('requestReset');\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiLanguageService', JhiLanguageService);\n\n    JhiLanguageService.$inject = ['$q', '$http', '$translate', 'LANGUAGES'];\n\n    function JhiLanguageService ($q, $http, $translate, LANGUAGES) {\n        var service = {\n            getAll: getAll,\n            getCurrent: getCurrent\n        };\n\n        return service;\n\n        function getAll () {\n            var deferred = $q.defer();\n            deferred.resolve(LANGUAGES);\n            return deferred.promise;\n        }\n\n        function getCurrent () {\n            var deferred = $q.defer();\n            var language = $translate.storage().get('NG_TRANSLATE_LANG_KEY');\n\n            deferred.resolve(language);\n\n            return deferred.promise;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .filter('findLanguageFromKey', findLanguageFromKey);\n\n    function findLanguageFromKey() {\n        return findLanguageFromKeyFilter;\n\n        function findLanguageFromKeyFilter(lang) {\n            return {\n                'ca': 'Català',\n                'da': 'Dansk',\n                'de': 'Deutsch',\n                'el': 'Ελληνικά',\n                'en': 'English',\n                'es': 'Español',\n                'fr': 'Français',\n                'gl': 'Galego',\n                'hu': 'Magyar',\n                'hi': 'हिंदी',\n                'it': 'Italiano',\n                'ja': '日本語',\n                'ko': '한국어',\n                'mr': 'मराठी',\n                'nl': 'Nederlands',\n                'pl': 'Polski',\n                'pt-br': 'Português (Brasil)',\n                'pt-pt': 'Português',\n                'ro': 'Română',\n                'ru': 'Русский',\n                'sv': 'Svenska',\n                'ta': 'தமிழ்',\n                'tr': 'Türkçe',\n                'zh-cn': '中文（简体）',\n                'zh-tw': '繁體中文'\n            }[lang];\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiLanguageController', JhiLanguageController);\n\n    JhiLanguageController.$inject = ['$translate', 'JhiLanguageService', 'tmhDynamicLocale'];\n\n    function JhiLanguageController ($translate, JhiLanguageService, tmhDynamicLocale) {\n        var vm = this;\n\n        vm.changeLanguage = changeLanguage;\n        vm.languages = null;\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function changeLanguage (languageKey) {\n            $translate.use(languageKey);\n            tmhDynamicLocale.set(languageKey);\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n\n        /*\n         Languages codes are ISO_639-1 codes, see http://en.wikipedia.org/wiki/List_of_ISO_639-1_codes\n         They are written in English to avoid character encoding issues (not a perfect solution)\n         */\n        .constant('LANGUAGES', [\n            'zh-cn',\n            'en'\n            // jhipster-needle-i18n-language-constant - JHipster will add/remove languages in this array\n        ]\n    );\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(paginationConfig);\n\n    function paginationConfig(uibPaginationConfig, paginationConstants) {\n        uibPaginationConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPaginationConfig.maxSize = 5;\n        uibPaginationConfig.boundaryLinks = true;\n        uibPaginationConfig.firstText = '«';\n        uibPaginationConfig.previousText = '‹';\n        uibPaginationConfig.nextText = '›';\n        uibPaginationConfig.lastText = '»';\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(pagerConfig);\n\n    function pagerConfig(uibPagerConfig, paginationConstants) {\n        uibPagerConfig.itemsPerPage = paginationConstants.itemsPerPage;\n        uibPagerConfig.previousText = '«';\n        uibPagerConfig.nextText = '»';\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('showValidation', showValidation);\n\n    function showValidation () {\n        var directive = {\n            restrict: 'A',\n            require: 'form',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element) {\n            element.find('.form-group').each(function() {\n                var $formGroup = angular.element(this);\n                var $inputs = $formGroup.find('input[ng-model],textarea[ng-model],select[ng-model]');\n\n                if ($inputs.length > 0) {\n                    $inputs.each(function() {\n                        var $input = angular.element(this);\n                        scope.$watch(function() {\n                            return $input.hasClass('ng-invalid') && $input.hasClass('ng-dirty');\n                        }, function(isInvalid) {\n                            $formGroup.toggleClass('has-error', isInvalid);\n                        });\n                    });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .constant('paginationConstants', {\n            'itemsPerPage': 20\n        });\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('minbytes', minbytes);\n\n    function minbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.minbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) >= attrs.minbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('maxbytes', maxbytes);\n\n    function maxbytes () {\n        var directive = {\n            restrict: 'A',\n            require: '?ngModel',\n            link: linkFunc\n        };\n\n        return directive;\n\n        function linkFunc (scope, element, attrs, ngModel) {\n            if (!ngModel) {\n                return;\n            }\n\n            ngModel.$validators.maxbytes = function (modelValue) {\n                return ngModel.$isEmpty(modelValue) || numberOfBytes(modelValue) <= attrs.maxbytes;\n            };\n        }\n\n        function endsWith(suffix, str) {\n            return str.indexOf(suffix, str.length - suffix.length) !== -1;\n        }\n\n        function paddingSize(base64String) {\n            if (endsWith('==', base64String)) {\n                return 2;\n            }\n            if (endsWith('=', base64String)) {\n                return 1;\n            }\n            return 0;\n        }\n\n        function numberOfBytes(base64String) {\n            return base64String.length / 4 * 3 - paddingSize(base64String);\n        }\n    }\n\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .provider('AlertService', AlertService);\n\n    function AlertService () {\n        this.toast = false;\n        /*jshint validthis: true */\n        this.$get = getService;\n\n        this.showAsToast = function(isToast) {\n            this.toast = isToast;\n        };\n\n        getService.$inject = ['$timeout', '$sce', '$translate'];\n\n        function getService ($timeout, $sce,$translate) {\n            var toast = this.toast,\n                alertId = 0, // unique id for each alert. Starts from 0.\n                alerts = [],\n                timeout = 5000; // default timeout\n\n            return {\n                factory: factory,\n                isToast: isToast,\n                add: addAlert,\n                closeAlert: closeAlert,\n                closeAlertByIndex: closeAlertByIndex,\n                clear: clear,\n                get: get,\n                success: success,\n                error: error,\n                info: info,\n                warning : warning\n            };\n\n            function isToast() {\n                return toast;\n            }\n\n            function clear() {\n                alerts = [];\n            }\n\n            function get() {\n                return alerts;\n            }\n\n            function success(msg, params, position) {\n                return this.add({\n                    type: 'success',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function error(msg, params, position) {\n                return this.add({\n                    type: 'danger',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function warning(msg, params, position) {\n                return this.add({\n                    type: 'warning',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function info(msg, params, position) {\n                return this.add({\n                    type: 'info',\n                    msg: msg,\n                    params: params,\n                    timeout: timeout,\n                    toast: toast,\n                    position: position\n                });\n            }\n\n            function factory(alertOptions) {\n                var alert = {\n                    type: alertOptions.type,\n                    msg: $sce.trustAsHtml(alertOptions.msg),\n                    id: alertOptions.alertId,\n                    timeout: alertOptions.timeout,\n                    toast: alertOptions.toast,\n                    position: alertOptions.position ? alertOptions.position : 'top right',\n                    scoped: alertOptions.scoped,\n                    close: function (alerts) {\n                        return closeAlert(this.id, alerts);\n                    }\n                };\n                if(!alert.scoped) {\n                    alerts.push(alert);\n                }\n                return alert;\n            }\n\n            function addAlert(alertOptions, extAlerts) {\n                alertOptions.alertId = alertId++;\n                alertOptions.msg = $translate.instant(alertOptions.msg, alertOptions.params);\n                var that = this;\n                var alert = this.factory(alertOptions);\n                if (alertOptions.timeout && alertOptions.timeout > 0) {\n                    $timeout(function () {\n                        that.closeAlert(alertOptions.alertId, extAlerts);\n                    }, alertOptions.timeout);\n                }\n                return alert;\n            }\n\n            function closeAlert(id, extAlerts) {\n                var thisAlerts = extAlerts ? extAlerts : alerts;\n                return closeAlertByIndex(thisAlerts.map(function(e) { return e.id; }).indexOf(id), thisAlerts);\n            }\n\n            function closeAlertByIndex(index, thisAlerts) {\n                return thisAlerts.splice(index, 1);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlert = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertController\n    };\n\n    angular\n        .module('musixiseApp')\n        .component('jhiAlert', jhiAlert);\n\n    jhiAlertController.$inject = ['$scope', 'AlertService'];\n\n    function jhiAlertController($scope, AlertService) {\n        var vm = this;\n\n        vm.alerts = AlertService.get();\n        $scope.$on('$destroy', function () {\n            vm.alerts = [];\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    var jhiAlertError = {\n        template: '<div class=\"alerts\" ng-cloak=\"\">' +\n                        '<div ng-repeat=\"alert in $ctrl.alerts\" ng-class=\"[alert.position, {\\'toast\\': alert.toast}]\">' +\n                            '<uib-alert ng-cloak=\"\" type=\"{{alert.type}}\" close=\"alert.close($ctrl.alerts)\"><pre>{{ alert.msg }}</pre></uib-alert>' +\n                        '</div>' +\n                  '</div>',\n        controller: jhiAlertErrorController\n    };\n    \n    angular\n        .module('musixiseApp')\n        .component('jhiAlertError', jhiAlertError);\n\n    jhiAlertErrorController.$inject = ['$scope', 'AlertService', '$rootScope', '$translate'];\n\n    function jhiAlertErrorController ($scope, AlertService, $rootScope, $translate) {\n        var vm = this;\n\n        vm.alerts = [];\n\n        function addErrorAlert (message, key, data) {\n            key = key && key !== null ? key : message;\n            vm.alerts.push(\n                AlertService.add(\n                    {\n                        type: 'danger',\n                        msg: key,\n                        params: data,\n                        timeout: 5000,\n                        toast: AlertService.isToast(),\n                        scoped: true\n                    },\n                    vm.alerts\n                )\n            );\n        }\n\n        var cleanHttpErrorListener = $rootScope.$on('musixiseApp.httpError', function (event, httpResponse) {\n            var i;\n            event.stopPropagation();\n            switch (httpResponse.status) {\n            // connection refused, server not reachable\n            case 0:\n                addErrorAlert('Server not reachable','error.server.not.reachable');\n                break;\n\n            case 400:\n                var errorHeader = httpResponse.headers('X-musixiseApp-error');\n                var entityKey = httpResponse.headers('X-musixiseApp-params');\n                if (errorHeader) {\n                    var entityName = $translate.instant('global.menu.entities.' + entityKey);\n                    addErrorAlert(errorHeader, errorHeader, {entityName: entityName});\n                } else if (httpResponse.data && httpResponse.data.fieldErrors) {\n                    for (i = 0; i < httpResponse.data.fieldErrors.length; i++) {\n                        var fieldError = httpResponse.data.fieldErrors[i];\n                        // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it\n                        var convertedField = fieldError.field.replace(/\\[\\d*\\]/g, '[]');\n                        var fieldName = $translate.instant('musixiseApp.' + fieldError.objectName + '.' + convertedField);\n                        addErrorAlert('Field ' + fieldName + ' cannot be empty', 'error.' + fieldError.message, {fieldName: fieldName});\n                    }\n                } else if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message, httpResponse.data.message, httpResponse.data);\n                } else {\n                    addErrorAlert(httpResponse.data);\n                }\n                break;\n\n            default:\n                if (httpResponse.data && httpResponse.data.message) {\n                    addErrorAlert(httpResponse.data.message);\n                } else {\n                    addErrorAlert(angular.toJson(httpResponse));\n                }\n            }\n        });\n\n        $scope.$on('$destroy', function () {\n            if(angular.isDefined(cleanHttpErrorListener) && cleanHttpErrorListener !== null){\n                cleanHttpErrorListener();\n                vm.alerts = [];\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('notificationInterceptor', notificationInterceptor);\n\n    notificationInterceptor.$inject = ['$q', 'AlertService'];\n\n    function notificationInterceptor ($q, AlertService) {\n        var service = {\n            response: response\n        };\n\n        return service;\n\n        function response (response) {\n            var alertKey = response.headers('X-musixiseApp-alert');\n            if (angular.isString(alertKey)) {\n                AlertService.success(alertKey, { param : response.headers('X-musixiseApp-params')});\n            }\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('errorHandlerInterceptor', errorHandlerInterceptor);\n\n    errorHandlerInterceptor.$inject = ['$q', '$rootScope'];\n\n    function errorHandlerInterceptor ($q, $rootScope) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError (response) {\n            if (!(response.status === 401 && (response.data === '' || response.data.path.indexOf('/api/account') === 0 ))) {\n                $rootScope.$emit('musixiseApp.httpError', response);\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('authInterceptor', authInterceptor);\n\n    authInterceptor.$inject = ['$rootScope', '$q', '$location', '$localStorage', '$sessionStorage'];\n\n    function authInterceptor ($rootScope, $q, $location, $localStorage, $sessionStorage) {\n        var service = {\n            request: request\n        };\n\n        return service;\n\n        function request (config) {\n            /*jshint camelcase: false */\n            config.headers = config.headers || {};\n            var token = $localStorage.authenticationToken || $sessionStorage.authenticationToken;\n            \n            if (token) {\n                config.headers.Authorization = 'Bearer ' + token;\n            }\n            \n            return config;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('authExpiredInterceptor', authExpiredInterceptor);\n\n    \n    authExpiredInterceptor.$inject = ['$rootScope', '$q', '$injector', '$localStorage', '$sessionStorage'];\n\n    function authExpiredInterceptor($rootScope, $q, $injector, $localStorage, $sessionStorage) {\n        var service = {\n            responseError: responseError\n        };\n\n        return service;\n\n        function responseError(response) {\n            if (response.status === 401) {\n                delete $localStorage.authenticationToken;\n                delete $sessionStorage.authenticationToken;\n                var Principal = $injector.get('Principal');\n                if (Principal.isAuthenticated()) {\n                    var Auth = $injector.get('Auth');\n                    Auth.authorize(true);\n                }\n            }\n            return $q.reject(response);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('translationHandler', translationHandler);\n\n    translationHandler.$inject = ['$rootScope', '$window', '$state', '$translate'];\n\n    function translationHandler($rootScope, $window, $state, $translate) {\n        return {\n            initialize: initialize,\n            updateTitle: updateTitle\n        };\n\n        function initialize() {\n            // if the current translation changes, update the window title\n            var translateChangeSuccess = $rootScope.$on('$translateChangeSuccess', function() {\n                updateTitle();\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(translateChangeSuccess) && translateChangeSuccess !== null){\n                    translateChangeSuccess();\n                }\n            });\n        }\n\n        // update the window title using params in the following\n        // precendence\n        // 1. titleKey parameter\n        // 2. $state.$current.data.pageTitle (current state page title)\n        // 3. 'global.title'\n        function updateTitle(titleKey) {\n            if (!titleKey && $state.$current.data && $state.$current.data.pageTitle) {\n                titleKey = $state.$current.data.pageTitle;\n            }\n            $translate(titleKey || 'global.title').then(function (title) {\n                $window.document.title = title;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('stateHandler', stateHandler);\n\n    stateHandler.$inject = ['$rootScope', '$state', '$translate', 'JhiLanguageService', 'translationHandler',\n        'Auth', 'Principal', 'ENV', 'VERSION'];\n\n    function stateHandler($rootScope, $state, $translate, JhiLanguageService, translationHandler,\n        Auth, Principal, ENV, VERSION) {\n        return {\n            initialize: initialize\n        };\n\n        function initialize() {\n            $rootScope.ENV = ENV;\n            $rootScope.VERSION = VERSION;\n            $rootScope.back = back;\n\n            var stateChangeStart = $rootScope.$on('$stateChangeStart', function (event, toState, toStateParams) {\n                $rootScope.toState = toState;\n                $rootScope.toStateParams = toStateParams;\n\n                if (Principal.isIdentityResolved()) {\n                    Auth.authorize();\n                }\n\n                \n                // Update the language\n                JhiLanguageService.getCurrent().then(function (language) {\n                    $translate.use(language);\n                });\n                \n            });\n\n            var stateChangeSuccess = $rootScope.$on('$stateChangeSuccess',  function(event, toState, toParams, fromState, fromParams) {\n                var titleKey = 'global.title' ;\n\n                // Remember previous state unless we've been redirected to login or we've just\n                // reset the state memory after logout. If we're redirected to login, our\n                // previousState is already set in the authExpiredInterceptor. If we're going\n                // to login directly, we don't want to be sent to some previous state anyway\n                if (!$rootScope.redirected && $rootScope.previousStateName) {\n                    $rootScope.previousStateName = fromState.name;\n                    $rootScope.previousStateParams = fromParams;\n                }\n\n                // Set the page title key to the one configured in state or use default one\n                if (toState.data.pageTitle) {\n                    titleKey = toState.data.pageTitle;\n                }\n                translationHandler.updateTitle(titleKey);\n            });\n\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n                if(angular.isDefined(stateChangeSuccess) && stateChangeSuccess !== null){\n                    stateChangeSuccess();\n                }\n            });\n\n            function back() {\n                // If previous state is 'activate' or do not exist go to 'home'\n                if ($rootScope.previousStateName === 'activate' || $state.get($rootScope.previousStateName) === null) {\n                    $state.go('home');\n                } else {\n                    $state.go($rootScope.previousStateName, $rootScope.previousStateParams);\n                }\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(translationConfig);\n\n    translationConfig.$inject = ['$translateProvider', 'tmhDynamicLocaleProvider'];\n\n    function translationConfig($translateProvider, tmhDynamicLocaleProvider) {\n        // Initialize angular-translate\n        $translateProvider.useLoader('$translatePartialLoader', {\n            urlTemplate: 'i18n/{lang}/{part}.json'\n        });\n\n        $translateProvider.preferredLanguage('en');\n        $translateProvider.useStorage('translationStorageProvider');\n        $translateProvider.useSanitizeValueStrategy('escaped');\n        $translateProvider.addInterpolation('$translateMessageFormatInterpolation');\n\n        tmhDynamicLocaleProvider.localeLocationPattern('i18n/angular-locale_{{locale}}.js');\n        tmhDynamicLocaleProvider.useCookieStorage();\n        tmhDynamicLocaleProvider.storageKey('NG_TRANSLATE_LANG_KEY');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('translationStorageProvider', translationStorageProvider);\n\n    translationStorageProvider.$inject = ['$cookies', '$log', 'LANGUAGES'];\n\n    function translationStorageProvider($cookies, $log, LANGUAGES) {\n        return {\n            get: get,\n            put: put\n        };\n\n        function get(name) {\n            if (LANGUAGES.indexOf($cookies.getObject(name)) === -1) {\n                $log.info('Resetting invalid cookie language \"' + $cookies.getObject(name) + '\" to prefered language \"en\"');\n                $cookies.putObject(name, 'en');\n            }\n            return $cookies.getObject(name);\n        }\n\n        function put(name, value) {\n            $cookies.putObject(name, value);\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(localStorageConfig);\n\n    localStorageConfig.$inject = ['$localStorageProvider'];\n\n    function localStorageConfig($localStorageProvider) {\n        $localStorageProvider.setKeyPrefix('jhi-');\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(httpConfig);\n\n    httpConfig.$inject = ['$urlRouterProvider', '$httpProvider', 'httpRequestInterceptorCacheBusterProvider', '$urlMatcherFactoryProvider'];\n\n    function httpConfig($urlRouterProvider, $httpProvider, httpRequestInterceptorCacheBusterProvider, $urlMatcherFactoryProvider) {\n        \n        //Cache everything except rest api requests\n        httpRequestInterceptorCacheBusterProvider.setMatchlist([/.*api.*/, /.*protected.*/], true);\n\n        $urlRouterProvider.otherwise('/');\n\n        $httpProvider.interceptors.push('errorHandlerInterceptor');\n        $httpProvider.interceptors.push('authExpiredInterceptor');\n        $httpProvider.interceptors.push('authInterceptor');\n        $httpProvider.interceptors.push('notificationInterceptor');\n        // jhipster-needle-angularjs-add-interceptor JHipster will add new application http interceptor here\n\n        $urlMatcherFactoryProvider.type('boolean', {\n            name : 'boolean',\n            decode: function(val) { return val === true || val === 'true'; },\n            encode: function(val) { return val ? 1 : 0; },\n            equals: function(a, b) { return this.is(a) && a === b; },\n            is: function(val) { return [true,false,0,1].indexOf(val) >= 0; },\n            pattern: /bool|true|0|1/\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(compileServiceConfig);\n\n    compileServiceConfig.$inject = ['$compileProvider', 'ENV'];\n\n    function compileServiceConfig($compileProvider, ENV) {\n        // disable debug data on prod profile to improve performance\n        if(ENV === 'prod'){\n            $compileProvider.debugInfoEnabled(false);\n        }\n\n        /*\n        If you wish to debug an application with this information\n        then you should open up a debug console in the browser\n        then call this method directly in this console:\n\n\t\tangular.reloadWithDebugInfo();\n\t\t*/\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(alertServiceConfig);\n\n    alertServiceConfig.$inject = ['AlertServiceProvider'];\n\n    function alertServiceConfig(AlertServiceProvider) {\n        // set below to true to make alerts look like toast\n        AlertServiceProvider.showAsToast(false);\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider\n        .state('user-management', {\n            parent: 'admin',\n            url: '/user-management',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.home.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management.html',\n                    controller: 'UserManagementController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management-detail', {\n            parent: 'admin',\n            url: '/user/:login',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'user-management.detail.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/user-management/user-management-detail.html',\n                    controller: 'UserManagementDetailController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('user-management');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('user-management.new', {\n            parent: 'user-management',\n            url: '/new',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: function () {\n                            return {\n                                id: null, login: null, firstName: null, lastName: null, email: null,\n                                activated: true, langKey: null, createdBy: null, createdDate: null,\n                                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                                resetKey: null, authorities: null\n                            };\n                        }\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('user-management');\n                });\n            }]\n        })\n        .state('user-management.edit', {\n            parent: 'user-management',\n            url: '/{login}/edit',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-dialog.html',\n                    controller: 'UserManagementDialogController',\n                    controllerAs: 'vm',\n                    backdrop: 'static',\n                    size: 'lg',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        })\n        .state('user-management.delete', {\n            parent: 'user-management',\n            url: '/{login}/delete',\n            data: {\n                authorities: ['ROLE_ADMIN']\n            },\n            onEnter: ['$stateParams', '$state', '$uibModal', function($stateParams, $state, $uibModal) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/user-management/user-management-delete-dialog.html',\n                    controller: 'UserManagementDeleteController',\n                    controllerAs: 'vm',\n                    size: 'md',\n                    resolve: {\n                        entity: ['User', function(User) {\n                            return User.get({login : $stateParams.login});\n                        }]\n                    }\n                }).result.then(function() {\n                    $state.go('user-management', null, { reload: true });\n                }, function() {\n                    $state.go('^');\n                });\n            }]\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('UserManagementController', UserManagementController);\n\n    UserManagementController.$inject = ['Principal', 'User', 'ParseLinks', 'paginationConstants', 'JhiLanguageService'];\n\n    function UserManagementController(Principal, User, ParseLinks, paginationConstants, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.currentAccount = null;\n        vm.languages = null;\n        vm.links = null;\n        vm.loadAll = loadAll;\n        vm.loadPage = loadPage;\n        vm.page = 1;\n        vm.setActive = setActive;\n        vm.totalItems = null;\n        vm.users = [];\n\n\n        vm.loadAll();\n\n        \n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        Principal.identity().then(function(account) {\n            vm.currentAccount = account;\n        });\n\n\n        function loadAll () {\n            User.query({page: vm.page - 1, size: paginationConstants.itemsPerPage}, function (result, headers) {\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n                vm.users = result;\n            });\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.loadAll();\n        }\n\n        function setActive (user, isActivated) {\n            user.activated = isActivated;\n            User.update(user, function () {\n                vm.loadAll();\n                vm.clear();\n            });\n        }\n\n        function clear () {\n            vm.user = {\n                id: null, login: null, firstName: null, lastName: null, email: null,\n                activated: null, langKey: null, createdBy: null, createdDate: null,\n                lastModifiedBy: null, lastModifiedDate: null, resetDate: null,\n                resetKey: null, authorities: null\n            };\n            vm.editForm.$setPristine();\n            vm.editForm.$setUntouched();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('UserManagementDialogController',UserManagementDialogController);\n\n    UserManagementDialogController.$inject = ['$stateParams', '$uibModalInstance', 'entity', 'User', 'JhiLanguageService'];\n\n    function UserManagementDialogController ($stateParams, $uibModalInstance, entity, User, JhiLanguageService) {\n        var vm = this;\n\n        vm.authorities = ['ROLE_USER', 'ROLE_ADMIN'];\n        vm.clear = clear;\n        vm.languages = null;\n        vm.save = save;\n        vm.user = entity;\n\n\n        JhiLanguageService.getAll().then(function (languages) {\n            vm.languages = languages;\n        });\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function onSaveSuccess (result) {\n            vm.isSaving = false;\n            $uibModalInstance.close(result);\n        }\n\n        function onSaveError () {\n            vm.isSaving = false;\n        }\n\n        function save () {\n            vm.isSaving = true;\n            if (vm.user.id !== null) {\n                User.update(vm.user, onSaveSuccess, onSaveError);\n            } else {\n                User.save(vm.user, onSaveSuccess, onSaveError);\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('UserManagementDetailController', UserManagementDetailController);\n\n    UserManagementDetailController.$inject = ['$stateParams', 'User'];\n\n    function UserManagementDetailController ($stateParams, User) {\n        var vm = this;\n\n        vm.load = load;\n        vm.user = {};\n\n        vm.load($stateParams.login);\n\n        function load (login) {\n            User.get({login: login}, function(result) {\n                vm.user = result;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('UserManagementDeleteController', UserManagementDeleteController);\n\n    UserManagementDeleteController.$inject = ['$uibModalInstance', 'entity', 'User'];\n\n    function UserManagementDeleteController ($uibModalInstance, entity, User) {\n        var vm = this;\n\n        vm.user = entity;\n        vm.clear = clear;\n        vm.confirmDelete = confirmDelete;\n\n        function clear () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function confirmDelete (login) {\n            User.delete({login: login},\n                function () {\n                    $uibModalInstance.close(true);\n                });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-tracker', {\n            parent: 'admin',\n            url: '/tracker',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'tracker.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/tracker/tracker.html',\n                    controller: 'JhiTrackerController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('tracker');\n                    return $translate.refresh();\n                }]\n            },\n            onEnter: function(JhiTrackerService) {\n                JhiTrackerService.subscribe();\n            },\n            onExit: function(JhiTrackerService) {\n                JhiTrackerService.unsubscribe();\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n    /* globals SockJS, Stomp */\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiTrackerService', JhiTrackerService);\n\n    JhiTrackerService.$inject = ['$rootScope', '$window', '$cookies', '$http', '$q', 'AuthServerProvider'];\n\n    function JhiTrackerService ($rootScope, $window, $cookies, $http, $q, AuthServerProvider) {\n        var stompClient = null;\n        var subscriber = null;\n        var listener = $q.defer();\n        var connected = $q.defer();\n        var alreadyConnectedOnce = false;\n\n        var service = {\n            connect: connect,\n            disconnect: disconnect,\n            receive: receive,\n            sendActivity: sendActivity,\n            subscribe: subscribe,\n            unsubscribe: unsubscribe\n        };\n\n        return service;\n\n        function connect () {\n            //building absolute path so that websocket doesnt fail when deploying with a context path\n            var loc = $window.location;\n            var url = '//' + loc.host + loc.pathname + 'websocket/tracker';\n            var authToken = AuthServerProvider.getToken();\n            if(authToken){\n                url += '?access_token=' + authToken;\n            }\n            var socket = new SockJS(url);\n            stompClient = Stomp.over(socket);\n            var stateChangeStart;\n            var headers = {};\n            stompClient.connect(headers, function() {\n                connected.resolve('success');\n                sendActivity();\n                if (!alreadyConnectedOnce) {\n                    stateChangeStart = $rootScope.$on('$stateChangeStart', function () {\n                        sendActivity();\n                    });\n                    alreadyConnectedOnce = true;\n                }\n            });\n            $rootScope.$on('$destroy', function () {\n                if(angular.isDefined(stateChangeStart) && stateChangeStart !== null){\n                    stateChangeStart();\n                }\n            });\n        }\n\n        function disconnect () {\n            if (stompClient !== null) {\n                stompClient.disconnect();\n                stompClient = null;\n            }\n        }\n\n        function receive () {\n            return listener.promise;\n        }\n\n        function sendActivity() {\n            if (stompClient !== null && stompClient.connected) {\n                stompClient\n                    .send('/topic/activity',\n                    {},\n                    angular.toJson({'page': $rootScope.toState.name}));\n            }\n        }\n\n        function subscribe () {\n            connected.promise.then(function() {\n                subscriber = stompClient.subscribe('/topic/tracker', function(data) {\n                    listener.notify(angular.fromJson(data.body));\n                });\n            }, null, null);\n        }\n\n        function unsubscribe () {\n            if (subscriber !== null) {\n                subscriber.unsubscribe();\n            }\n            listener = $q.defer();\n        }\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiTrackerController', JhiTrackerController);\n\n    JhiTrackerController.$inject = ['$cookies', '$http', 'JhiTrackerService'];\n\n    function JhiTrackerController ($cookies, $http, JhiTrackerService) {\n        // This controller uses a Websocket connection to receive user activities in real-time.\n        var vm = this;\n\n        vm.activities = [];\n\n        JhiTrackerService.receive().then(null, null, function(activity) {\n            showActivity(activity);\n        });\n\n        function showActivity(activity) {\n            var existingActivity = false;\n            for (var index = 0; index < vm.activities.length; index++) {\n                if(vm.activities[index].sessionId === activity.sessionId) {\n                    existingActivity = true;\n                    if (activity.page === 'logout') {\n                        vm.activities.splice(index, 1);\n                    } else {\n                        vm.activities[index] = activity;\n                    }\n                }\n            }\n            if (!existingActivity && (activity.page !== 'logout')) {\n                vm.activities.push(activity);\n            }\n        }\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-metrics', {\n            parent: 'admin',\n            url: '/metrics',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'metrics.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/metrics/metrics.html',\n                    controller: 'JhiMetricsMonitoringController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('metrics');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiMetricsService', JhiMetricsService);\n\n    JhiMetricsService.$inject = ['$rootScope', '$http'];\n\n    function JhiMetricsService ($rootScope, $http) {\n        var service = {\n            getMetrics: getMetrics,\n            threadDump: threadDump\n        };\n\n        return service;\n\n        function getMetrics () {\n            return $http.get('metrics/metrics').then(function (response) {\n                return response.data;\n            });\n        }\n\n        function threadDump () {\n            return $http.get('dump').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiMetricsMonitoringModalController', JhiMetricsMonitoringModalController);\n\n    JhiMetricsMonitoringModalController.$inject = ['$uibModalInstance', 'threadDump'];\n\n    function JhiMetricsMonitoringModalController ($uibModalInstance, threadDump) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.getLabelClass = getLabelClass;\n        vm.threadDump = threadDump;\n        vm.threadDumpAll = 0;\n        vm.threadDumpBlocked = 0;\n        vm.threadDumpRunnable = 0;\n        vm.threadDumpTimedWaiting = 0;\n        vm.threadDumpWaiting = 0;\n\n        angular.forEach(threadDump, function(value) {\n            if (value.threadState === 'RUNNABLE') {\n                vm.threadDumpRunnable += 1;\n            } else if (value.threadState === 'WAITING') {\n                vm.threadDumpWaiting += 1;\n            } else if (value.threadState === 'TIMED_WAITING') {\n                vm.threadDumpTimedWaiting += 1;\n            } else if (value.threadState === 'BLOCKED') {\n                vm.threadDumpBlocked += 1;\n            }\n        });\n\n        vm.threadDumpAll = vm.threadDumpRunnable + vm.threadDumpWaiting +\n            vm.threadDumpTimedWaiting + vm.threadDumpBlocked;\n\n        function cancel () {\n            $uibModalInstance.dismiss('cancel');\n        }\n\n        function getLabelClass (threadState) {\n            if (threadState === 'RUNNABLE') {\n                return 'label-success';\n            } else if (threadState === 'WAITING') {\n                return 'label-info';\n            } else if (threadState === 'TIMED_WAITING') {\n                return 'label-warning';\n            } else if (threadState === 'BLOCKED') {\n                return 'label-danger';\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiMetricsMonitoringController', JhiMetricsMonitoringController);\n\n    JhiMetricsMonitoringController.$inject = ['$scope','JhiMetricsService', '$uibModal'];\n\n    function JhiMetricsMonitoringController ($scope, JhiMetricsService, $uibModal) {\n        var vm = this;\n\n        vm.cachesStats = {};\n        vm.metrics = {};\n        vm.refresh = refresh;\n        vm.refreshThreadDumpData = refreshThreadDumpData;\n        vm.servicesStats = {};\n        vm.updatingMetrics = true;\n\n        vm.refresh();\n\n        $scope.$watch('vm.metrics', function (newValue) {\n            vm.servicesStats = {};\n            vm.cachesStats = {};\n            angular.forEach(newValue.timers, function (value, key) {\n                if (key.indexOf('web.rest') !== -1 || key.indexOf('service') !== -1) {\n                    vm.servicesStats[key] = value;\n                }\n                if (key.indexOf('net.sf.ehcache.Cache') !== -1) {\n                    // remove gets or puts\n                    var index = key.lastIndexOf('.');\n                    var newKey = key.substr(0, index);\n\n                    // Keep the name of the domain\n                    index = newKey.lastIndexOf('.');\n                    vm.cachesStats[newKey] = {\n                        'name': newKey.substr(index + 1),\n                        'value': value\n                    };\n                }\n            });\n        });\n\n        function refresh () {\n            vm.updatingMetrics = true;\n            JhiMetricsService.getMetrics().then(function (promise) {\n                vm.metrics = promise;\n                vm.updatingMetrics = false;\n            }, function (promise) {\n                vm.metrics = promise.data;\n                vm.updatingMetrics = false;\n            });\n        }\n\n        function refreshThreadDumpData () {\n            JhiMetricsService.threadDump().then(function(data) {\n                $uibModal.open({\n                    templateUrl: 'app/admin/metrics/metrics.modal.html',\n                    controller: 'JhiMetricsMonitoringModalController',\n                    controllerAs: 'vm',\n                    size: 'lg',\n                    resolve: {\n                        threadDump: function() {\n                            return data;\n                        }\n\n                    }\n                });\n            });\n        }\n\n\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('logs', {\n            parent: 'admin',\n            url: '/logs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'logs.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/logs/logs.html',\n                    controller: 'LogsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('logs');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('LogsService', LogsService);\n\n    LogsService.$inject = ['$resource'];\n\n    function LogsService ($resource) {\n        var service = $resource('api/logs', {}, {\n            'findAll': { method: 'GET', isArray: true},\n            'changeLevel': { method: 'PUT'}\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('LogsController', LogsController);\n\n    LogsController.$inject = ['LogsService'];\n\n    function LogsController (LogsService) {\n        var vm = this;\n\n        vm.changeLevel = changeLevel;\n        vm.loggers = LogsService.findAll();\n\n        function changeLevel (name, level) {\n            LogsService.changeLevel({name: name, level: level}, function () {\n                vm.loggers = LogsService.findAll();\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-health', {\n            parent: 'admin',\n            url: '/health',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'health.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/health/health.html',\n                    controller: 'JhiHealthCheckController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('health');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiHealthService', JhiHealthService);\n\n    JhiHealthService.$inject = ['$rootScope', '$http'];\n\n    function JhiHealthService ($rootScope, $http) {\n        var service = {\n            checkHealth: checkHealth\n        };\n\n        return service;\n\n        function checkHealth () {\n            return $http.get('health').then(function (response) {\n                return response.data;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular.module('musixiseApp')\n        .controller('HealthModalController', HealthModalController);\n\n    HealthModalController.$inject = ['$uibModalInstance', 'currentHealth', 'baseName', 'subSystemName'];\n\n    function HealthModalController ($uibModalInstance, currentHealth, baseName, subSystemName) {\n        var vm = this;\n\n        vm.cancel = cancel;\n        vm.currentHealth = currentHealth;\n        vm.baseName = baseName;\n        vm.subSystemName = subSystemName;\n\n        function cancel() {\n            $uibModalInstance.dismiss('cancel');\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiHealthCheckController', JhiHealthCheckController);\n\n    JhiHealthCheckController.$inject = ['JhiHealthService', '$uibModal'];\n\n    function JhiHealthCheckController (JhiHealthService, $uibModal) {\n        var vm = this;\n\n        vm.addHealthObject = addHealthObject;\n        vm.baseName = baseName;\n        vm.flattenHealthData = flattenHealthData;\n        vm.getLabelClass = getLabelClass;\n        vm.getModuleName = getModuleName;\n        vm.hasSubSystem = hasSubSystem;\n        vm.isHealthObject = isHealthObject;\n        vm.refresh = refresh;\n        vm.updatingHealth = true;\n        vm.separator = '.';\n        vm.showHealth = showHealth;\n        vm.subSystemName = subSystemName;\n        vm.transformHealthData = transformHealthData;\n\n        vm.refresh();\n\n\n        function addHealthObject (result, isLeaf, healthObject, name) {\n\n            var healthData = {\n                'name': name\n            };\n            var details = {};\n            var hasDetails = false;\n\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status' || key === 'error') {\n                    healthData[key] = value;\n                } else {\n                    if (!vm.isHealthObject(value)) {\n                        details[key] = value;\n                        hasDetails = true;\n                    }\n                }\n            });\n\n            // Add the of the details\n            if (hasDetails) {\n                angular.extend(healthData, { 'details': details});\n            }\n\n            // Only add nodes if they provide additional information\n            if (isLeaf || hasDetails || healthData.error) {\n                result.push(healthData);\n            }\n            return healthData;\n        }\n\n        function baseName (name) {\n            if (name) {\n                var split = name.split('.');\n                return split[0];\n            }\n        }\n\n        function flattenHealthData (result, path, data) {\n            angular.forEach(data, function (value, key) {\n                if (vm.isHealthObject(value)) {\n                    if (vm.hasSubSystem(value)) {\n                        vm.addHealthObject(result, false, value, vm.getModuleName(path, key));\n                        vm.flattenHealthData(result, vm.getModuleName(path, key), value);\n                    } else {\n                        vm.addHealthObject(result, true, value, vm.getModuleName(path, key));\n                    }\n                }\n            });\n            return result;\n        }\n\n        function getLabelClass (statusState) {\n            if (statusState === 'UP') {\n                return 'label-success';\n            } else {\n                return 'label-danger';\n            }\n        }\n\n        function getModuleName (path, name) {\n            var result;\n            if (path && name) {\n                result = path + vm.separator + name;\n            }  else if (path) {\n                result = path;\n            } else if (name) {\n                result = name;\n            } else {\n                result = '';\n            }\n            return result;\n        }\n\n        function hasSubSystem (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value) {\n                if (value && value.status) {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function isHealthObject (healthObject) {\n            var result = false;\n            angular.forEach(healthObject, function (value, key) {\n                if (key === 'status') {\n                    result = true;\n                }\n            });\n            return result;\n        }\n\n        function refresh () {\n            vm.updatingHealth = true;\n            JhiHealthService.checkHealth().then(function (response) {\n                vm.healthData = vm.transformHealthData(response);\n                vm.updatingHealth = false;\n            }, function (response) {\n                vm.healthData =  vm.transformHealthData(response.data);\n                vm.updatingHealth = false;\n            });\n        }\n\n        function showHealth (health) {\n            $uibModal.open({\n                templateUrl: 'app/admin/health/health.modal.html',\n                controller: 'HealthModalController',\n                controllerAs: 'vm',\n                size: 'lg',\n                resolve: {\n                    currentHealth: function() {\n                        return health;\n                    },\n                    baseName: function() {\n                        return vm.baseName;\n                    },\n                    subSystemName: function() {\n                        return vm.subSystemName;\n                    }\n\n                }\n            });\n        }\n\n        function subSystemName (name) {\n            if (name) {\n                var split = name.split('.');\n                split.splice(0, 1);\n                var remainder = split.join('.');\n                return remainder ? ' - ' + remainder : '';\n            }\n        }\n\n        function transformHealthData (data) {\n            var response = [];\n            vm.flattenHealthData(response, null, data);\n            return response;\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('docs', {\n            parent: 'admin',\n            url: '/docs',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'global.menu.admin.apidocs'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/docs/docs.html'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', function ($translate) {\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('jhi-configuration', {\n            parent: 'admin',\n            url: '/configuration',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'configuration.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/configuration/configuration.html',\n                    controller: 'JhiConfigurationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('configuration');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('JhiConfigurationService', JhiConfigurationService);\n\n    JhiConfigurationService.$inject = ['$filter', '$http'];\n\n    function JhiConfigurationService ($filter, $http) {\n        var service = {\n            get: get,\n            getEnv: getEnv\n        };\n\n        return service;\n\n        function get () {\n            return $http.get('configprops').then(getConfigPropsComplete);\n\n            function getConfigPropsComplete (response) {\n                var properties = [];\n                angular.forEach(response.data, function (data) {\n                    properties.push(data);\n                });\n                var orderBy = $filter('orderBy');\n                return orderBy(properties, 'prefix');\n            }\n        }\n\n        function getEnv () {\n            return $http.get('env').then(getEnvComplete);\n\n            function getEnvComplete (response) {\n                var properties = {};\n                angular.forEach(response.data, function (val,key) {\n                    var vals = [];\n                    angular.forEach(val, function (v,k) {\n                        vals.push({ key:k, val:v });\n                    });\n                    properties[key] = vals;\n                });\n                return properties;\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('JhiConfigurationController', JhiConfigurationController);\n\n    JhiConfigurationController.$inject = ['$filter','JhiConfigurationService'];\n\n    function JhiConfigurationController (filter,JhiConfigurationService) {\n        var vm = this;\n\n        vm.allConfiguration = null;\n        vm.configuration = null;\n\n        JhiConfigurationService.get().then(function(configuration) {\n            vm.configuration = configuration;\n        });\n        JhiConfigurationService.getEnv().then(function (configuration) {\n            vm.allConfiguration = configuration;\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('audits', {\n            parent: 'admin',\n            url: '/audits',\n            data: {\n                authorities: ['ROLE_ADMIN'],\n                pageTitle: 'audits.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/admin/audits/audits.html',\n                    controller: 'AuditsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('audits');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('AuditsService', AuditsService);\n\n    AuditsService.$inject = ['$resource'];\n\n    function AuditsService ($resource) {\n        var service = $resource('api/audits/:id', {}, {\n            'get': {\n                method: 'GET',\n                isArray: true\n            },\n            'query': {\n                method: 'GET',\n                isArray: true,\n                params: {fromDate: null, toDate: null}\n            }\n        });\n\n        return service;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('AuditsController', AuditsController);\n\n    AuditsController.$inject = ['$filter', 'AuditsService', 'ParseLinks'];\n\n    function AuditsController ($filter, AuditsService, ParseLinks) {\n        var vm = this;\n\n        vm.audits = null;\n        vm.fromDate = null;\n        vm.links = null;\n        vm.loadPage = loadPage;\n        vm.onChangeDate = onChangeDate;\n        vm.page = 1;\n        vm.previousMonth = previousMonth;\n        vm.toDate = null;\n        vm.today = today;\n        vm.totalItems = null;\n\n        vm.today();\n        vm.previousMonth();\n        vm.onChangeDate();\n\n        function onChangeDate () {\n            var dateFormat = 'yyyy-MM-dd';\n            var fromDate = $filter('date')(vm.fromDate, dateFormat);\n            var toDate = $filter('date')(vm.toDate, dateFormat);\n\n            AuditsService.query({page: vm.page -1, size: 20, fromDate: fromDate, toDate: toDate}, function(result, headers){\n                vm.audits = result;\n                vm.links = ParseLinks.parse(headers('link'));\n                vm.totalItems = headers('X-Total-Count');\n            });\n        }\n\n        // Date picker configuration\n        function today () {\n            // Today + 1 day - needed if the current day must be included\n            var today = new Date();\n            vm.toDate = new Date(today.getFullYear(), today.getMonth(), today.getDate() + 1);\n        }\n\n        function previousMonth () {\n            var fromDate = new Date();\n            if (fromDate.getMonth() === 0) {\n                fromDate = new Date(fromDate.getFullYear() - 1, 11, fromDate.getDate());\n            } else {\n                fromDate = new Date(fromDate.getFullYear(), fromDate.getMonth() - 1, fromDate.getDate());\n            }\n\n            vm.fromDate = fromDate;\n        }\n\n        function loadPage (page) {\n            vm.page = page;\n            vm.onChangeDate();\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('social-register', {\n            parent: 'account',\n            url: '/social-register/:provider?{success:boolean}',\n            data: {\n                authorities: [],\n                pageTitle: 'social.register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/social/social-register.html',\n                    controller: 'SocialRegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('social');\n                    return $translate.refresh();\n                }]\n            }\n        })\n        .state('social-auth', {\n            parent: 'account',\n            url: '/social-auth',\n            data: {\n                authorities: [],\n            },\n            views: {\n                'content@': {\n                    controller: 'SocialAuthController'\n                }\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .factory('SocialService', SocialService);\n\n    function SocialService () {\n        var socialService = {\n            getProviderSetting: getProviderSetting,\n            getProviderURL: getProviderURL,\n            getCSRF: getCSRF\n        };\n\n        return socialService;\n\n        function getProviderSetting (provider) {\n            switch(provider) {\n            case 'google': return 'https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email';\n            case 'facebook': return 'public_profile,email';\n            case 'twitter': return '';\n                // jhipster-needle-add-social-button\n            default: return 'Provider setting not defined';\n            }\n        }\n\n        function getProviderURL (provider) {\n            return 'signin/' + provider;\n        }\n\n        function getCSRF () {\n            /* globals document */\n            var name = 'CSRF-TOKEN=';\n            var ca = document.cookie.split(';');\n            for (var i = 0; i < ca.length; i++) {\n                var c = ca[i];\n                while (c.charAt(0) === ' ') {\n                    c = c.substring(1);\n                }\n                if (c.indexOf(name) !== -1) {\n                    return c.substring(name.length, c.length);\n                }\n            }\n            return '';\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('SocialRegisterController', SocialRegisterController);\n\n    SocialRegisterController.$inject = ['$filter', '$stateParams'];\n\n    function SocialRegisterController ($filter, $stateParams) {\n        var vm = this;\n\n        vm.success = $stateParams.success;\n        vm.error = !vm.success;\n        vm.provider = $stateParams.provider;\n        vm.providerLabel = $filter('capitalize')(vm.provider);\n        vm.success = $stateParams.success;\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('SocialAuthController', SocialAuthController);\n\n    SocialAuthController.$inject = ['$state', '$cookies', 'Auth'];\n\n    function SocialAuthController($state, $cookies, Auth) {\n        var token = $cookies.get('social-authentication');\n\n        Auth.loginWithToken(token, false).then(function () {\n            $cookies.remove('social-authentication');\n            Auth.authorize(true);\n        }, function () {\n            $state.go('social-register', {'success': 'false'});\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('settings', {\n            parent: 'account',\n            url: '/settings',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.settings'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/settings/settings.html',\n                    controller: 'SettingsController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('settings');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('SettingsController', SettingsController);\n\n    SettingsController.$inject = ['Principal', 'Auth', 'JhiLanguageService', '$translate'];\n\n    function SettingsController (Principal, Auth, JhiLanguageService, $translate) {\n        var vm = this;\n\n        vm.error = null;\n        vm.save = save;\n        vm.settingsAccount = null;\n        vm.success = null;\n\n        /**\n         * Store the \"settings account\" in a separate variable, and not in the shared \"account\" variable.\n         */\n        var copyAccount = function (account) {\n            return {\n                activated: account.activated,\n                email: account.email,\n                firstName: account.firstName,\n                langKey: account.langKey,\n                lastName: account.lastName,\n                login: account.login\n            };\n        };\n\n        Principal.identity().then(function(account) {\n            vm.settingsAccount = copyAccount(account);\n        });\n\n        function save () {\n            Auth.updateAccount(vm.settingsAccount).then(function() {\n                vm.error = null;\n                vm.success = 'OK';\n                Principal.identity(true).then(function(account) {\n                    vm.settingsAccount = copyAccount(account);\n                });\n                JhiLanguageService.getCurrent().then(function(current) {\n                    if (vm.settingsAccount.langKey !== current) {\n                        $translate.use(vm.settingsAccount.langKey);\n                    }\n                });\n            }).catch(function() {\n                vm.success = null;\n                vm.error = 'ERROR';\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('register', {\n            parent: 'account',\n            url: '/register',\n            data: {\n                authorities: [],\n                pageTitle: 'register.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/register/register.html',\n                    controller: 'RegisterController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('register');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('RegisterController', RegisterController);\n\n\n    RegisterController.$inject = ['$translate', '$timeout', 'Auth', 'LoginService'];\n\n    function RegisterController ($translate, $timeout, Auth, LoginService) {\n        var vm = this;\n\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.errorUserExists = null;\n        vm.login = LoginService.open;\n        vm.register = register;\n        vm.registerAccount = {};\n        vm.success = null;\n\n        $timeout(function (){angular.element('[ng-model=\"vm.registerAccount.login\"]').focus();});\n\n        function register () {\n            if (vm.registerAccount.password !== vm.confirmPassword) {\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.registerAccount.langKey = $translate.use();\n                vm.doNotMatch = null;\n                vm.error = null;\n                vm.errorUserExists = null;\n                vm.errorEmailExists = null;\n\n                Auth.createAccount(vm.registerAccount).then(function () {\n                    vm.success = 'OK';\n                }).catch(function (response) {\n                    vm.success = null;\n                    if (response.status === 400 && response.data === 'login already in use') {\n                        vm.errorUserExists = 'ERROR';\n                    } else if (response.status === 400 && response.data === 'e-mail address already in use') {\n                        vm.errorEmailExists = 'ERROR';\n                    } else {\n                        vm.error = 'ERROR';\n                    }\n                });\n            }\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('password', {\n            parent: 'account',\n            url: '/password',\n            data: {\n                authorities: ['ROLE_USER'],\n                pageTitle: 'global.menu.account.password'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/password/password.html',\n                    controller: 'PasswordController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('password');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('PasswordController', PasswordController);\n\n    PasswordController.$inject = ['Auth', 'Principal'];\n\n    function PasswordController (Auth, Principal) {\n        var vm = this;\n\n        vm.changePassword = changePassword;\n        vm.doNotMatch = null;\n        vm.error = null;\n        vm.success = null;\n\n        Principal.identity().then(function(account) {\n            vm.account = account;\n        });\n\n        function changePassword () {\n            if (vm.password !== vm.confirmPassword) {\n                vm.error = null;\n                vm.success = null;\n                vm.doNotMatch = 'ERROR';\n            } else {\n                vm.doNotMatch = null;\n                Auth.changePassword(vm.password).then(function () {\n                    vm.error = null;\n                    vm.success = 'OK';\n                }).catch(function () {\n                    vm.success = null;\n                    vm.error = 'ERROR';\n                });\n            }\n        }\n    }\n})();\n","/* globals $ */\n(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .directive('passwordStrengthBar', passwordStrengthBar);\n\n    function passwordStrengthBar () {\n        var directive = {\n            replace: true,\n            restrict: 'E',\n            template: '<div id=\"strength\">' +\n                '<small translate=\"global.messages.validate.newpassword.strength\">Password strength:</small>' +\n                '<ul id=\"strengthBar\">' +\n                '<li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li><li class=\"point\"></li>' +\n                '</ul>' +\n                '</div>',\n            scope: {\n                passwordToCheck: '='\n            },\n            link: linkFunc\n        };\n\n        return directive;\n\n        /* private helper methods*/\n\n        function linkFunc(scope, iElement) {\n            var strength = {\n                colors: ['#F00', '#F90', '#FF0', '#9F0', '#0F0'],\n                mesureStrength: function (p) {\n\n                    var _force = 0;\n                    var _regex = /[$-/:-?{-~!\"^_`\\[\\]]/g; // \"\n\n                    var _lowerLetters = /[a-z]+/.test(p);\n                    var _upperLetters = /[A-Z]+/.test(p);\n                    var _numbers = /[0-9]+/.test(p);\n                    var _symbols = _regex.test(p);\n\n                    var _flags = [_lowerLetters, _upperLetters, _numbers, _symbols];\n                    var _passedMatches = $.grep(_flags, function (el) {\n                        return el === true;\n                    }).length;\n\n                    _force += 2 * p.length + ((p.length >= 10) ? 1 : 0);\n                    _force += _passedMatches * 10;\n\n                    // penality (short password)\n                    _force = (p.length <= 6) ? Math.min(_force, 10) : _force;\n\n                    // penality (poor variety of characters)\n                    _force = (_passedMatches === 1) ? Math.min(_force, 10) : _force;\n                    _force = (_passedMatches === 2) ? Math.min(_force, 20) : _force;\n                    _force = (_passedMatches === 3) ? Math.min(_force, 40) : _force;\n\n                    return _force;\n\n                },\n                getColor: function (s) {\n\n                    var idx = 0;\n                    if (s <= 10) {\n                        idx = 0;\n                    }\n                    else if (s <= 20) {\n                        idx = 1;\n                    }\n                    else if (s <= 30) {\n                        idx = 2;\n                    }\n                    else if (s <= 40) {\n                        idx = 3;\n                    }\n                    else {\n                        idx = 4;\n                    }\n\n                    return { idx: idx + 1, col: this.colors[idx] };\n                }\n            };\n            scope.$watch('passwordToCheck', function (password) {\n                if (password) {\n                    var c = strength.getColor(strength.mesureStrength(password));\n                    iElement.removeClass('ng-hide');\n                    iElement.find('ul').children('li')\n                        .css({ 'background-color': '#DDD' })\n                        .slice(0, c.idx)\n                        .css({ 'background-color': c.col });\n                }\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('activate', {\n            parent: 'account',\n            url: '/activate?key',\n            data: {\n                authorities: [],\n                pageTitle: 'activate.title'\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/account/activate/activate.html',\n                    controller: 'ActivationController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('activate');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('ActivationController', ActivationController);\n\n    ActivationController.$inject = ['$stateParams', 'Auth', 'LoginService'];\n\n    function ActivationController ($stateParams, Auth, LoginService) {\n        var vm = this;\n\n        Auth.activateAccount({key: $stateParams.key}).then(function () {\n            vm.error = null;\n            vm.success = 'OK';\n        }).catch(function () {\n            vm.success = null;\n            vm.error = 'ERROR';\n        });\n\n        vm.login = LoginService.open;\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('home', {\n            parent: 'app',\n            url: '/',\n            data: {\n                authorities: []\n            },\n            views: {\n                'content@': {\n                    templateUrl: 'app/home/home.html',\n                    controller: 'HomeController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                mainTranslatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate,$translatePartialLoader) {\n                    $translatePartialLoader.addPart('home');\n                    return $translate.refresh();\n                }]\n            }\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .controller('HomeController', HomeController);\n\n    HomeController.$inject = ['$scope', 'Principal', 'LoginService'];\n\n    function HomeController ($scope, Principal, LoginService) {\n        var vm = this;\n\n        vm.account = null;\n        vm.isAuthenticated = null;\n        vm.login = LoginService.open;\n        $scope.$on('authenticationSuccess', function() {\n            getAccount();\n        });\n\n        getAccount();\n\n        function getAccount() {\n            Principal.identity().then(function(account) {\n                vm.account = account;\n                vm.isAuthenticated = Principal.isAuthenticated;\n            });\n        }\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('entity', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function () {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig ($stateProvider) {\n        $stateProvider.state('admin', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('account', {\n            abstract: true,\n            parent: 'app'\n        });\n    }\n})();\n","(function() {\n    'use strict';\n\n    angular\n        .module('musixiseApp')\n        .config(stateConfig);\n\n    stateConfig.$inject = ['$stateProvider'];\n\n    function stateConfig($stateProvider) {\n        $stateProvider.state('app', {\n            abstract: true,\n            views: {\n                'navbar@': {\n                    templateUrl: 'app/layouts/navbar/navbar.html',\n                    controller: 'NavbarController',\n                    controllerAs: 'vm'\n                }\n            },\n            resolve: {\n                authorize: ['Auth',\n                    function (Auth) {\n                        return Auth.authorize();\n                    }\n                ],\n                translatePartialLoader: ['$translate', '$translatePartialLoader', function ($translate, $translatePartialLoader) {\n                    $translatePartialLoader.addPart('global');\n                }]\n            }\n        });\n    }\n})();\n","(function () {\n    \"use strict\";\n    // DO NOT EDIT THIS FILE, EDIT THE GULP TASK NGCONSTANT SETTINGS INSTEAD WHICH GENERATES THIS FILE\n    angular.module(\"musixiseApp\")\n\n.constant(\"ENV\", \"prod\")\n\n.constant(\"VERSION\", \"0.0.1-SNAPSHOT\")\n\n;\n})();\n"],"sourceRoot":"/source/"}